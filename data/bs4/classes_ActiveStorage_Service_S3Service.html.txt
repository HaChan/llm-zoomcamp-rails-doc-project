Active Storage S3 ServiceWraps the Amazon Simple StorageService(S3) as an Active Storage service. SeeActiveStorage::Servicefor the generic API documentation that applies to all services.MethodsCcomposeDdelete,delete_prefixed,download,download_chunkEexist?Hheaders_for_direct_uploadNnewUupload,url_for_direct_uploadConstantsMAXIMUM_UPLOAD_PARTS_COUNT=10000MINIMUM_UPLOAD_PART_SIZE=5.megabytesAttributes[R]bucket[R]client[R]multipart_upload_threshold[R]upload_optionsClass Public methodsnew(bucket:, upload: {}, public: false, **options)LinkSource:show|on GitHub# File activestorage/lib/active_storage/service/s3_service.rb, line 17definitialize(bucket:,upload:{},public:false,**options)@client=Aws::S3::Resource.new(**options)@bucket=@client.bucket(bucket)@multipart_upload_threshold=upload.delete(:multipart_threshold)||100.megabytes@public=public@upload_options=upload@upload_options[:acl] ="public-read"ifpublic?endInstance Public methodscompose(source_keys, destination_key, filename: nil, content_type: nil, disposition: nil, custom_metadata: {})LinkSource:show|on GitHub# File activestorage/lib/active_storage/service/s3_service.rb, line 100defcompose(source_keys,destination_key,filename:nil,content_type:nil,disposition:nil,custom_metadata:{})content_disposition=content_disposition_with(type:disposition,filename:filename)ifdisposition&&filenameobject_for(destination_key).upload_stream(content_type:content_type,content_disposition:content_disposition,part_size:MINIMUM_UPLOAD_PART_SIZE,metadata:custom_metadata,**upload_options)do|out|source_keys.eachdo|source_key|stream(source_key)do|chunk|IO.copy_stream(StringIO.new(chunk),out)endendendenddelete(key)LinkSource:show|on GitHub# File activestorage/lib/active_storage/service/s3_service.rb, line 62defdelete(key)instrument:delete,key:keydoobject_for(key).deleteendenddelete_prefixed(prefix)LinkSource:show|on GitHub# File activestorage/lib/active_storage/service/s3_service.rb, line 68defdelete_prefixed(prefix)instrument:delete_prefixed,prefix:prefixdobucket.objects(prefix:prefix).batch_delete!endenddownload(key, &block)LinkSource:show|on GitHub# File activestorage/lib/active_storage/service/s3_service.rb, line 40defdownload(key,&block)ifblock_given?instrument:streaming_download,key:keydostream(key,&block)endelseinstrument:download,key:keydoobject_for(key).get.body.string.force_encoding(Encoding::BINARY)rescueAws::S3::Errors::NoSuchKeyraiseActiveStorage::FileNotFoundErrorendendenddownload_chunk(key, range)LinkSource:show|on GitHub# File activestorage/lib/active_storage/service/s3_service.rb, line 54defdownload_chunk(key,range)instrument:download_chunk,key:key,range:rangedoobject_for(key).get(range:"bytes=#{range.begin}-#{range.exclude_end? ? range.end - 1 : range.end}").body.string.force_encoding(Encoding::BINARY)rescueAws::S3::Errors::NoSuchKeyraiseActiveStorage::FileNotFoundErrorendendexist?(key)LinkSource:show|on GitHub# File activestorage/lib/active_storage/service/s3_service.rb, line 74defexist?(key)instrument:exist,key:keydo|payload|answer=object_for(key).exists?payload[:exist] =answeranswerendendheaders_for_direct_upload(key, content_type:, checksum:, filename: nil, disposition: nil, custom_metadata: {}, **)LinkSource:show|on GitHub# File activestorage/lib/active_storage/service/s3_service.rb, line 94defheaders_for_direct_upload(key,content_type:,checksum:,filename:nil,disposition:nil,custom_metadata:{},**)content_disposition=content_disposition_with(type:disposition,filename:filename)iffilename{"Content-Type"=>content_type,"Content-MD5"=>checksum,"Content-Disposition"=>content_disposition,**custom_metadata_headers(custom_metadata) }endupload(key, io, checksum: nil, filename: nil, content_type: nil, disposition: nil, custom_metadata: {}, **)LinkSource:show|on GitHub# File activestorage/lib/active_storage/service/s3_service.rb, line 28defupload(key,io,checksum:nil,filename:nil,content_type:nil,disposition:nil,custom_metadata:{},**)instrument:upload,key:key,checksum:checksumdocontent_disposition=content_disposition_with(filename:filename,type:disposition)ifdisposition&&filenameifio.size<multipart_upload_thresholdupload_with_single_partkey,io,checksum:checksum,content_type:content_type,content_disposition:content_disposition,custom_metadata:custom_metadataelseupload_with_multipartkey,io,content_type:content_type,content_disposition:content_disposition,custom_metadata:custom_metadataendendendurl_for_direct_upload(key, expires_in:, content_type:, content_length:, checksum:, custom_metadata: {})LinkSource:show|on GitHub# File activestorage/lib/active_storage/service/s3_service.rb, line 82defurl_for_direct_upload(key,expires_in:,content_type:,content_length:,checksum:,custom_metadata:{})instrument:url,key:keydo|payload|generated_url=object_for(key).presigned_url:put,expires_in:expires_in.to_i,content_type:content_type,content_length:content_length,content_md5:checksum,metadata:custom_metadata,whitelist_headers:["content-length"],**upload_optionspayload[:url] =generated_urlgenerated_urlendend