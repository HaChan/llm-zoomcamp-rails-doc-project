Single table inheritanceActive Record allows inheritance by storing the name of the class in a column that by default is named âtypeâ (can be changed by overwritingBase.inheritance_column). This means that an inheritance looking like this:class Company < ActiveRecord::Base; end
class Firm < Company; end
class Client < Company; end
class PriorityClient < Client; endWhen you doFirm.create(name: "37signals"), this record will be saved in the companies table with type = âFirmâ. You can then fetch this row again usingCompany.where(name: '37signals').firstand it will return a Firm object.Be aware that because the type column is an attribute on the record every new subclass will instantly be marked as dirty and the type column will be included in the list of changed attributes on the record. This is different from non Single Table Inheritance(STI) classes:Company.new.changed? # => false
Firm.new.changed?    # => true
Firm.new.changes     # => {"type"=>["","Firm"]}If you donât have a type column defined in your table, single-table inheritance wonât be triggered. In that case, itâll work just like normal subclasses with no special magic for differentiating between them or reloading the right type with find.Note, all the attributes for all the cases are kept in the same table. Read more:www.martinfowler.com/eaaCatalog/singleTableInheritance.htmlNamespaceMODULEActiveRecord::Inheritance::ClassMethodsMethodsIinitialize_dupInstance Public methodsinitialize_dup(other)LinkSource:show|on GitHub# File activerecord/lib/active_record/inheritance.rb, line 343definitialize_dup(other)superensure_proper_typeend