Stringinflections define new methods on theStringclass to transform names for different purposes. For instance, you can figure out the name of a table from the name of a class.'ScaleScore'.tableize # => "scale_scores"MethodsAacts_like_string?,atBblank?Ccamelcase,camelize,classify,constantizeDdasherize,deconstantize,demodulize,downcase_firstEexclude?Ffirst,foreign_key,fromHhtml_safe,humanizeIin_time_zone,indent,indent!,inquiry,is_utf8?LlastMmb_charsPparameterize,pluralizeRremove,remove!Ssafe_constantize,singularize,squish,squish!,strip_heredocTtableize,titlecase,titleize,to,to_date,to_datetime,to_time,truncate,truncate_bytes,truncate_wordsUunderscore,upcase_firstConstantsBLANK_RE=/\A[[:space:]]*\z/ENCODED_BLANKS=Concurrent::Map.new do |h, enc|
h[enc] = Regexp.new(BLANK_RE.source.encode(enc), BLANK_RE.options | Regexp::FIXEDENCODING)
endInstance Public methodsacts_like_string?()LinkEnables more predictable duck-typing on String-like classes. SeeObject#acts_like?.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/string/behavior.rb, line 5defacts_like_string?trueendat(position)LinkIf you pass a single integer, returns a substring of one character at that position. The first character of the string is at position 0, the next at position 1, and so on. If a range is supplied, a substring containing characters at offsets given by the range is returned. In both cases, if an offset is negative, it is counted from the end of the string. Returnsnilif the initial offset falls outside the string. Returns an empty string if the beginning of the range is greater than the end of the string.str = "hello"
str.at(0)      # => "h"
str.at(1..3)   # => "ell"
str.at(-2)     # => "l"
str.at(-2..-1) # => "lo"
str.at(5)      # => nil
str.at(5..-1)  # => ""If aRegexpis given, the matching portion of the string is returned. If aStringis given, that given string is returned if it occurs in the string. In both cases,nilis returned if there is no match.str = "hello"
str.at(/lo/) # => "lo"
str.at(/ol/) # => nil
str.at("lo") # => "lo"
str.at("ol") # => nilSource:show|on GitHub# File activesupport/lib/active_support/core_ext/string/access.rb, line 29defat(position)self[position]endblank?()LinkA string is blank if itâs empty or contains whitespaces only:''.blank?       # => true
'   '.blank?    # => true
"\t\n\r".blank? # => true
' blah '.blank? # => falseUnicode whitespace is supported:"\u00a0".blank? # => true@return [true, false]Source:show|on GitHub# File activesupport/lib/active_support/core_ext/object/blank.rb, line 153defblank?# The regexp that matches blank strings is expensive. For the case of empty# strings we can speed up this method (~3.5x) with an empty? call. The# penalty for the rest of strings is marginal.empty?||beginBLANK_RE.match?(self)rescueEncoding::CompatibilityErrorENCODED_BLANKS[self.encoding].match?(self)endendcamelcase(first_letter = :upper)LinkAlias for:camelizecamelize(first_letter = :upper)LinkBy default,camelizeconverts strings to UpperCamelCase. If the argument to camelize is set to:lowerthen camelize produces lowerCamelCase.camelizewill also convert â/â to â::â which is useful for converting paths to namespaces.'active_record'.camelize                # => "ActiveRecord"
'active_record'.camelize(:lower)        # => "activeRecord"
'active_record/errors'.camelize         # => "ActiveRecord::Errors"
'active_record/errors'.camelize(:lower) # => "activeRecord::Errors"SeeActiveSupport::Inflector.camelize.Also aliased as:camelcaseSource:show|on GitHub# File activesupport/lib/active_support/core_ext/string/inflections.rb, line 101defcamelize(first_letter=:upper)casefirst_letterwhen:upperActiveSupport::Inflector.camelize(self,true)when:lowerActiveSupport::Inflector.camelize(self,false)elseraiseArgumentError,"Invalid option, use either :upper or :lower."endendclassify()LinkCreates a class name from a plural table name like Rails does for table names to models. Note that this returns a string and not a class. (To convert to an actual class followclassifywithconstantize.)'ham_and_eggs'.classify # => "HamAndEgg"
'posts'.classify        # => "Post"SeeActiveSupport::Inflector.classify.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/string/inflections.rb, line 239defclassifyActiveSupport::Inflector.classify(self)endconstantize()Linkconstantizetries to find a declared constant with the name specified in the string. It raises aNameErrorwhen the name is not in CamelCase or is not initialized.'Module'.constantize  # => Module
'Class'.constantize   # => Class
'blargle'.constantize # => NameError: wrong constant name blargleSeeActiveSupport::Inflector.constantize.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/string/inflections.rb, line 73defconstantizeActiveSupport::Inflector.constantize(self)enddasherize()LinkReplaces underscores with dashes in the string.'puni_puni'.dasherize # => "puni-puni"SeeActiveSupport::Inflector.dasherize.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/string/inflections.rb, line 148defdasherizeActiveSupport::Inflector.dasherize(self)enddeconstantize()LinkRemoves the rightmost segment from the constant expression in the string.'Net::HTTP'.deconstantize   # => "Net"
'::Net::HTTP'.deconstantize # => "::Net"
'String'.deconstantize      # => ""
'::String'.deconstantize    # => ""
''.deconstantize            # => ""SeeActiveSupport::Inflector.deconstantize.See alsodemodulize.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/string/inflections.rb, line 177defdeconstantizeActiveSupport::Inflector.deconstantize(self)enddemodulize()LinkRemoves the module part from the constant expression in the string.'ActiveSupport::Inflector::Inflections'.demodulize # => "Inflections"
'Inflections'.demodulize                           # => "Inflections"
'::Inflections'.demodulize                         # => "Inflections"
''.demodulize                                      # => ''SeeActiveSupport::Inflector.demodulize.See alsodeconstantize.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/string/inflections.rb, line 162defdemodulizeActiveSupport::Inflector.demodulize(self)enddowncase_first()LinkConverts the first character to lowercase.'If they enjoyed The Matrix'.downcase_first # => "if they enjoyed The Matrix"
'I'.downcase_first                          # => "i"
''.downcase_first                           # => ""SeeActiveSupport::Inflector.downcase_first.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/string/inflections.rb, line 284defdowncase_firstActiveSupport::Inflector.downcase_first(self)endexclude?(string)LinkThe inverse ofString#include?. Returns true if the string does not include the other string."hello".exclude? "lo" # => false
"hello".exclude? "ol" # => true
"hello".exclude? ?h   # => falseSource:show|on GitHub# File activesupport/lib/active_support/core_ext/string/exclude.rb, line 10defexclude?(string)!include?(string)endfirst(limit = 1)LinkReturns the first character. If a limit is supplied, returns a substring from the beginning of the string until it reaches the limit value. If the given limit is greater than or equal to the string length, returns a copy of self.str = "hello"
str.first    # => "h"
str.first(1) # => "h"
str.first(2) # => "he"
str.first(0) # => ""
str.first(6) # => "hello"Source:show|on GitHub# File activesupport/lib/active_support/core_ext/string/access.rb, line 78deffirst(limit=1)self[0,limit]||raise(ArgumentError,"negative limit")endforeign_key(separate_class_name_and_id_with_underscore = true)LinkCreates a foreign key name from a class name.separate_class_name_and_id_with_underscoresets whether the method should put â_â between the name and âidâ.'Message'.foreign_key        # => "message_id"
'Message'.foreign_key(false) # => "messageid"
'Admin::Post'.foreign_key    # => "post_id"SeeActiveSupport::Inflector.foreign_key.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/string/inflections.rb, line 297defforeign_key(separate_class_name_and_id_with_underscore=true)ActiveSupport::Inflector.foreign_key(self,separate_class_name_and_id_with_underscore)endfrom(position)LinkReturns a substring from the given position to the end of the string. If the position is negative, it is counted from the end of the string.str = "hello"
str.from(0)  # => "hello"
str.from(3)  # => "lo"
str.from(-2) # => "lo"You can mix it withtomethod and do fun things like:str = "hello"
str.from(0).to(-1) # => "hello"
str.from(1).to(-2) # => "ell"Source:show|on GitHub# File activesupport/lib/active_support/core_ext/string/access.rb, line 46deffrom(position)self[position,length]endhtml_safe()LinkMarks a string as trusted safe. It will be inserted into HTML with no additional escaping performed. It is your responsibility to ensure that the string contains no malicious content. This method is equivalent to therawhelper in views. It is recommended that you usesanitizeinstead of this method. It should never be called on user input.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/string/output_safety.rb, line 225defhtml_safeActiveSupport::SafeBuffer.new(self)endhumanize(capitalize: true, keep_id_suffix: false)LinkCapitalizes the first word, turns underscores into spaces, and (by default) strips a trailing â_idâ if present. Liketitleize, this is meant for creating pretty output.The capitalization of the first word can be turned off by setting the optional parametercapitalizeto false. By default, this parameter is true.The trailing â_idâ can be kept and capitalized by setting the optional parameterkeep_id_suffixto true. By default, this parameter is false.'employee_salary'.humanize                    # => "Employee salary"
'author_id'.humanize                          # => "Author"
'author_id'.humanize(capitalize: false)       # => "author"
'_id'.humanize                                # => "Id"
'author_id'.humanize(keep_id_suffix: true)    # => "Author id"SeeActiveSupport::Inflector.humanize.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/string/inflections.rb, line 262defhumanize(capitalize:true,keep_id_suffix:false)ActiveSupport::Inflector.humanize(self,capitalize:capitalize,keep_id_suffix:keep_id_suffix)endin_time_zone(zone = ::Time.zone)LinkConvertsStringto a TimeWithZone in the current zone ifTime.zoneorTime.zone_defaultis set, otherwise convertsStringto aTimeviaString#to_timeSource:show|on GitHub# File activesupport/lib/active_support/core_ext/string/zones.rb, line 9defin_time_zone(zone=::Time.zone)ifzone::Time.find_zone!(zone).parse(self)elseto_timeendendindent(amount, indent_string = nil, indent_empty_lines = false)LinkIndents the lines in the receiver:<<EOS.indent(2)
def some_method
  some_code
end
EOS
# =>
  def some_method
    some_code
  endThe second argument,indent_string, specifies which indent string to use. The default isnil, which tells the method to make a guess by peeking at the first indented line, and fall back to a space if there is none."  foo".indent(2)        # => "    foo"
"foo\n\t\tbar".indent(2) # => "\t\tfoo\n\t\t\t\tbar"
"foo".indent(2, "\t")    # => "\t\tfoo"Whileindent_stringis typically one space or tab, it may be any string.The third argument,indent_empty_lines, is a flag that says whether empty lines should be indented. Default is false."foo\n\nbar".indent(2)            # => "  foo\n\n  bar"
"foo\n\nbar".indent(2, nil, true) # => "  foo\n  \n  bar"Source:show|on GitHub# File activesupport/lib/active_support/core_ext/string/indent.rb, line 42defindent(amount,indent_string=nil,indent_empty_lines=false)dup.tap{|_|_.indent!(amount,indent_string,indent_empty_lines) }endindent!(amount, indent_string = nil, indent_empty_lines = false)LinkSame asindent, except it indents the receiver in-place.Returns the indented string, ornilif there was nothing to indent.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/string/indent.rb, line 7defindent!(amount,indent_string=nil,indent_empty_lines=false)indent_string=indent_string||self[/^[ \t]/]||" "re=indent_empty_lines?/^/:/^(?!$)/gsub!(re,indent_string*amount)endinquiry()LinkWraps the current string in theActiveSupport::StringInquirerclass, which gives you a prettier way to test for equality.env = 'production'.inquiry
env.production?  # => true
env.development? # => falseSource:show|on GitHub# File activesupport/lib/active_support/core_ext/string/inquiry.rb, line 13definquiryActiveSupport::StringInquirer.new(self)endis_utf8?()LinkReturnstrueif string has utf_8 encoding.utf_8_str = "some string".encode "UTF-8"
iso_str = "some string".encode "ISO-8859-1"

utf_8_str.is_utf8? # => true
iso_str.is_utf8?   # => falseSource:show|on GitHub# File activesupport/lib/active_support/core_ext/string/multibyte.rb, line 48defis_utf8?caseencodingwhenEncoding::UTF_8,Encoding::US_ASCIIvalid_encoding?whenEncoding::ASCII_8BITdup.force_encoding(Encoding::UTF_8).valid_encoding?elsefalseendendlast(limit = 1)LinkReturns the last character of the string. If a limit is supplied, returns a substring from the end of the string until it reaches the limit value (counting backwards). If the given limit is greater than or equal to the string length, returns a copy of self.str = "hello"
str.last    # => "o"
str.last(1) # => "o"
str.last(2) # => "lo"
str.last(0) # => ""
str.last(6) # => "hello"Source:show|on GitHub# File activesupport/lib/active_support/core_ext/string/access.rb, line 92deflast(limit=1)self[[length-limit,0].max,limit]||raise(ArgumentError,"negative limit")endmb_chars()LinkMultibyte proxymb_charsis a multibyte safe proxy for string methods.It creates and returns an instance of theActiveSupport::Multibyte::Charsclass which encapsulates the original string. A Unicode safe version of all theStringmethods are defined on this proxy class. If the proxy class doesnât respond to a certain method, itâs forwarded to the encapsulated string.>> "Ç".mb_chars.upcase.to_s
=> "Ç"NOTE: Ruby 2.4 and later support native Unicode case mappings:>> "Ç".upcase
=> "Ç"MethodchainingAll the methods on the Chars proxy which normally return a string will return a Chars object. This allows method chaining on the result of any of these methods.name.mb_chars.reverse.length # => 12Interoperability and configurationThe Chars object tries to be as interchangeable withStringobjects as possible: sorting and comparing betweenStringand Char work like expected. The bang! methods change the internal string representation in the Chars object. Interoperability problems can be resolved easily with ato_scall.For more information about the methods defined on the Chars proxy seeActiveSupport::Multibyte::Chars. For information about how to change the default Multibyte behavior seeActiveSupport::Multibyte.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/string/multibyte.rb, line 37defmb_charsActiveSupport::Multibyte.proxy_class.new(self)endparameterize(separator: "-", preserve_case: false, locale: nil)LinkReplaces special characters in a string so that it may be used as part of a âprettyâ URL.If the optional parameterlocaleis specified, the word will be parameterized as a word of that language. By default, this parameter is set toniland it will use the configuredI18n.locale.class Person
  def to_param
    "#{id}-#{name.parameterize}"
  end
end

@person = Person.find(1)
# => #<Person id: 1, name: "Donald E. Knuth">

<%= link_to(@person.name, person_path) %>
# => <a href="/person/1-donald-e-knuth">Donald E. Knuth</a>To preserve the case of the characters in a string, use thepreserve_caseargument.class Person
  def to_param
    "#{id}-#{name.parameterize(preserve_case: true)}"
  end
end

@person = Person.find(1)
# => #<Person id: 1, name: "Donald E. Knuth">

<%= link_to(@person.name, person_path) %>
# => <a href="/person/1-Donald-E-Knuth">Donald E. Knuth</a>SeeActiveSupport::Inflector.parameterize.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/string/inflections.rb, line 215defparameterize(separator:"-",preserve_case:false,locale:nil)ActiveSupport::Inflector.parameterize(self,separator:separator,preserve_case:preserve_case,locale:locale)endpluralize(count = nil, locale = :en)LinkReturns the plural form of the word in the string.If the optional parametercountis specified, the singular form will be returned ifcount == 1. For any other value ofcountthe plural will be returned.If the optional parameterlocaleis specified, the word will be pluralized as a word of that language. By default, this parameter is set to:en. You must define your own inflection rules for languages other than English.'post'.pluralize             # => "posts"
'octopus'.pluralize          # => "octopi"
'sheep'.pluralize            # => "sheep"
'words'.pluralize            # => "words"
'the blue mailman'.pluralize # => "the blue mailmen"
'CamelOctopus'.pluralize     # => "CamelOctopi"
'apple'.pluralize(1)         # => "apple"
'apple'.pluralize(2)         # => "apples"
'ley'.pluralize(:es)         # => "leyes"
'ley'.pluralize(1, :es)      # => "ley"SeeActiveSupport::Inflector.pluralize.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/string/inflections.rb, line 35defpluralize(count=nil,locale=:en)locale=countifcount.is_a?(Symbol)ifcount==1dupelseActiveSupport::Inflector.pluralize(self,locale)endendremove(*patterns)LinkReturns a new string with all occurrences of the patterns removed.str = "foo bar test"
str.remove(" test")                 # => "foo bar"
str.remove(" test", /bar/)          # => "foo "
str                                 # => "foo bar test"Source:show|on GitHub# File activesupport/lib/active_support/core_ext/string/filters.rb, line 32defremove(*patterns)dup.remove!(*patterns)endremove!(*patterns)LinkAlters the string by removing all occurrences of the patterns.str = "foo bar test"
str.remove!(" test", /bar/)         # => "foo "
str                                 # => "foo "Source:show|on GitHub# File activesupport/lib/active_support/core_ext/string/filters.rb, line 40defremove!(*patterns)patterns.eachdo|pattern|gsub!pattern,""endselfendsafe_constantize()Linksafe_constantizetries to find a declared constant with the name specified in the string. It returnsnilwhen the name is not in CamelCase or is not initialized.'Module'.safe_constantize  # => Module
'Class'.safe_constantize   # => Class
'blargle'.safe_constantize # => nilSeeActiveSupport::Inflector.safe_constantize.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/string/inflections.rb, line 86defsafe_constantizeActiveSupport::Inflector.safe_constantize(self)endsingularize(locale = :en)LinkThe reverse ofpluralize, returns the singular form of a word in a string.If the optional parameterlocaleis specified, the word will be singularized as a word of that language. By default, this parameter is set to:en. You must define your own inflection rules for languages other than English.'posts'.singularize            # => "post"
'octopi'.singularize           # => "octopus"
'sheep'.singularize            # => "sheep"
'word'.singularize             # => "word"
'the blue mailmen'.singularize # => "the blue mailman"
'CamelOctopi'.singularize      # => "CamelOctopus"
'leyes'.singularize(:es)       # => "ley"SeeActiveSupport::Inflector.singularize.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/string/inflections.rb, line 60defsingularize(locale=:en)ActiveSupport::Inflector.singularize(self,locale)endsquish()LinkReturns the string, first removing all whitespace on both ends of the string, and then changing remaining consecutive whitespace groups into one space each.Note that it handles both ASCII and Unicode whitespace.%{ Multi-line
   string }.squish                   # => "Multi-line string"
" foo   bar    \n   \t   boo".squish # => "foo bar boo"Source:show|on GitHub# File activesupport/lib/active_support/core_ext/string/filters.rb, line 13defsquishdup.squish!endsquish!()LinkPerforms a destructive squish. SeeString#squish.str = " foo   bar    \n   \t   boo"
str.squish!                         # => "foo bar boo"
str                                 # => "foo bar boo"Source:show|on GitHub# File activesupport/lib/active_support/core_ext/string/filters.rb, line 21defsquish!gsub!(/[[:space:]]+/," ")strip!selfendstrip_heredoc()LinkStrips indentation in heredocs.For example inif options[:usage]
  puts <<-USAGE.strip_heredoc
    This command does such and such.

    Supported options are:
      -h         This message
      ...
  USAGE
endthe user would see the usage message aligned against the left margin.Technically, it looks for the least indented non-empty line in the whole string, and removes that amount of leading whitespace.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/string/strip.rb, line 22defstrip_heredocgsub(/^#{scan(/^[ \t]*(?=\S)/).min}/,"").tapdo|stripped|stripped.freezeiffrozen?endendtableize()LinkCreates the name of a table like Rails does for models to table names. This method uses thepluralizemethod on the last word in the string.'RawScaledScorer'.tableize # => "raw_scaled_scorers"
'ham_and_egg'.tableize     # => "ham_and_eggs"
'fancyCategory'.tableize   # => "fancy_categories"SeeActiveSupport::Inflector.tableize.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/string/inflections.rb, line 227deftableizeActiveSupport::Inflector.tableize(self)endtitlecase(keep_id_suffix: false)LinkAlias for:titleizetitleize(keep_id_suffix: false)LinkCapitalizes all the words and replaces some characters in the string to create a nicer looking title.titleizeis meant for creating pretty output. It is not used in the Rails internals.The trailing â_idâ,âIdâ.. can be kept and capitalized by setting the optional parameterkeep_id_suffixto true. By default, this parameter is false.'man from the boondocks'.titleize                       # => "Man From The Boondocks"
'x-men: the last stand'.titleize                        # => "X Men: The Last Stand"
'string_ending_with_id'.titleize(keep_id_suffix: true)  # => "String Ending With Id"SeeActiveSupport::Inflector.titleize.Also aliased as:titlecaseSource:show|on GitHub# File activesupport/lib/active_support/core_ext/string/inflections.rb, line 126deftitleize(keep_id_suffix:false)ActiveSupport::Inflector.titleize(self,keep_id_suffix:keep_id_suffix)endto(position)LinkReturns a substring from the beginning of the string to the given position. If the position is negative, it is counted from the end of the string.str = "hello"
str.to(0)  # => "h"
str.to(3)  # => "hell"
str.to(-2) # => "hell"You can mix it withfrommethod and do fun things like:str = "hello"
str.from(0).to(-1) # => "hello"
str.from(1).to(-2) # => "ell"Source:show|on GitHub# File activesupport/lib/active_support/core_ext/string/access.rb, line 63defto(position)position+=sizeifposition<0self[0,position+1]||+""endto_date()LinkConverts a string to aDatevalue."1-1-2012".to_date   # => Sun, 01 Jan 2012
"01/01/2012".to_date # => Sun, 01 Jan 2012
"2012-12-13".to_date # => Thu, 13 Dec 2012
"12/13/2012".to_date # => ArgumentError: invalid dateSource:show|on GitHub# File activesupport/lib/active_support/core_ext/string/conversions.rb, line 47defto_date::Date.parse(self,false)unlessblank?endto_datetime()LinkConverts a string to aDateTimevalue."1-1-2012".to_datetime            # => Sun, 01 Jan 2012 00:00:00 +0000
"01/01/2012 23:59:59".to_datetime # => Sun, 01 Jan 2012 23:59:59 +0000
"2012-12-13 12:50".to_datetime    # => Thu, 13 Dec 2012 12:50:00 +0000
"12/13/2012".to_datetime          # => ArgumentError: invalid dateSource:show|on GitHub# File activesupport/lib/active_support/core_ext/string/conversions.rb, line 57defto_datetime::DateTime.parse(self,false)unlessblank?endto_time(form = :local)LinkConverts a string to aTimevalue. Theformcan be either:utcor:local(default:local).The time is parsed using Time.parse method. Ifformis:local, then the time is in the system timezone. If the date part is missing then the current date is used and if the time part is missing then it is assumed to be 00:00:00."13-12-2012".to_time               # => 2012-12-13 00:00:00 +0100
"06:12".to_time                    # => 2012-12-13 06:12:00 +0100
"2012-12-13 06:12".to_time         # => 2012-12-13 06:12:00 +0100
"2012-12-13T06:12".to_time         # => 2012-12-13 06:12:00 +0100
"2012-12-13T06:12".to_time(:utc)   # => 2012-12-13 06:12:00 UTC
"12/13/2012".to_time               # => ArgumentError: argument out of range
"1604326192".to_time               # => ArgumentError: argument out of rangeSource:show|on GitHub# File activesupport/lib/active_support/core_ext/string/conversions.rb, line 22defto_time(form=:local)parts=Date._parse(self,false)used_keys=%i(year mon mday hour min sec sec_fraction offset)returnif!parts.keys.intersect?(used_keys)now=Time.nowtime=Time.new(parts.fetch(:year,now.year),parts.fetch(:mon,now.month),parts.fetch(:mday,now.day),parts.fetch(:hour,0),parts.fetch(:min,0),parts.fetch(:sec,0)+parts.fetch(:sec_fraction,0),parts.fetch(:offset,form==:utc?0:nil)
  )form==:utc?time.utc:time.to_timeendtruncate(truncate_to, options = {})LinkTruncates a giventextto lengthtruncate_toiftextis longer thantruncate_to:'Once upon a time in a world far far away'.truncate(27)
# => "Once upon a time in a wo..."Pass a string or regexp:separatorto truncatetextat a natural break:'Once upon a time in a world far far away'.truncate(27, separator: ' ')
# => "Once upon a time in a..."

'Once upon a time in a world far far away'.truncate(27, separator: /\s/)
# => "Once upon a time in a..."The last characters will be replaced with the:omissionstring (defaults to ââ¦â). The total length will not exceedtruncate_tounless bothtextand:omissionare longer thantruncate_to:'And they found that many people were sleeping better.'.truncate(25, omission: '... (continued)')
# => "And they f... (continued)"

'And they found that many people were sleeping better.'.truncate(4, omission: '... (continued)')
# => "... (continued)"Source:show|on GitHub# File activesupport/lib/active_support/core_ext/string/filters.rb, line 70deftruncate(truncate_to,options= {})returndupunlesslength>truncate_toomission=options[:omission]||"..."length_with_room_for_omission=truncate_to-omission.lengthstop= \ifoptions[:separator]rindex(options[:separator],length_with_room_for_omission)||length_with_room_for_omissionelselength_with_room_for_omissionend+"#{self[0, stop]}#{omission}"endtruncate_bytes(truncate_to, omission: "â¦")LinkTruncatestextto at mosttruncate_tobytes in length without breaking string encoding by splitting multibyte characters or breaking grapheme clusters (âperceptual charactersâ) by truncating at combining characters.>> "ðªðªðªðªðªðªðªðªðªðªðªðªðªðªðªðªðªðªðªðª".size
=> 20
>> "ðªðªðªðªðªðªðªðªðªðªðªðªðªðªðªðªðªðªðªðª".bytesize
=> 80
>> "ðªðªðªðªðªðªðªðªðªðªðªðªðªðªðªðªðªðªðªðª".truncate_bytes(20)
=> "ðªðªðªðªâ¦"The truncated text ends with the:omissionstring, defaulting to ââ¦â, for a total length not exceedingtruncate_to.RaisesArgumentErrorwhen the bytesize of:omissionexceedstruncate_to.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/string/filters.rb, line 101deftruncate_bytes(truncate_to,omission:"â¦")omission||=""casewhenbytesize<=truncate_todupwhenomission.bytesize>truncate_toraiseArgumentError,"Omission #{omission.inspect} is #{omission.bytesize}, larger than the truncation length of #{truncate_to} bytes"whenomission.bytesize==truncate_toomission.dupelseself.class.new.force_encoding(encoding).tapdo|cut|cut_at=truncate_to-omission.bytesizeeach_grapheme_clusterdo|grapheme|ifcut.bytesize+grapheme.bytesize<=cut_atcut<<graphemeelsebreakendendcut<<omissionendendendtruncate_words(words_count, options = {})LinkTruncates a giventextafter a given number of words (words_count):'Once upon a time in a world far far away'.truncate_words(4)
# => "Once upon a time..."Pass a string or regexp:separatorto specify a different separator of words:'Once<br>upon<br>a<br>time<br>in<br>a<br>world'.truncate_words(5, separator: '<br>')
# => "Once<br>upon<br>a<br>time<br>in..."The last characters will be replaced with the:omissionstring (defaults to ââ¦â):'And they found that many people were sleeping better.'.truncate_words(5, omission: '... (continued)')
# => "And they found that many... (continued)"Source:show|on GitHub# File activesupport/lib/active_support/core_ext/string/filters.rb, line 142deftruncate_words(words_count,options= {})sep=options[:separator]||/\s+/sep=Regexp.escape(sep.to_s)unlessRegexp===sepifself=~/\A((?>.+?#{sep}){#{words_count - 1}}.+?)#{sep}.*/m$1+(options[:omission]||"...")elsedupendendunderscore()LinkThe reverse ofcamelize. Makes an underscored, lowercase form from the expression in the string.underscorewill also change â::â to â/â to convert namespaces to paths.'ActiveModel'.underscore         # => "active_model"
'ActiveModel::Errors'.underscore # => "active_model/errors"SeeActiveSupport::Inflector.underscore.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/string/inflections.rb, line 139defunderscoreActiveSupport::Inflector.underscore(self)endupcase_first()LinkConverts the first character to uppercase.'what a Lovely Day'.upcase_first # => "What a Lovely Day"
'w'.upcase_first                 # => "W"
''.upcase_first                  # => ""SeeActiveSupport::Inflector.upcase_first.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/string/inflections.rb, line 273defupcase_firstActiveSupport::Inflector.upcase_first(self)end