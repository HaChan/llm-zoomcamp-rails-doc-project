Action DispatchRoutingPolymorphicRoutesPolymorphic URL helpers are methods for smart resolution to a named route call when given an Active Record model instance. They are to be used in combination with ActionController::Resources.These methods are useful when you want to generate the correct URL or path to a RESTful resource without having to know the exact type of the record in question.Nested resources and/or namespaces are also supported, as illustrated in the example:polymorphic_url([:admin, @article, @comment])results in:admin_article_comment_url(@article, @comment)Usage within the frameworkPolymorphic URL helpers are used in a number of places throughout theRailsframework:url_for, so you can use it with a record as the argument, e.g.url_for(@article);ActionView::Helpers::FormHelperusespolymorphic_path, so you can writeform_for(@article)without having to specify:urlparameter for the form action;redirect_to(which, in fact, usesurl_for) so you can writeredirect_to(post)in your controllers;ActionView::Helpers::AtomFeedHelper, so you donât have to explicitly specify URLs for feed entries.Prefixed polymorphic helpersIn addition topolymorphic_urlandpolymorphic_pathmethods, a number of prefixed helpers are available as a shorthand toaction: "..."in options. Those are:edit_polymorphic_url,edit_polymorphic_pathnew_polymorphic_url,new_polymorphic_pathExample usage:edit_polymorphic_path(@post)           # => "/posts/1/edit"
polymorphic_path(@post, format: :pdf)  # => "/posts/1.pdf"Usage with mounted enginesIf you are using a mounted engine and you need to use apolymorphic_urlpointing at the engineâs routes, pass in the engineâs route proxy as the first argument to the method. For example:polymorphic_url([blog, @post])  # calls blog.post_path(@post)
form_for([blog, @post])         # => "/blog/posts/1"MethodsPpolymorphic_path,polymorphic_urlInstance Public methodspolymorphic_path(record_or_hash_or_array, options = {})LinkReturns the path component of a URL for the given record.Source:show|on GitHub# File actionpack/lib/action_dispatch/routing/polymorphic_routes.rb, line 133defpolymorphic_path(record_or_hash_or_array,options= {})ifHash===record_or_hash_or_arrayoptions=record_or_hash_or_array.merge(options)record=options.delete:idreturnpolymorphic_pathrecord,optionsendifmapping=polymorphic_mapping(record_or_hash_or_array)returnmapping.call(self, [record_or_hash_or_array,options],true)endopts=options.dupaction=opts.delete:actiontype=:pathHelperMethodBuilder.polymorphic_methodself,record_or_hash_or_array,action,type,optsendpolymorphic_url(record_or_hash_or_array, options = {})LinkConstructs a call to a named RESTful route for the given record and returns the resulting URL string. For example:# calls post_url(post)
polymorphic_url(post) # => "http://example.com/posts/1"
polymorphic_url([blog, post]) # => "http://example.com/blogs/1/posts/1"
polymorphic_url([:admin, blog, post]) # => "http://example.com/admin/blogs/1/posts/1"
polymorphic_url([user, :blog, post]) # => "http://example.com/users/1/blog/posts/1"
polymorphic_url(Comment) # => "http://example.com/comments"Options:action- Specifies the action prefix for the named route::newor:edit. Default is no prefix.:routing_type- Allowed values are:pathor:url. Default is:url.Also includes all the options fromurl_for. These include such things as:anchoror:trailing_slash. Example usage is given below:polymorphic_url([blog, post], anchor: 'my_anchor')
  # => "http://example.com/blogs/1/posts/1#my_anchor"
polymorphic_url([blog, post], anchor: 'my_anchor', script_name: "/my_app")
  # => "http://example.com/my_app/blogs/1/posts/1#my_anchor"For all of these options, see the documentation forurl_for.Functionality# an Article record
polymorphic_url(record)  # same as article_url(record)

# a Comment record
polymorphic_url(record)  # same as comment_url(record)

# it recognizes new records and maps to the collection
record = Comment.new
polymorphic_url(record)  # same as comments_url()

# the class of a record will also map to the collection
polymorphic_url(Comment) # same as comments_url()Source:show|on GitHub# File actionpack/lib/action_dispatch/routing/polymorphic_routes.rb, line 110defpolymorphic_url(record_or_hash_or_array,options= {})ifHash===record_or_hash_or_arrayoptions=record_or_hash_or_array.merge(options)record=options.delete:idreturnpolymorphic_urlrecord,optionsendifmapping=polymorphic_mapping(record_or_hash_or_array)returnmapping.call(self, [record_or_hash_or_array,options],false)endopts=options.dupaction=opts.delete:actiontype=opts.delete(:routing_type)||:urlHelperMethodBuilder.polymorphic_methodself,record_or_hash_or_array,action,type,optsend