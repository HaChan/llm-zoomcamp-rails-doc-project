MethodsRredirectInstance Public methodsredirect(*args, &block)LinkRedirect any path to another path:get "/stories" => redirect("/posts")This will redirect the user, while ignoring certain parts of the request, including query string, etc./stories,/stories?foo=bar, etc all redirect to/posts.The redirect will use a301 Moved Permanentlystatus code by default. This can be overridden with the:statusoption:get "/stories" => redirect("/posts", status: 307)You can also use interpolation in the supplied redirect argument:get 'docs/:article', to: redirect('/wiki/%{article}')Note that if you return a path without a leading slash then the URL is prefixed with the current SCRIPT_NAME environment variable. This is typically â/â but may be different in a mounted engine or where the application is deployed to a subdirectory of a website.Alternatively you can use one of the other syntaxes:The block version of redirect allows for the easy encapsulation of any logic associated with the redirect in question. Either the params and request are supplied as arguments, or just params, depending of how many arguments your block accepts. A string is required as a return value.get 'jokes/:number', to: redirect { |params, request|
  path = (params[:number].to_i.even? ? "wheres-the-beef" : "i-love-lamp")
  "http://#{request.host_with_port}/#{path}"
}Note that thedo endsyntax for the redirect block wouldnât work, as Ruby would pass the block togetinstead ofredirect. Use{ ... }instead.The options version of redirect allows you to supply only the parts of the URL which need to change, it also supports interpolation of the path similar to the first example.get 'stores/:name',       to: redirect(subdomain: 'stores', path: '/%{name}')
get 'stores/:name(*all)', to: redirect(subdomain: 'stores', path: '/%{name}%{all}')
get '/stories', to: redirect(path: '/posts')This will redirect the user, while changing only the specified parts of the request, for example thepathoption in the last example./stories,/stories?foo=bar, redirect to/postsand/posts?foo=barrespectively.Finally, an object which responds to call can be supplied to redirect, allowing you to reuse common redirect routes. The call method must accept two arguments, params and request, and return a string.get 'accounts/:name' => redirect(SubdomainRedirector.new('api'))Source:show|on GitHub# File actionpack/lib/action_dispatch/routing/redirection.rb, line 204defredirect(*args,&block)options=args.extract_options!status=options.delete(:status)||301path=args.shiftreturnOptionRedirect.new(status,options)ifoptions.any?returnPathRedirect.new(status,path)ifString===pathblock=pathifpath.respond_to?:callraiseArgumentError,"redirection argument not supported"unlessblockRedirect.newstatus,blockend