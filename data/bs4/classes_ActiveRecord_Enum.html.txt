Declare an enum attribute where the values map to integers in the database, but can be queried by name. Example:class Conversation < ActiveRecord::Base
  enum :status, [ :active, :archived ]
end

# conversation.update! status: 0
conversation.active!
conversation.active? # => true
conversation.status  # => "active"

# conversation.update! status: 1
conversation.archived!
conversation.archived? # => true
conversation.status    # => "archived"

# conversation.status = 1
conversation.status = "archived"

conversation.status = nil
conversation.status.nil? # => true
conversation.status      # => nilScopes based on the allowed values of the enum field will be provided as well. With the above example:Conversation.active
Conversation.not_active
Conversation.archived
Conversation.not_archivedOf course, you can also query them directly if the scopes donât fit your needs:Conversation.where(status: [:active, :archived])
Conversation.where.not(status: :active)Defining scopes can be disabled by setting:scopestofalse.class Conversation < ActiveRecord::Base
  enum :status, [ :active, :archived ], scopes: false
endYou can set the default enum value by setting:default, like:class Conversation < ActiveRecord::Base
  enum :status, [ :active, :archived ], default: :active
end

conversation = Conversation.new
conversation.status # => "active"Itâs possible to explicitly map the relation between attribute and database integer with a hash:class Conversation < ActiveRecord::Base
  enum :status, active: 0, archived: 1
endFinally itâs also possible to use a string column to persist the enumerated value. Note that this will likely lead to slower database queries:class Conversation < ActiveRecord::Base
  enum :status, active: "active", archived: "archived"
endNote that when an array is used, the implicit mapping from the values to database integers is derived from the order the values appear in the array. In the example,:activeis mapped to0as itâs the first element, and:archivedis mapped to1. In general, thei-th element is mapped toi-1in the database.Therefore, once a value is added to the enum array, its position in the array must be maintained, and new values should only be added to the end of the array. To remove unused values, the explicit hash syntax should be used.In rare circumstances you might need to access the mapping directly. The mappings are exposed through a class method with the pluralized attribute name, which return the mapping in aActiveSupport::HashWithIndifferentAccess:Conversation.statuses[:active]    # => 0
Conversation.statuses["archived"] # => 1Use that class method when you need to know the ordinal value of an enum. For example, you can use that when manually building SQL strings:Conversation.where("status <> ?", Conversation.statuses[:archived])You can use the:prefixor:suffixoptions when you need to define multiple enums with same values. If the passed value istrue, the methods are prefixed/suffixed with the name of the enum. It is also possible to supply a custom value:class Conversation < ActiveRecord::Base
  enum :status, [ :active, :archived ], suffix: true
  enum :comments_status, [ :active, :inactive ], prefix: :comments
endWith the above example, the bang and predicate methods along with the associated scopes are now prefixed and/or suffixed accordingly:conversation.active_status!
conversation.archived_status? # => false

conversation.comments_inactive!
conversation.comments_active? # => falseIf you want to disable the auto-generated methods on the model, you can do so by setting the:instance_methodsoption to false:class Conversation < ActiveRecord::Base
  enum :status, [ :active, :archived ], instance_methods: false
endIf you want the enum value to be validated before saving, use the option:validate:class Conversation < ActiveRecord::Base
  enum :status, [ :active, :archived ], validate: true
end

conversation = Conversation.new

conversation.status = :unknown
conversation.valid? # => false

conversation.status = nil
conversation.valid? # => false

conversation.status = :active
conversation.valid? # => trueIt is also possible to pass additional validation options:class Conversation < ActiveRecord::Base
  enum :status, [ :active, :archived ], validate: { allow_nil: true }
end

conversation = Conversation.new

conversation.status = :unknown
conversation.valid? # => false

conversation.status = nil
conversation.valid? # => true

conversation.status = :active
conversation.valid? # => trueOtherwiseArgumentErrorwill raise:class Conversation < ActiveRecord::Base
  enum :status, [ :active, :archived ]
end

conversation = Conversation.new

conversation.status = :unknown # 'unknown' is not a valid status (ArgumentError)MethodsEenumInstance Public methodsenum(name = nil, values = nil, **options)LinkSource:show|on GitHub# File activerecord/lib/active_record/enum.rb, line 225defenum(name=nil,values=nil,**options)ifnamevalues,options=options, {}unlessvaluesreturn_enum(name,values,**options)enddefinitions=options.slice!(:_prefix,:_suffix,:_scopes,:_default,:_instance_methods)options.transform_keys!{|key|:"#{key[1..-1]}"}definitions.each{|name,values|_enum(name,values,**options) }ActiveRecord.deprecator.warn(<<~MSG)Defining enums with keyword arguments is deprecated and will be removed
        in Rails 8.0. Positional arguments should be used instead:

        #{definitions.map { |name, values| "enum :#{name}, #{values}" }.join("\n")}MSGend