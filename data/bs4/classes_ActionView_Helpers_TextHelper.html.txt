Action View Text HelpersTheTextHelpermodule provides a set of methods for filtering, formatting and transforming strings, which can reduce the amount of inline Ruby code in your views. These helper methods extend Action View making them callable within your template files.SanitizationMost text helpers that generate HTML output sanitize the given input by default, but do not escape it. This means HTML tags will appear in the page but all malicious code will be removed. Letâs look at some examples using thesimple_formatmethod:simple_format('<a href="http://example.com/">Example</a>')
# => "<p><a href=\"http://example.com/\">Example</a></p>"

simple_format('<a href="javascript:alert(\'no!\')">Example</a>')
# => "<p><a>Example</a></p>"If you want to escape all content, you should invoke thehmethod before calling the text helper.simple_format h('<a href="http://example.com/">Example</a>')
# => "<p>&lt;a href=\"http://example.com/\"&gt;Example&lt;/a&gt;</p>"MethodsCconcat,current_cycle,cycleEexcerptHhighlightPpluralizeRreset_cycleSsafe_concat,simple_formatTtruncateWword_wrapIncluded ModulesActionView::Helpers::SanitizeHelperActionView::Helpers::TagHelperActionView::Helpers::OutputSafetyHelperInstance Public methodsconcat(string)LinkThe preferred method of outputting text in your views is to use the<%= "text" %>eRuby syntax. The regularputsandprintmethods do not operate as expected in an eRuby code block. If you absolutely must output text within a non-output code block (i.e.,<% %>), you can use theconcatmethod.<% concat "hello" %> is equivalent to <%= "hello" %>

<%
   unless signed_in?
     concat link_to("Sign In", action: :sign_in)
   end
%>

is equivalent to

<% unless signed_in? %>
  <%= link_to "Sign In", action: :sign_in %>
<% end %>Source:show|on GitHub# File actionview/lib/action_view/helpers/text_helper.rb, line 63defconcat(string)output_buffer<<stringendcurrent_cycle(name = "default")LinkReturns the current cycle string after a cycle has been started. Useful for complex table highlighting or any other design need which requires the current cycle string in more than one place.<%# Alternate background colors %>
<% @items = [1,2,3,4] %>
<% @items.each do |item| %>
  <div style="background-color:<%= cycle("red","white","blue") %>">
    <span style="background-color:<%= current_cycle %>"><%= item %></span>
  </div>
<% end %>Source:show|on GitHub# File actionview/lib/action_view/helpers/text_helper.rb, line 454defcurrent_cycle(name="default")cycle=get_cycle(name)cycle.current_valueifcycleendcycle(first_value, *values)LinkCreates a Cycle object whoseto_smethod cycles through elements of an array every time it is called. This can be used for example, to alternate classes for table rows. You can use named cycles to allow nesting in loops. Passing aHashas the last parameter with a:namekey will create a named cycle. The default name for a cycle without a:namekey is"default". You can manually reset a cycle by callingreset_cycleand passing the name of the cycle. The current cycle string can be obtained anytime using thecurrent_cyclemethod.<%# Alternate CSS classes for even and odd numbers... %>
 <% @items = [1,2,3,4] %>
 <table>
 <% @items.each do |item| %>
   <tr class="<%= cycle("odd", "even") -%>">
     <td><%= item %></td>
   </tr>
 <% end %>
 </table>

 <%# Cycle CSS classes for rows, and text colors for values within each row %>
 <% @items = [
   { first: "Robert", middle: "Daniel", last: "James" },
   { first: "Emily", middle: "Shannon", maiden: "Pike", last: "Hicks" },
   { first: "June", middle: "Dae", last: "Jones" },
 ] %>
 <% @items.each do |item| %>
   <tr class="<%= cycle("odd", "even", name: "row_class") -%>">
     <td>
       <% item.values.each do |value| %>
         <%# Create a named cycle "colors" %>
         <span style="color:<%= cycle("red", "green", "blue", name: "colors") -%>">
           <%= value %>
         </span>
       <% end %>
       <% reset_cycle("colors") %>
     </td>
  </tr>
<% end %>Source:show|on GitHub# File actionview/lib/action_view/helpers/text_helper.rb, line 430defcycle(first_value,*values)options=values.extract_options!name=options.fetch(:name,"default")values.unshift(*first_value)cycle=get_cycle(name)unlesscycle&&cycle.values==valuescycle=set_cycle(name,Cycle.new(*values))endcycle.to_sendexcerpt(text, phrase, options = {})LinkExtracts the first occurrence ofphraseplus surrounding text fromtext. An omission marker is prepended / appended if the start / end of the result does not coincide with the start / end oftext. The result is always stripped in any case. Returnsnilifphraseisnât found.Options:radiusThe number of characters (or tokens â see:separatoroption) aroundphraseto include in the result. Defaults to 100.:omissionThe marker to prepend / append when the start / end of the excerpt does not coincide with the start / end oftext. Defaults to"...".:separatorThe separator between tokens to count for:radius. Defaults to"", which treats each character as a token.Examplesexcerpt('This is an example', 'an', radius: 5)
# => "...s is an exam..."

excerpt('This is an example', 'is', radius: 5)
# => "This is a..."

excerpt('This is an example', 'is')
# => "This is an example"

excerpt('This next thing is an example', 'ex', radius: 2)
# => "...next..."

excerpt('This is also an example', 'an', radius: 8, omission: '<chop> ')
# => "<chop> is also an example"

excerpt('This is a very beautiful morning', 'very', separator: ' ', radius: 1)
# => "...a very beautiful..."Source:show|on GitHub# File actionview/lib/action_view/helpers/text_helper.rb, line 235defexcerpt(text,phrase,options= {})returnunlesstext&&phraseseparator=options.fetch(:separator,nil)||""casephrasewhenRegexpregex=phraseelseregex=/#{Regexp.escape(phrase)}/iendreturnunlessmatches=text.match(regex)phrase=matches[0]unlessseparator.empty?text.split(separator).eachdo|value|ifvalue.match?(regex)phrase=valuebreakendendendfirst_part,second_part=text.split(phrase,2)prefix,first_part=cut_excerpt_part(:first,first_part,separator,options)postfix,second_part=cut_excerpt_part(:second,second_part,separator,options)affix= [first_part,separator,phrase,separator,second_part].join.strip[prefix,affix,postfix].joinendhighlight(text, phrases, options = {}, &block)LinkHighlights occurrences ofphrasesintextby formatting them with a highlighter string.phrasescan be one or more strings or regular expressions. The result will be marked HTML safe. By default,textis sanitized before highlighting to prevent possible XSS attacks.If a block is specified, it will be used instead of the highlighter string. Each occurrence of a phrase will be passed to the block, and its return value will be inserted into the final result.Options:highlighterThe highlighter string. Uses\1as the placeholder for a phrase, similar to +String#sub+. Defaults to"<mark>\1</mark>". This option is ignored if a block is specified.:sanitizeWhether to sanitizetextbefore highlighting. Defaults to true.Exampleshighlight('You searched for: rails', 'rails')
# => "You searched for: <mark>rails</mark>"

highlight('You searched for: rails', /for|rails/)
# => "You searched <mark>for</mark>: <mark>rails</mark>"

highlight('You searched for: ruby, rails, dhh', 'actionpack')
# => "You searched for: ruby, rails, dhh"

highlight('You searched for: rails', ['for', 'rails'], highlighter: '<em>\1</em>')
# => "You searched <em>for</em>: <em>rails</em>"

highlight('You searched for: rails', 'rails', highlighter: '<a href="search?q=\1">\1</a>')
# => "You searched for: <a href=\"search?q=rails\">rails</a>"

highlight('You searched for: rails', 'rails') { |match| link_to(search_path(q: match, match)) }
# => "You searched for: <a href=\"search?q=rails\">rails</a>"

highlight('<a href="javascript:alert(\'no!\')">ruby</a> on rails', 'rails', sanitize: false)
# => "<a href=\"javascript:alert('no!')\">ruby</a> on <mark>rails</mark>"Source:show|on GitHub# File actionview/lib/action_view/helpers/text_helper.rb, line 174defhighlight(text,phrases,options= {},&block)text=sanitize(text)ifoptions.fetch(:sanitize,true)iftext.blank?||phrases.blank?text||""elsepatterns=Array(phrases).map{|phrase|Regexp===phrase?phrase:Regexp.escape(phrase) }pattern=/(#{patterns.join("|")})/ihighlighter=options.fetch(:highlighter,'<mark>\1</mark>')unlessblocktext.scan(/<[^>]*|[^<]+/).eachdo|segment|if!segment.start_with?("<")ifblocksegment.gsub!(pattern,&block)elsesegment.gsub!(pattern,highlighter)endendend.joinend.html_safeendpluralize(count, singular, plural_arg = nil, plural: plural_arg, locale: I18n.locale)LinkAttempts to pluralize thesingularword unlesscountis 1. Ifpluralis supplied, it will use that when count is > 1, otherwise it will use the Inflector to determine the plural form for the given locale, which defaults toI18n.locale.The word will be pluralized using rules defined for the locale (you must define your own inflection rules for languages other than English). SeeActiveSupport::Inflector.pluralizepluralize(1, 'person')
# => "1 person"

pluralize(2, 'person')
# => "2 people"

pluralize(3, 'person', plural: 'users')
# => "3 users"

pluralize(0, 'person')
# => "0 people"

pluralize(2, 'Person', locale: :de)
# => "2 Personen"Source:show|on GitHub# File actionview/lib/action_view/helpers/text_helper.rb, line 290defpluralize(count,singular,plural_arg=nil,plural:plural_arg,locale:I18n.locale)word=ifcount==1||count.to_s.match?(/^1(\.0+)?$/)singularelseplural||singular.pluralize(locale)end"#{count || 0} #{word}"endreset_cycle(name = "default")LinkResets a cycle so that it starts from the first element the next time it is called. Pass innameto reset a named cycle.<%# Alternate CSS classes for even and odd numbers... %>
<% @items = [[1,2,3,4], [5,6,3], [3,4,5,6,7,4]] %>
<table>
<% @items.each do |item| %>
  <tr class="<%= cycle("even", "odd") -%>">
      <% item.each do |value| %>
        <span style="color:<%= cycle("#333", "#666", "#999", name: "colors") -%>">
          <%= value %>
        </span>
      <% end %>

      <% reset_cycle("colors") %>
  </tr>
<% end %>
</table>Source:show|on GitHub# File actionview/lib/action_view/helpers/text_helper.rb, line 477defreset_cycle(name="default")cycle=get_cycle(name)cycle.resetifcycleendsafe_concat(string)LinkSource:show|on GitHub# File actionview/lib/action_view/helpers/text_helper.rb, line 67defsafe_concat(string)output_buffer.respond_to?(:safe_concat)?output_buffer.safe_concat(string):concat(string)endsimple_format(text, html_options = {}, options = {})LinkReturnstexttransformed into HTML using simple formatting rules. Two or more consecutive newlines (\n\nor\r\n\r\n) are considered a paragraph and wrapped in<p>tags. One newline (\nor\r\n) is considered a linebreak and a<br />tag is appended. This method does not remove the newlines from thetext.You can pass any HTML attributes intohtml_options. These will be added to all created paragraphs.Options:sanitize- Iffalse, does not sanitizetext.:sanitize_options- Any extra options you want appended to the sanitize.:wrapper_tag-Stringrepresenting the wrapper tag, defaults to"p"Examplesmy_text = "Here is some basic text...\n...with a line break."

simple_format(my_text)
# => "<p>Here is some basic text...\n<br />...with a line break.</p>"

simple_format(my_text, {}, wrapper_tag: "div")
# => "<div>Here is some basic text...\n<br />...with a line break.</div>"

more_text = "We want to put a paragraph...\n\n...right there."

simple_format(more_text)
# => "<p>We want to put a paragraph...</p>\n\n<p>...right there.</p>"

simple_format("Look ma! A class!", class: 'description')
# => "<p class='description'>Look ma! A class!</p>"

simple_format("<blink>Unblinkable.</blink>")
# => "<p>Unblinkable.</p>"

simple_format("<blink>Blinkable!</blink> It's true.", {}, sanitize: false)
# => "<p><blink>Blinkable!</blink> It's true.</p>"

simple_format("<a target=\"_blank\" href=\"http://example.com\">Continue</a>", {}, { sanitize_options: { attributes: %w[target href] } })
# => "<p><a target=\"_blank\" href=\"http://example.com\">Continue</a></p>"Source:show|on GitHub# File actionview/lib/action_view/helpers/text_helper.rb, line 376defsimple_format(text,html_options= {},options= {})wrapper_tag=options[:wrapper_tag]||"p"text=sanitize(text,options.fetch(:sanitize_options, {}))ifoptions.fetch(:sanitize,true)paragraphs=split_paragraphs(text)ifparagraphs.empty?content_tag(wrapper_tag,nil,html_options)elseparagraphs.map!{|paragraph|content_tag(wrapper_tag,raw(paragraph),html_options)
    }.join("\n\n").html_safeendendtruncate(text, options = {}, &block)LinkTruncatestextif it is longer than a specified:length. Iftextis truncated, an omission marker will be appended to the result for a total length not exceeding:length.You can also pass a block to render and append extra content after the omission marker whentextis truncated. However, this contentcancause the total length to exceed:lengthcharacters.The result will be escaped unlessescape: falseis specified. In any case, the result will be marked HTML-safe. Care should be taken iftextmight contain HTML tags or entities, because truncation could produce invalid HTML, such as unbalanced or incomplete tags.Options:lengthThe maximum number of characters that should be returned, excluding any extra content from the block. Defaults to 30.:omissionThe string to append after truncating. Defaults to"...".:separatorA string or regexp used to find a breaking point at which to truncate. By default, truncation can occur at any character intext.:escapeWhether to escape the result. Defaults to true.Examplestruncate("Once upon a time in a world far far away")
# => "Once upon a time in a world..."

truncate("Once upon a time in a world far far away", length: 17)
# => "Once upon a ti..."

truncate("Once upon a time in a world far far away", length: 17, separator: ' ')
# => "Once upon a..."

truncate("And they found that many people were sleeping better.", length: 25, omission: '... (continued)')
# => "And they f... (continued)"

truncate("<p>Once upon a time in a world far far away</p>")
# => "&lt;p&gt;Once upon a time in a wo..."

truncate("<p>Once upon a time in a world far far away</p>", escape: false)
# => "<p>Once upon a time in a wo..."

truncate("Once upon a time in a world far far away") { link_to "Continue", "#" }
# => "Once upon a time in a world...<a href=\"#\">Continue</a>"Source:show|on GitHub# File actionview/lib/action_view/helpers/text_helper.rb, line 122deftruncate(text,options= {},&block)iftextlength=options.fetch(:length,30)content=text.truncate(length,options)content=options[:escape]==false?content.html_safe:ERB::Util.html_escape(content)content<<capture(&block)ifblock_given?&&text.length>lengthcontentendendword_wrap(text, line_width: 80, break_sequence: "\n")LinkWraps thetextinto lines no longer thanline_widthwidth. This method breaks on the first whitespace character that does not exceedline_width(which is 80 by default).word_wrap('Once upon a time')
# => "Once upon a time"

word_wrap('Once upon a time, in a kingdom called Far Far Away, a king fell ill, and finding a successor to the throne turned out to be more trouble than anyone could have imagined...')
# => "Once upon a time, in a kingdom called Far Far Away, a king fell ill, and finding\na successor to the throne turned out to be more trouble than anyone could have\nimagined..."

word_wrap('Once upon a time', line_width: 8)
# => "Once\nupon a\ntime"

word_wrap('Once upon a time', line_width: 1)
# => "Once\nupon\na\ntime"You can also specify a custombreak_sequence(ânâ by default):word_wrap('Once upon a time', line_width: 1, break_sequence: "\r\n")
# => "Once\r\nupon\r\na\r\ntime"Source:show|on GitHub# File actionview/lib/action_view/helpers/text_helper.rb, line 320defword_wrap(text,line_width:80,break_sequence:"\n")return+""iftext.empty?# Match up to `line_width` characters, followed by one of#   (1) non-newline whitespace plus an optional newline#   (2) the end of the string, ignoring any trailing newlines#   (3) a newline## -OR-## Match an empty linepattern=/(.{1,#{line_width}})(?:[^\S\n]+\n?|\n*\Z|\n)|\n/text.gsub(pattern,"\\1#{break_sequence}").chomp!(break_sequence)end