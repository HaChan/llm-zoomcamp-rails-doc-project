Action CableServerBroadcastingBroadcastingis how other parts of your application can send messages to a channelâs subscribers. As explained inChannel, most of the time, these broadcastings are streamed directly to the clients subscribed to the named broadcasting. Letâs explain with a full-stack example:class WebNotificationsChannel < ApplicationCable::Channel
  def subscribed
    stream_from "web_notifications_#{current_user.id}"
  end
end

# Somewhere in your app this is called, perhaps from a NewCommentJob:
ActionCable.server.broadcast \
  "web_notifications_1", { title: "New things!", body: "All that's fit for print" }

# Client-side CoffeeScript, which assumes you've already requested the right to send web notifications:
App.cable.subscriptions.create "WebNotificationsChannel",
  received: (data) ->
    new Notification data['title'], body: data['body']NamespaceCLASSActionCable::Server::Broadcasting::BroadcasterMethodsBbroadcast,broadcaster_forInstance Public methodsbroadcast(broadcasting, message, coder: ActiveSupport::JSON)LinkBroadcast a hash directly to a namedbroadcasting. This will later be JSON encoded.Source:show|on GitHub# File actioncable/lib/action_cable/server/broadcasting.rb, line 31defbroadcast(broadcasting,message,coder:ActiveSupport::JSON)broadcaster_for(broadcasting,coder:coder).broadcast(message)endbroadcaster_for(broadcasting, coder: ActiveSupport::JSON)LinkReturns a broadcaster for a namedbroadcastingthat can be reused. Useful when you have an object that may need multiple spots to transmit to a specific broadcasting over and over.Source:show|on GitHub# File actioncable/lib/action_cable/server/broadcasting.rb, line 38defbroadcaster_for(broadcasting,coder:ActiveSupport::JSON)Broadcaster.new(self,String(broadcasting),coder:coder)end