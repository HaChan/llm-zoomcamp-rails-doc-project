MethodsBbuild_explain_clauseEexplainHhigh_precision_current_timestampRraw_executeSset_constraintsInstance Public methodsbuild_explain_clause(options = [])LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb, line 134defbuild_explain_clause(options= [])return"EXPLAIN"ifoptions.empty?"EXPLAIN (#{options.join(", ").upcase})"endexplain(arel, binds = [], options = [])LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb, line 7defexplain(arel,binds= [],options= [])sql=build_explain_clause(options)+" "+to_sql(arel,binds)result=internal_exec_query(sql,"EXPLAIN",binds)PostgreSQL::ExplainPrettyPrinter.new.pp(result)endhigh_precision_current_timestamp()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb, line 130defhigh_precision_current_timestampHIGH_PRECISION_CURRENT_TIMESTAMPendraw_execute(sql, name, async: false, allow_retry: false, materialize_transactions: true)LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb, line 53defraw_execute(sql,name,async:false,allow_retry:false,materialize_transactions:true)log(sql,name,async:async)do|notification_payload|with_raw_connection(allow_retry:allow_retry,materialize_transactions:materialize_transactions)do|conn|result=conn.async_exec(sql)verified!handle_warnings(result)notification_payload[:row_count] =result.countresultendendendset_constraints(deferred, *constraints)LinkSet when constraints will be checked for the current transaction.Not passing any specific constraint names will set the value for all deferrable constraints.deferredValid values are:deferredor:immediate.Seewww.postgresql.org/docs/current/sql-set-constraints.htmlSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb, line 148defset_constraints(deferred,*constraints)unless%i[deferred immediate].include?(deferred)raiseArgumentError,"deferred must be :deferred or :immediate"endconstraints=ifconstraints.empty?"ALL"elseconstraints.map{|c|quote_table_name(c) }.join(", ")endexecute("SET CONSTRAINTS #{constraints} #{deferred.to_s.upcase}")end