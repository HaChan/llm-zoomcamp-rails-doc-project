MethodsAattribute_method?Cclear_validators!Vvalidate,validates,validates!,validates_each,validates_with,validators,validators_onInstance Public methodsattribute_method?(attribute)LinkReturnstrueifattributeis an attribute method,falseotherwise.class Person
  include ActiveModel::Validations

  attr_accessor :name
end

User.attribute_method?(:name) # => true
User.attribute_method?(:age)  # => falseSource:show|on GitHub# File activemodel/lib/active_model/validations.rb, line 284defattribute_method?(attribute)method_defined?(attribute)endclear_validators!()LinkClears all of the validators and validations.Note that this will clear anything that is being used to validate the model for both thevalidates_withandvalidatemethods. It clears the validators that are created with an invocation ofvalidates_withand the callbacks that are set by an invocation ofvalidate.class Person
  include ActiveModel::Validations

  validates_with MyValidator
  validates_with OtherValidator, on: :create
  validates_with StrictValidator, strict: true
  validate :cannot_be_robot

  def cannot_be_robot
    errors.add(:base, 'A person cannot be a robot') if person_is_robot
  end
end

Person.validators
# => [
#      #<MyValidator:0x007fbff403e808 @options={}>,
#      #<OtherValidator:0x007fbff403d930 @options={on: :create}>,
#      #<StrictValidator:0x007fbff3204a30 @options={strict:true}>
#    ]If one runsPerson.clear_validators!and then checks to see what validators this class has, you would obtain:Person.validators # => []Also, the callback set byvalidate :cannot_be_robotwill be erased so that:Person._validate_callbacks.empty?  # => trueSource:show|on GitHub# File activemodel/lib/active_model/validations.rb, line 248defclear_validators!reset_callbacks(:validate)_validators.clearendvalidate(*args, &block)LinkAdds a validation method or block to the class. This is useful when overriding thevalidateinstance method becomes too unwieldy and youâre looking for more descriptive declaration of your validations.This can be done with a symbol pointing to a method:class Comment
  include ActiveModel::Validations

  validate :must_be_friends

  def must_be_friends
    errors.add(:base, 'Must be friends to leave a comment') unless commenter.friend_of?(commentee)
  end
endWith a block which is passed with the current record to be validated:class Comment
  include ActiveModel::Validations

  validate do |comment|
    comment.must_be_friends
  end

  def must_be_friends
    errors.add(:base, 'Must be friends to leave a comment') unless commenter.friend_of?(commentee)
  end
endOr with a block whereselfpoints to the current record to be validated:class Comment
  include ActiveModel::Validations

  validate do
    errors.add(:base, 'Must be friends to leave a comment') unless commenter.friend_of?(commentee)
  end
endNote that the return value of validation methods is not relevant. Itâs not possible to halt the validate callback chain.Options::on- Specifies the contexts where this validation is active. Runs in all validation contexts by defaultnil. You can pass a symbol or an array of symbols. (e.g.on: :createoron: :custom_validation_contextoron: [:create, :custom_validation_context]):if- Specifies a method, proc, or string to call to determine if the validation should occur (e.g.if: :allow_validation, orif: Proc.new { |user| user.signup_step > 2 }). The method, proc or string should return or evaluate to atrueorfalsevalue.:unless- Specifies a method, proc, or string to call to determine if the validation should not occur (e.g.unless: :skip_validation, orunless: Proc.new { |user| user.signup_step <= 2 }). The method, proc, or string should return or evaluate to atrueorfalsevalue.NOTE: Callingvalidatemultiple times on the same method will overwrite previous definitions.Source:show|on GitHub# File activemodel/lib/active_model/validations.rb, line 171defvalidate(*args,&block)options=args.extract_options!ifargs.all?(Symbol)options.each_keydo|k|unlessVALID_OPTIONS_FOR_VALIDATE.include?(k)raiseArgumentError.new("Unknown key: #{k.inspect}. Valid keys are: #{VALID_OPTIONS_FOR_VALIDATE.map(&:inspect).join(', ')}. Perhaps you meant to call `validates` instead of `validate`?")endendendifoptions.key?(:on)options=options.merge(if:[predicate_for_validation_context(options[:on]),*options[:if]])endset_callback(:validate,*args,options,&block)endvalidates(*attributes)LinkThis method is a shortcut to all default validators and any custom validator classes ending in âValidatorâ. Note that Rails default validators can be overridden inside specific classes by creating custom validator classes in their place such as PresenceValidator.Examples of using the defaultRailsvalidators:validates :username, absence: true
validates :terms, acceptance: true
validates :password, confirmation: true
validates :username, exclusion: { in: %w(admin superuser) }
validates :email, format: { with: /\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\z/i, on: :create }
validates :age, inclusion: { in: 0..9 }
validates :first_name, length: { maximum: 30 }
validates :age, numericality: true
validates :username, presence: trueThe power of thevalidatesmethod comes when using custom validators and default validators in one call for a given attribute.class EmailValidator < ActiveModel::EachValidator
  def validate_each(record, attribute, value)
    record.errors.add attribute, (options[:message] || "is not an email") unless
      /\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\z/i.match?(value)
  end
end

class Person
  include ActiveModel::Validations
  attr_accessor :name, :email

  validates :name, presence: true, length: { maximum: 100 }
  validates :email, presence: true, email: true
endValidatorclasses may also exist within the class being validated allowing custom modules of validators to be included as needed.class Film
  include ActiveModel::Validations

  class TitleValidator < ActiveModel::EachValidator
    def validate_each(record, attribute, value)
      record.errors.add attribute, "must start with 'the'" unless /\Athe/i.match?(value)
    end
  end

  validates :name, title: true
endAdditionally validator classes may be in another namespace and still used within any class.validates :name, :'film/title' => trueThe validators hash can also handle regular expressions, ranges, arrays and strings in shortcut form.validates :email, format: /@/
validates :role, inclusion: %w(admin contributor)
validates :password, length: 6..20When using shortcut form, ranges and arrays are passed to your validatorâs initializer asoptions[:in]while other types including regular expressions and strings are passed asoptions[:with].There is also a list of options that could be used along with validators::on- Specifies the contexts where this validation is active. Runs in all validation contexts by defaultnil. You can pass a symbol or an array of symbols. (e.g.on: :createoron: :custom_validation_contextoron: [:create, :custom_validation_context]):if- Specifies a method, proc, or string to call to determine if the validation should occur (e.g.if: :allow_validation, orif: Proc.new { |user| user.signup_step > 2 }). The method, proc or string should return or evaluate to atrueorfalsevalue.:unless- Specifies a method, proc, or string to call to determine if the validation should not occur (e.g.unless: :skip_validation, orunless: Proc.new { |user| user.signup_step <= 2 }). The method, proc, or string should return or evaluate to atrueorfalsevalue.:allow_nil- Skip validation if the attribute isnil.:allow_blank- Skip validation if the attribute is blank.:strict- If the:strictoption is set to true will raiseActiveModel::StrictValidationFailedinstead of adding the error.:strictoption can also be set to any other exception.Example:validates :password, presence: true, confirmation: true, if: :password_required?
validates :token, length: { is: 24 }, strict: TokenLengthExceptionFinally, the options:if,:unless,:on,:allow_blank,:allow_nil,:strictand:messagecan be given to one specific validator, as a hash:validates :password, presence: { if: :password_required?, message: 'is forgotten.' }, confirmation: trueSource:show|on GitHub# File activemodel/lib/active_model/validations/validates.rb, line 106defvalidates(*attributes)defaults=attributes.extract_options!.dupvalidations=defaults.slice!(*_validates_default_keys)raiseArgumentError,"You need to supply at least one attribute"ifattributes.empty?raiseArgumentError,"You need to supply at least one validation"ifvalidations.empty?defaults[:attributes] =attributesvalidations.eachdo|key,options|key="#{key.to_s.camelize}Validator"beginvalidator=const_get(key)rescueNameErrorraiseArgumentError,"Unknown validator: '#{key}'"endnextunlessoptionsvalidates_with(validator,defaults.merge(_parse_validates_options(options)))endendvalidates!(*attributes)LinkThis method is used to define validations that cannot be corrected by end users and are considered exceptional. So each validator defined with bang or:strictoption set totruewill always raiseActiveModel::StrictValidationFailedinstead of adding error when validation fails. Seevalidatesfor more information about the validation itself.class Person
  include ActiveModel::Validations

  attr_accessor :name
  validates! :name, presence: true
end

person = Person.new
person.name = ''
person.valid?
# => ActiveModel::StrictValidationFailed: Name can't be blankSource:show|on GitHub# File activemodel/lib/active_model/validations/validates.rb, line 148defvalidates!(*attributes)options=attributes.extract_options!options[:strict] =truevalidates(*(attributes<<options))endvalidates_each(*attr_names, &block)LinkValidates each attribute against a block.class Person
  include ActiveModel::Validations

  attr_accessor :first_name, :last_name

  validates_each :first_name, :last_name, allow_blank: true do |record, attr, value|
    record.errors.add attr, "starts with z." if value.start_with?("z")
  end
endOptions::on- Specifies the contexts where this validation is active. Runs in all validation contexts by defaultnil. You can pass a symbol or an array of symbols. (e.g.on: :createoron: :custom_validation_contextoron: [:create, :custom_validation_context]):allow_nil- Skip validation if attribute isnil.:allow_blank- Skip validation if attribute is blank.:if- Specifies a method, proc, or string to call to determine if the validation should occur (e.g.if: :allow_validation, orif: Proc.new { |user| user.signup_step > 2 }). The method, proc or string should return or evaluate to atrueorfalsevalue.:unless- Specifies a method, proc, or string to call to determine if the validation should not occur (e.g.unless: :skip_validation, orunless: Proc.new { |user| user.signup_step <= 2 }). The method, proc, or string should return or evaluate to atrueorfalsevalue.Source:show|on GitHub# File activemodel/lib/active_model/validations.rb, line 104defvalidates_each(*attr_names,&block)validates_withBlockValidator,_merge_attributes(attr_names),&blockendvalidates_with(*args, &block)LinkPasses the record off to the class or classes specified and allows them to add errors based on more complex conditions.class Person
  include ActiveModel::Validations
  validates_with MyValidator
end

class MyValidator < ActiveModel::Validator
  def validate(record)
    if some_complex_logic
      record.errors.add :base, 'This record is invalid'
    end
  end

  private
    def some_complex_logic
      # ...
    end
endYou may also pass it multiple classes, like so:class Person
  include ActiveModel::Validations
  validates_with MyValidator, MyOtherValidator, on: :create
endThere is no default error message forvalidates_with. You must manually add errors to the recordâs errors collection in the validator class.To implement the validate method, you must have arecordparameter defined, which is the record to be validated.Configuration options::on- Specifies the contexts where this validation is active. Runs in all validation contexts by defaultnil. You can pass a symbol or an array of symbols. (e.g.on: :createoron: :custom_validation_contextoron: [:create, :custom_validation_context]):if- Specifies a method, proc, or string to call to determine if the validation should occur (e.g.if: :allow_validation, orif: Proc.new { |user| user.signup_step > 2 }). The method, proc, or string should return or evaluate to atrueorfalsevalue.:unless- Specifies a method, proc, or string to call to determine if the validation should not occur (e.g.unless: :skip_validation, orunless: Proc.new { |user| user.signup_step <= 2 }). The method, proc, or string should return or evaluate to atrueorfalsevalue.:strict- Specifies whether validation should be strict. SeeActiveModel::Validations#validates!for more information.If you pass any additional configuration options, they will be passed to the class and available asoptions:class Person
  include ActiveModel::Validations
  validates_with MyValidator, my_custom_key: 'my custom value'
end

class MyValidator < ActiveModel::Validator
  def validate(record)
    options[:my_custom_key] # => "my custom value"
  end
endSource:show|on GitHub# File activemodel/lib/active_model/validations/with.rb, line 88defvalidates_with(*args,&block)options=args.extract_options!options[:class] =selfargs.eachdo|klass|validator=klass.new(options.dup,&block)ifvalidator.respond_to?(:attributes)&&!validator.attributes.empty?validator.attributes.eachdo|attribute|_validators[attribute.to_sym]<<validatorendelse_validators[nil]<<validatorendvalidate(validator,options)endendvalidators()LinkList all validators that are being used to validate the model usingvalidates_withmethod.class Person
  include ActiveModel::Validations

  validates_with MyValidator
  validates_with OtherValidator, on: :create
  validates_with StrictValidator, strict: true
end

Person.validators
# => [
#      #<MyValidator:0x007fbff403e808 @options={}>,
#      #<OtherValidator:0x007fbff403d930 @options={on: :create}>,
#      #<StrictValidator:0x007fbff3204a30 @options={strict:true}>
#    ]Source:show|on GitHub# File activemodel/lib/active_model/validations.rb, line 206defvalidators_validators.values.flatten.uniqendvalidators_on(*attributes)LinkList all validators that are being used to validate a specific attribute.class Person
  include ActiveModel::Validations

  attr_accessor :name, :age

  validates_presence_of :name
  validates_inclusion_of :age, in: 0..99
end

Person.validators_on(:name)
# => [
#       #<ActiveModel::Validations::PresenceValidator:0x007fe604914e60 @attributes=[:name], @options={}>,
#    ]Source:show|on GitHub# File activemodel/lib/active_model/validations.rb, line 268defvalidators_on(*attributes)attributes.flat_mapdo|attribute|_validators[attribute.to_sym]endend