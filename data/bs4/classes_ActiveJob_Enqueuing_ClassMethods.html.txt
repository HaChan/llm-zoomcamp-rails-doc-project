Includes theperform_latermethod for job initialization.MethodsJjob_or_instantiatePperform_laterInstance Public methodsperform_later(...)LinkPush a job onto the queue. By default the arguments must be eitherString,Integer,Float,NilClass,TrueClass,FalseClass,BigDecimal,Symbol,Date,Time,DateTime,ActiveSupport::TimeWithZone,ActiveSupport::Duration,Hash,ActiveSupport::HashWithIndifferentAccess,Array,Range, or GlobalID::Identification instances, although this can be extended by adding custom serializers.Returns an instance of the job class queued with arguments available in Job#arguments orfalseif the enqueue did not succeed.After the attempted enqueue, the job will be yielded to an optional block.If Active Job is used conjointly with Active Record, andperform_lateris called inside an Active Record transaction, then the enqueue is implicitly deferred to after the transaction is committed, or dropped if itâs rolled back. In such caseperform_laterwill return the job instance like if it was successfully enqueued, but will still returnfalseif a callback prevented the job from being enqueued.This behavior can be changed on a per job basis:class NotificationJob < ApplicationJob
  self.enqueue_after_transaction_commit = false
endSource:show|on GitHub# File activejob/lib/active_job/enqueuing.rb, line 82defperform_later(...)job=job_or_instantiate(...)enqueue_result=job.enqueueyieldjobifblock_given?enqueue_resultendInstance Private methodsjob_or_instantiate(*args, &_)LinkSource:show|on GitHub# File activejob/lib/active_job/enqueuing.rb, line 92defjob_or_instantiate(*args,&_)# :doc:args.first.is_a?(self)?args.first:new(*args)end