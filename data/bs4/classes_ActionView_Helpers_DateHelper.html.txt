Action View Date HelpersTheDateHelper primarily creates select/option tags for different kinds of dates and times or date and time elements. All of the select-type methods share a number of common options that are as follows::prefix- overwrites the default prefix of âdateâ used for the select names. So specifying âbirthdayâ would give birthday[month] instead of date[month] if passed to theselect_monthmethod.:include_blank- set to true if it should be possible to set an empty date.:discard_type- set to true if you want to discard the type part of the select name. If set to true, theselect_monthmethod would use simply âdateâ (which can be overwritten using:prefix) instead of date[month].MethodsDdate_select,datetime_select,distance_of_time_in_words,distance_of_time_in_words_to_nowSselect_date,select_datetime,select_day,select_hour,select_minute,select_month,select_second,select_time,select_yearTtime_ago_in_words,time_select,time_tagConstantsMINUTES_IN_QUARTER_YEAR=131400MINUTES_IN_THREE_QUARTERS_YEAR=394200MINUTES_IN_YEAR=525600Instance Public methodsdate_select(object_name, method, options = {}, html_options = {})LinkReturns a set of select tags (one for year, month, and day) pre-selected for accessing a specified date-based attribute (identified bymethod) on an object assigned to the template (identified byobject).Options:use_month_numbers- Set to true if you want to use month numbers rather than month names (e.g. â2â instead of âFebruaryâ).:use_two_digit_numbers- Set to true if you want to display two digit month and day numbers (e.g. â02â instead of âFebruaryâ and â08â instead of â8â).:use_short_month- Set to true if you want to use abbreviated month names instead of full month names (e.g. âFebâ instead of âFebruaryâ).:add_month_numbers- Set to true if you want to use both month numbers and month names (e.g. â2 - Februaryâ instead of âFebruaryâ).:use_month_names- Set to an array with 12 month names if you want to customize month names. Note: You can also use Railsâ i18n functionality for this.:month_format_string- Set to a format string. The string gets passed keys:number(integer) and:name(string). A format string would be something like â%{name} (%<number>02d)â for example. SeeKernel.sprintffor documentation on format sequences.:date_separator- Specifies a string to separate the date fields. Default is ââ (i.e. nothing).:time_separator- Specifies a string to separate the time fields. Default is â : â.:datetime_separator- Specifies a string to separate the date and time fields. Default is â &mdash; â.:start_year- Set the start year for the year select. Default isDate.today.year - 5if you are creating new record. While editing existing record,:start_yeardefaults to the current selected year minus 5.:end_year- Set the end year for the year select. Default isDate.today.year + 5if you are creating new record. While editing existing record,:end_yeardefaults to the current selected year plus 5.:year_format- Set format of years for year select. Lambda should be passed.:day_format- Set format of days for day select. Lambda should be passed.:discard_day- Set to true if you donât want to show a day select. This includes the day as a hidden field instead of showing a select field. Also note that this implicitly sets the day to be the first of the given month in order to not create invalid dates like 31 February.:discard_month- Set to true if you donât want to show a month select. This includes the month as a hidden field instead of showing a select field. Also note that this implicitly sets :discard_day to true.:discard_year- Set to true if you donât want to show a year select. This includes the year as a hidden field instead of showing a select field.:order- Set to an array containing:day,:monthand:yearto customize the order in which the select fields are shown. If you leave out any of the symbols, the respective select will not be shown (like when you setdiscard_xxx: true. Defaults to the order defined in the respective locale (e.g. [:year, :month, :day] in the en locale that ships with Rails).:include_blank- Include a blank option in every select field so itâs possible to set empty dates.:default- Set a default date if the affected date isnât set or isnil.:selected- Set a date that overrides the actual value.:disabled- Set to true if you want show the select fields as disabled.:prompt- Set to true (for a generic prompt), a prompt string or a hash of prompt strings for:year,:month,:day,:hour,:minuteand:second. Setting this option prepends a select option with a generic prompt  (Day, Month, Year, Hour, Minute, Seconds) or the given prompt string.:with_css_classes- Set to true or a hash of strings. Use true if you want to assign generic styles for select tags. This automatically set classes âyearâ, âmonthâ, âdayâ, âhourâ, âminuteâ and âsecondâ. A hash of strings for:year,:month,:day,:hour,:minute,:secondwill extend the select type with the given value. Usehtml_optionsto modify every select tag in the set.:use_hidden- Set to true if you only want to generate hidden input tags.If anything is passed in thehtml_optionshash it will be applied to every select tag in the set.NOTE: Discarded selects will default to 1. So if no month select is available, January will be assumed.# Generates a date select that when POSTed is stored in the article variable, in the written_on attribute.
date_select("article", "written_on")

# Generates a date select that when POSTed is stored in the article variable, in the written_on attribute,
# with the year in the year drop down box starting at 1995.
date_select("article", "written_on", start_year: 1995)

# Generates a date select that when POSTed is stored in the article variable, in the written_on attribute,
# with the year in the year drop down box starting at 1995, numbers used for months instead of words,
# and without a day select box.
date_select("article", "written_on", start_year: 1995, use_month_numbers: true,
                                  discard_day: true, include_blank: true)

# Generates a date select that when POSTed is stored in the article variable, in the written_on attribute,
# with two digit numbers used for months and days.
date_select("article", "written_on", use_two_digit_numbers: true)

# Generates a date select that when POSTed is stored in the article variable, in the written_on attribute
# with the fields ordered as day, month, year rather than month, day, year.
date_select("article", "written_on", order: [:day, :month, :year])

# Generates a date select that when POSTed is stored in the user variable, in the birthday attribute
# lacking a year field.
date_select("user", "birthday", order: [:month, :day])

# Generates a date select that when POSTed is stored in the article variable, in the written_on attribute
# which is initially set to the date 3 days from the current date
date_select("article", "written_on", default: 3.days.from_now)

# Generates a date select that when POSTed is stored in the article variable, in the written_on attribute
# which is set in the form with today's date, regardless of the value in the Active Record object.
date_select("article", "written_on", selected: Date.today)

# Generates a date select that when POSTed is stored in the credit_card variable, in the bill_due attribute
# that will have a default day of 20.
date_select("credit_card", "bill_due", default: { day: 20 })

# Generates a date select with custom prompts.
date_select("article", "written_on", prompt: { day: 'Select day', month: 'Select month', year: 'Select year' })

# Generates a date select with custom year format.
date_select("article", "written_on", year_format: ->(year) { "Heisei #{year - 1988}" })

# Generates a date select with custom day format.
date_select("article", "written_on", day_format: ->(day) { day.ordinalize })The selects are prepared for multi-parameter assignment to an Active Record object.Note: If the day is not included as an option but the month is, the day will be set to the 1st to ensure that all month choices are valid.Source:show|on GitHub# File actionview/lib/action_view/helpers/date_helper.rb, line 290defdate_select(object_name,method,options= {},html_options= {})Tags::DateSelect.new(object_name,method,self,options,html_options).renderenddatetime_select(object_name, method, options = {}, html_options = {})LinkReturns a set of select tags (one for year, month, day, hour, and minute) pre-selected for accessing a specified datetime-based attribute (identified bymethod) on an object assigned to the template (identified byobject).If anything is passed in the html_options hash it will be applied to every select tag in the set.# Generates a datetime select that, when POSTed, will be stored in the article variable in the written_on
# attribute.
datetime_select("article", "written_on")

# Generates a datetime select with a year select that starts at 1995 that, when POSTed, will be stored in the
# article variable in the written_on attribute.
datetime_select("article", "written_on", start_year: 1995)

# Generates a datetime select with a default value of 3 days from the current time that, when POSTed, will
# be stored in the trip variable in the departing attribute.
datetime_select("trip", "departing", default: 3.days.from_now)

# Generate a datetime select with hours in the AM/PM format
datetime_select("article", "written_on", ampm: true)

# Generates a datetime select that discards the type that, when POSTed, will be stored in the article variable
# as the written_on attribute.
datetime_select("article", "written_on", discard_type: true)

# Generates a datetime select with a custom prompt. Use <tt>prompt: true</tt> for generic prompts.
datetime_select("article", "written_on", prompt: { day: 'Choose day', month: 'Choose month', year: 'Choose year' })
datetime_select("article", "written_on", prompt: { hour: true }) # generic prompt for hours
datetime_select("article", "written_on", prompt: true) # generic prompts for allThe selects are prepared for multi-parameter assignment to an Active Record object.Source:show|on GitHub# File actionview/lib/action_view/helpers/date_helper.rb, line 366defdatetime_select(object_name,method,options= {},html_options= {})Tags::DatetimeSelect.new(object_name,method,self,options,html_options).renderenddistance_of_time_in_words(from_time, to_time = 0, options = {})LinkReports the approximate distance in time between twoTime,Date, orDateTimeobjects or integers as seconds. Passinclude_seconds: trueif you want more detailed approximations when distance < 1 min, 29 secs. Distances are reported based on the following table:0 <-> 29 secs                                                             # => less than a minute
30 secs <-> 1 min, 29 secs                                                # => 1 minute
1 min, 30 secs <-> 44 mins, 29 secs                                       # => [2..44] minutes
44 mins, 30 secs <-> 89 mins, 29 secs                                     # => about 1 hour
89 mins, 30 secs <-> 23 hrs, 59 mins, 29 secs                             # => about [2..24] hours
23 hrs, 59 mins, 30 secs <-> 41 hrs, 59 mins, 29 secs                     # => 1 day
41 hrs, 59 mins, 30 secs  <-> 29 days, 23 hrs, 59 mins, 29 secs           # => [2..29] days
29 days, 23 hrs, 59 mins, 30 secs <-> 44 days, 23 hrs, 59 mins, 29 secs   # => about 1 month
44 days, 23 hrs, 59 mins, 30 secs <-> 59 days, 23 hrs, 59 mins, 29 secs   # => about 2 months
59 days, 23 hrs, 59 mins, 30 secs <-> 1 yr minus 1 sec                    # => [2..12] months
1 yr <-> 1 yr, 3 months                                                   # => about 1 year
1 yr, 3 months <-> 1 yr, 9 months                                         # => over 1 year
1 yr, 9 months <-> 2 yr minus 1 sec                                       # => almost 2 years
2 yrs <-> max time or date                                                # => (same rules as 1 yr)Withinclude_seconds: trueand the difference < 1 minute 29 seconds:0-4   secs      # => less than 5 seconds
5-9   secs      # => less than 10 seconds
10-19 secs      # => less than 20 seconds
20-39 secs      # => half a minute
40-59 secs      # => less than a minute
60-89 secs      # => 1 minute

from_time = Time.now
distance_of_time_in_words(from_time, from_time + 50.minutes)                                # => about 1 hour
distance_of_time_in_words(from_time, 50.minutes.from_now)                                   # => about 1 hour
distance_of_time_in_words(from_time, from_time + 15.seconds)                                # => less than a minute
distance_of_time_in_words(from_time, from_time + 15.seconds, include_seconds: true)         # => less than 20 seconds
distance_of_time_in_words(from_time, 3.years.from_now)                                      # => about 3 years
distance_of_time_in_words(from_time, from_time + 60.hours)                                  # => 3 days
distance_of_time_in_words(from_time, from_time + 45.seconds, include_seconds: true)         # => less than a minute
distance_of_time_in_words(from_time, from_time - 45.seconds, include_seconds: true)         # => less than a minute
distance_of_time_in_words(from_time, 76.seconds.from_now)                                   # => 1 minute
distance_of_time_in_words(from_time, from_time + 1.year + 3.days)                           # => about 1 year
distance_of_time_in_words(from_time, from_time + 3.years + 6.months)                        # => over 3 years
distance_of_time_in_words(from_time, from_time + 4.years + 9.days + 30.minutes + 5.seconds) # => about 4 years

to_time = Time.now + 6.years + 19.days
distance_of_time_in_words(from_time, to_time, include_seconds: true)                        # => about 6 years
distance_of_time_in_words(to_time, from_time, include_seconds: true)                        # => about 6 years
distance_of_time_in_words(Time.now, Time.now)                                               # => less than a minuteWith thescopeoption, you can define a custom scope for Rails to look up the translation.For example you can define the following in your locale (e.g. en.yml).datetime:
  distance_in_words:
    short:
      about_x_hours:
        one: 'an hour'
        other: '%{count} hours'Seegithub.com/svenfuchs/rails-i18n/blob/master/rails/locale/en.ymlfor more examples.Which will then result in the following:from_time = Time.now
distance_of_time_in_words(from_time, from_time + 50.minutes, scope: 'datetime.distance_in_words.short') # => "an hour"
distance_of_time_in_words(from_time, from_time + 3.hours, scope: 'datetime.distance_in_words.short')    # => "3 hours"Source:show|on GitHub# File actionview/lib/action_view/helpers/date_helper.rb, line 95defdistance_of_time_in_words(from_time,to_time=0,options= {})options= {scope::'datetime.distance_in_words'}.merge!(options)from_time=normalize_distance_of_time_argument_to_time(from_time)to_time=normalize_distance_of_time_argument_to_time(to_time)from_time,to_time=to_time,from_timeiffrom_time>to_timedistance_in_minutes= ((to_time-from_time)/60.0).rounddistance_in_seconds= (to_time-from_time).roundI18n.with_optionslocale:options[:locale],scope:options[:scope]do|locale|casedistance_in_minuteswhen0..1returndistance_in_minutes==0?locale.t(:less_than_x_minutes,count:1):locale.t(:x_minutes,count:distance_in_minutes)unlessoptions[:include_seconds]casedistance_in_secondswhen0..4thenlocale.t:less_than_x_seconds,count:5when5..9thenlocale.t:less_than_x_seconds,count:10when10..19thenlocale.t:less_than_x_seconds,count:20when20..39thenlocale.t:half_a_minutewhen40..59thenlocale.t:less_than_x_minutes,count:1elselocale.t:x_minutes,count:1endwhen2...45thenlocale.t:x_minutes,count:distance_in_minuteswhen45...90thenlocale.t:about_x_hours,count:1# 90 mins up to 24 hourswhen90...1440thenlocale.t:about_x_hours,count:(distance_in_minutes.to_f/60.0).round# 24 hours up to 42 hourswhen1440...2520thenlocale.t:x_days,count:1# 42 hours up to 30 dayswhen2520...43200thenlocale.t:x_days,count:(distance_in_minutes.to_f/1440.0).round# 30 days up to 60 dayswhen43200...86400thenlocale.t:about_x_months,count:(distance_in_minutes.to_f/43200.0).round# 60 days up to 365 dayswhen86400...525600thenlocale.t:x_months,count:(distance_in_minutes.to_f/43200.0).roundelsefrom_year=from_time.yearfrom_year+=1iffrom_time.month>=3to_year=to_time.yearto_year-=1ifto_time.month<3leap_years= (from_year>to_year)?0:(from_year..to_year).count{|x|Date.leap?(x) }minute_offset_for_leap_year=leap_years*1440# Discount the leap year days when calculating year distance.# e.g. if there are 20 leap year days between 2 dates having the same day# and month then based on 365 days calculation# the distance in years will come out to over 80 years when in written# English it would read better as about 80 years.minutes_with_offset=distance_in_minutes-minute_offset_for_leap_yearremainder= (minutes_with_offset%MINUTES_IN_YEAR)distance_in_years= (minutes_with_offset.divMINUTES_IN_YEAR)ifremainder<MINUTES_IN_QUARTER_YEARlocale.t(:about_x_years,count:distance_in_years)elsifremainder<MINUTES_IN_THREE_QUARTERS_YEARlocale.t(:over_x_years,count:distance_in_years)elselocale.t(:almost_x_years,count:distance_in_years+1)endendendenddistance_of_time_in_words_to_now(from_time, options = {})LinkAlias for:time_ago_in_wordsselect_date(date = Date.current, options = {}, html_options = {})LinkReturns a set of HTML select-tags (one for year, month, and day) pre-selected with thedate. Itâs possible to explicitly set the order of the tags using the:orderoption with an array of symbols:year,:monthand:dayin the desired order. If the array passed to the:orderoption does not contain all the three symbols, all tags will be hidden.If anything is passed in the html_options hash it will be applied to every select tag in the set.my_date = Time.now + 6.days

# Generates a date select that defaults to the date in my_date (six days after today).
select_date(my_date)

# Generates a date select that defaults to today (no specified date).
select_date()

# Generates a date select that defaults to the date in my_date (six days after today)
# with the fields ordered year, month, day rather than month, day, year.
select_date(my_date, order: [:year, :month, :day])

# Generates a date select that discards the type of the field and defaults to the date in
# my_date (six days after today).
select_date(my_date, discard_type: true)

# Generates a date select that defaults to the date in my_date,
# which has fields separated by '/'.
select_date(my_date, date_separator: '/')

# Generates a date select that defaults to the datetime in my_date (six days after today)
# prefixed with 'payday' rather than 'date'.
select_date(my_date, prefix: 'payday')

# Generates a date select with a custom prompt. Use <tt>prompt: true</tt> for generic prompts.
select_date(my_date, prompt: { day: 'Choose day', month: 'Choose month', year: 'Choose year' })
select_date(my_date, prompt: { hour: true }) # generic prompt for hours
select_date(my_date, prompt: true) # generic prompts for allSource:show|on GitHub# File actionview/lib/action_view/helpers/date_helper.rb, line 454defselect_date(date=Date.current,options= {},html_options= {})DateTimeSelector.new(date,options,html_options).select_dateendselect_datetime(datetime = Time.current, options = {}, html_options = {})LinkReturns a set of HTML select-tags (one for year, month, day, hour, minute, and second) pre-selected with thedatetime. Itâs also possible to explicitly set the order of the tags using the:orderoption with an array of symbols:year,:monthand:dayin the desired order. If you do not supply aSymbol, it will be appended onto the:orderpassed in. You can also add:date_separator,:datetime_separatorand:time_separatorkeys to theoptionsto control visual display of the elements.If anything is passed in the html_options hash it will be applied to every select tag in the set.my_date_time = Time.now + 4.days

# Generates a datetime select that defaults to the datetime in my_date_time (four days after today).
select_datetime(my_date_time)

# Generates a datetime select that defaults to today (no specified datetime)
select_datetime()

# Generates a datetime select that defaults to the datetime in my_date_time (four days after today)
# with the fields ordered year, month, day rather than month, day, year.
select_datetime(my_date_time, order: [:year, :month, :day])

# Generates a datetime select that defaults to the datetime in my_date_time (four days after today)
# with a '/' between each date field.
select_datetime(my_date_time, date_separator: '/')

# Generates a datetime select that defaults to the datetime in my_date_time (four days after today)
# with a date fields separated by '/', time fields separated by '' and the date and time fields
# separated by a comma (',').
select_datetime(my_date_time, date_separator: '/', time_separator: '', datetime_separator: ',')

# Generates a datetime select that discards the type of the field and defaults to the datetime in
# my_date_time (four days after today)
select_datetime(my_date_time, discard_type: true)

# Generate a datetime field with hours in the AM/PM format
select_datetime(my_date_time, ampm: true)

# Generates a datetime select that defaults to the datetime in my_date_time (four days after today)
# prefixed with 'payday' rather than 'date'
select_datetime(my_date_time, prefix: 'payday')

# Generates a datetime select with a custom prompt. Use <tt>prompt: true</tt> for generic prompts.
select_datetime(my_date_time, prompt: { day: 'Choose day', month: 'Choose month', year: 'Choose year' })
select_datetime(my_date_time, prompt: { hour: true }) # generic prompt for hours
select_datetime(my_date_time, prompt: true) # generic prompts for allSource:show|on GitHub# File actionview/lib/action_view/helpers/date_helper.rb, line 415defselect_datetime(datetime=Time.current,options= {},html_options= {})DateTimeSelector.new(datetime,options,html_options).select_datetimeendselect_day(date, options = {}, html_options = {})LinkReturns a select tag with options for each of the days 1 through 31 with the current day selected. Thedatecan also be substituted for a day number. If you want to display days with a leading zero set the:use_two_digit_numberskey inoptionsto true. Override the field name using the:field_nameoption, âdayâ by default.my_date = Time.now + 2.days

# Generates a select field for days that defaults to the day for the date in my_date.
select_day(my_date)

# Generates a select field for days that defaults to the number given.
select_day(5)

# Generates a select field for days that defaults to the number given, but displays it with two digits.
select_day(5, use_two_digit_numbers: true)

# Generates a select field for days that defaults to the day for the date in my_date
# that is named 'due' rather than 'day'.
select_day(my_date, field_name: 'due')

# Generates a select field for days with a custom prompt. Use <tt>prompt: true</tt> for a
# generic prompt.
select_day(5, prompt: 'Choose day')Source:show|on GitHub# File actionview/lib/action_view/helpers/date_helper.rb, line 597defselect_day(date,options= {},html_options= {})DateTimeSelector.new(date,options,html_options).select_dayendselect_hour(datetime, options = {}, html_options = {})LinkReturns a select tag with options for each of the hours 0 through 23 with the current hour selected. Thedatetimecan be either aTimeorDateTimeobject or an integer. Override the field name using the:field_nameoption, âhourâ by default.my_time = Time.now + 6.hours

# Generates a select field for hours that defaults to the hour for the time in my_time.
select_hour(my_time)

# Generates a select field for hours that defaults to the number given.
select_hour(13)

# Generates a select field for hours that defaults to the hour for the time in my_time
# that is named 'stride' rather than 'hour'.
select_hour(my_time, field_name: 'stride')

# Generates a select field for hours with a custom prompt. Use <tt>prompt: true</tt> for a
# generic prompt.
select_hour(13, prompt: 'Choose hour')

# Generate a select field for hours in the AM/PM format
select_hour(my_time, ampm: true)

# Generates a select field that includes options for hours from 2 to 14.
select_hour(my_time, start_hour: 2, end_hour: 14)Source:show|on GitHub# File actionview/lib/action_view/helpers/date_helper.rb, line 570defselect_hour(datetime,options= {},html_options= {})DateTimeSelector.new(datetime,options,html_options).select_hourendselect_minute(datetime, options = {}, html_options = {})LinkReturns a select tag with options for each of the minutes 0 through 59 with the current minute selected. Also can return a select tag with options byminute_stepfrom 0 through 59 with the 00 minute selected. Thedatetimecan be either aTimeorDateTimeobject or an integer. Override the field name using the:field_nameoption, âminuteâ by default.my_time = Time.now + 10.minutes

# Generates a select field for minutes that defaults to the minutes for the time in my_time.
select_minute(my_time)

# Generates a select field for minutes that defaults to the number given.
select_minute(14)

# Generates a select field for minutes that defaults to the minutes for the time in my_time
# that is named 'moment' rather than 'minute'.
select_minute(my_time, field_name: 'moment')

# Generates a select field for minutes with a custom prompt. Use <tt>prompt: true</tt> for a
# generic prompt.
select_minute(14, prompt: 'Choose minutes')Source:show|on GitHub# File actionview/lib/action_view/helpers/date_helper.rb, line 541defselect_minute(datetime,options= {},html_options= {})DateTimeSelector.new(datetime,options,html_options).select_minuteendselect_month(date, options = {}, html_options = {})LinkReturns a select tag with options for each of the months January through December with the current month selected. The month names are presented as keys (whatâs shown to the user) and the month numbers (1-12) are used as values (whatâs submitted to the server). Itâs also possible to use month numbers for the presentation instead of names â set the:use_month_numberskey inoptionsto true for this to happen. If you want both numbers and names, set the:add_month_numberskey inoptionsto true. If you would prefer to show month names as abbreviations, set the:use_short_monthkey inoptionsto true. If you want to use your own month names, set the:use_month_nameskey inoptionsto an array of 12 month names. If you want to display months with a leading zero set the:use_two_digit_numberskey inoptionsto true. Override the field name using the:field_nameoption, âmonthâ by default.# Generates a select field for months that defaults to the current month that
# will use keys like "January", "March".
select_month(Date.today)

# Generates a select field for months that defaults to the current month that
# is named "start" rather than "month".
select_month(Date.today, field_name: 'start')

# Generates a select field for months that defaults to the current month that
# will use keys like "1", "3".
select_month(Date.today, use_month_numbers: true)

# Generates a select field for months that defaults to the current month that
# will use keys like "1 - January", "3 - March".
select_month(Date.today, add_month_numbers: true)

# Generates a select field for months that defaults to the current month that
# will use keys like "Jan", "Mar".
select_month(Date.today, use_short_month: true)

# Generates a select field for months that defaults to the current month that
# will use keys like "Januar", "Marts."
select_month(Date.today, use_month_names: %w(Januar Februar Marts ...))

# Generates a select field for months that defaults to the current month that
# will use keys with two digit numbers like "01", "03".
select_month(Date.today, use_two_digit_numbers: true)

# Generates a select field for months with a custom prompt. Use <tt>prompt: true</tt> for a
# generic prompt.
select_month(14, prompt: 'Choose month')Source:show|on GitHub# File actionview/lib/action_view/helpers/date_helper.rb, line 642defselect_month(date,options= {},html_options= {})DateTimeSelector.new(date,options,html_options).select_monthendselect_second(datetime, options = {}, html_options = {})LinkReturns a select tag with options for each of the seconds 0 through 59 with the current second selected. Thedatetimecan be either aTimeorDateTimeobject or an integer. Override the field name using the:field_nameoption, âsecondâ by default.my_time = Time.now + 16.seconds

# Generates a select field for seconds that defaults to the seconds for the time in my_time.
select_second(my_time)

# Generates a select field for seconds that defaults to the number given.
select_second(33)

# Generates a select field for seconds that defaults to the seconds for the time in my_time
# that is named 'interval' rather than 'second'.
select_second(my_time, field_name: 'interval')

# Generates a select field for seconds with a custom prompt. Use <tt>prompt: true</tt> for a
# generic prompt.
select_second(14, prompt: 'Choose seconds')Source:show|on GitHub# File actionview/lib/action_view/helpers/date_helper.rb, line 517defselect_second(datetime,options= {},html_options= {})DateTimeSelector.new(datetime,options,html_options).select_secondendselect_time(datetime = Time.current, options = {}, html_options = {})LinkReturns a set of HTML select-tags (one for hour and minute). You can set:time_separatorkey to format the output, and the:include_secondsoption to include an input for seconds.If anything is passed in the html_options hash it will be applied to every select tag in the set.my_time = Time.now + 5.days + 7.hours + 3.minutes + 14.seconds

# Generates a time select that defaults to the time in my_time.
select_time(my_time)

# Generates a time select that defaults to the current time (no specified time).
select_time()

# Generates a time select that defaults to the time in my_time,
# which has fields separated by ':'.
select_time(my_time, time_separator: ':')

# Generates a time select that defaults to the time in my_time,
# that also includes an input for seconds.
select_time(my_time, include_seconds: true)

# Generates a time select that defaults to the time in my_time, that has fields
# separated by ':' and includes an input for seconds.
select_time(my_time, time_separator: ':', include_seconds: true)

# Generate a time select field with hours in the AM/PM format
select_time(my_time, ampm: true)

# Generates a time select field with hours that range from 2 to 14
select_time(my_time, start_hour: 2, end_hour: 14)

# Generates a time select with a custom prompt. Use <tt>:prompt</tt> to true for generic prompts.
select_time(my_time, prompt: { day: 'Choose day', month: 'Choose month', year: 'Choose year' })
select_time(my_time, prompt: { hour: true }) # generic prompt for hours
select_time(my_time, prompt: true) # generic prompts for allSource:show|on GitHub# File actionview/lib/action_view/helpers/date_helper.rb, line 494defselect_time(datetime=Time.current,options= {},html_options= {})DateTimeSelector.new(datetime,options,html_options).select_timeendselect_year(date, options = {}, html_options = {})LinkReturns a select tag with options for each of the five years on each side of the current, which is selected. The five year radius can be changed using the:start_yearand:end_yearkeys in theoptions. Both ascending and descending year lists are supported by making:start_yearless than or greater than:end_year. Thedatecan also be substituted for a year given as a number. Override the field name using the:field_nameoption, âyearâ by default.# Generates a select field for years that defaults to the current year that
# has ascending year values.
select_year(Date.today, start_year: 1992, end_year: 2007)

# Generates a select field for years that defaults to the current year that
# is named 'birth' rather than 'year'.
select_year(Date.today, field_name: 'birth')

# Generates a select field for years that defaults to the current year that
# has descending year values.
select_year(Date.today, start_year: 2005, end_year: 1900)

# Generates a select field for years that defaults to the year 2006 that
# has ascending year values.
select_year(2006, start_year: 2000, end_year: 2010)

# Generates a select field for years with a custom prompt. Use <tt>prompt: true</tt> for a
# generic prompt.
select_year(14, prompt: 'Choose year')Source:show|on GitHub# File actionview/lib/action_view/helpers/date_helper.rb, line 671defselect_year(date,options= {},html_options= {})DateTimeSelector.new(date,options,html_options).select_yearendtime_ago_in_words(from_time, options = {})LinkLikedistance_of_time_in_words, but whereto_timeis fixed toTime.now.time_ago_in_words(3.minutes.from_now)                 # => 3 minutes
time_ago_in_words(3.minutes.ago)                      # => 3 minutes
time_ago_in_words(Time.now - 15.hours)                # => about 15 hours
time_ago_in_words(Time.now)                           # => less than a minute
time_ago_in_words(Time.now, include_seconds: true) # => less than 5 seconds

from_time = Time.now - 3.days - 14.minutes - 25.seconds
time_ago_in_words(from_time)      # => 3 days

from_time = (3.days + 14.minutes + 25.seconds).ago
time_ago_in_words(from_time)      # => 3 daysNote that you cannot pass aNumericvalue totime_ago_in_words.Also aliased as:distance_of_time_in_words_to_nowSource:show|on GitHub# File actionview/lib/action_view/helpers/date_helper.rb, line 176deftime_ago_in_words(from_time,options= {})distance_of_time_in_words(from_time,Time.now,options)endtime_select(object_name, method, options = {}, html_options = {})LinkReturns a set of select tags (one for hour, minute, and optionally second) pre-selected for accessing a specified time-based attribute (identified bymethod) on an object assigned to the template (identified byobject). You can include the seconds with:include_seconds. You can get hours in the AM/PM format with:ampmoption.This method will also generate 3 input hidden tags, for the actual year, month, and day unless the option:ignore_dateis set totrue. If you set the:ignore_datetotrue, you must have adate_selecton the same method within the form otherwise an exception will be raised.If anything is passed in the html_options hash it will be applied to every select tag in the set.# Creates a time select tag that, when POSTed, will be stored in the article variable in the sunrise attribute.
time_select("article", "sunrise")

# Creates a time select tag with a seconds field that, when POSTed, will be stored in the article variables in
# the sunrise attribute.
time_select("article", "start_time", include_seconds: true)

# You can set the <tt>:minute_step</tt> to 15 which will give you: 00, 15, 30, and 45.
time_select 'game', 'game_time', { minute_step: 15 }

# Creates a time select tag with a custom prompt. Use <tt>prompt: true</tt> for generic prompts.
time_select("article", "written_on", prompt: { hour: 'Choose hour', minute: 'Choose minute', second: 'Choose seconds' })
time_select("article", "written_on", prompt: { hour: true }) # generic prompt for hours
time_select("article", "written_on", prompt: true) # generic prompts for all

# You can set :ampm option to true which will show the hours as: 12 PM, 01 AM .. 11 PM.
time_select 'game', 'game_time', { ampm: true }

# You can set :ignore_date option to true which will remove the hidden inputs for day,
# month, and year that are set by default on this helper when you only want the time inputs
time_select 'game', 'game_time', { ignore_date: true }The selects are prepared for multi-parameter assignment to an Active Record object.Note: If the day is not included as an option but the month is, the day will be set to the 1st to ensure that all month choices are valid.Source:show|on GitHub# File actionview/lib/action_view/helpers/date_helper.rb, line 331deftime_select(object_name,method,options= {},html_options= {})Tags::TimeSelect.new(object_name,method,self,options,html_options).renderendtime_tag(date_or_time, *args, &block)LinkReturns an HTML time tag for the given date or time.time_tag Date.today  # =>
  <time datetime="2010-11-04">November 04, 2010</time>
time_tag Time.now  # =>
  <time datetime="2010-11-04T17:55:45+01:00">November 04, 2010 17:55</time>
time_tag Date.yesterday, 'Yesterday'  # =>
  <time datetime="2010-11-03">Yesterday</time>
time_tag Date.today, datetime: Date.today.strftime('%G-W%V') # =>
  <time datetime="2010-W44">November 04, 2010</time>

<%= time_tag Time.now do %>
  <span>Right now</span>
<% end %>
# => <time datetime="2010-11-04T17:55:45+01:00"><span>Right now</span></time>Source:show|on GitHub# File actionview/lib/action_view/helpers/date_helper.rb, line 690deftime_tag(date_or_time,*args,&block)options=args.extract_options!format=options.delete(:format)||:longcontent=args.first||I18n.l(date_or_time,format:format)content_tag("time",content,options.reverse_merge(datetime:date_or_time.iso8601),&block)end