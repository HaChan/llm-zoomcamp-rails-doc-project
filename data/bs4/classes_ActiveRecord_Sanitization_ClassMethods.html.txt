MethodsSsanitize_sql,sanitize_sql_array,sanitize_sql_for_assignment,sanitize_sql_for_conditions,sanitize_sql_for_order,sanitize_sql_hash_for_assignment,sanitize_sql_likeInstance Public methodssanitize_sql(condition)LinkAlias for:sanitize_sql_for_conditionssanitize_sql_array(ary)LinkAccepts an array of conditions. The array has each value sanitized and interpolated into the SQL statement. If using named bind variables in SQL statements where a colon is required verbatim use a backslash to escape.sanitize_sql_array(["name=? and group_id=?", "foo'bar", 4])
# => "name='foo''bar' and group_id=4"

sanitize_sql_array(["name=:name and group_id=:group_id", name: "foo'bar", group_id: 4])
# => "name='foo''bar' and group_id=4"

sanitize_sql_array(["TO_TIMESTAMP(:date, 'YYYY/MM/DD HH12\\:MI\\:SS')", date: "foo"])
# => "TO_TIMESTAMP('foo', 'YYYY/MM/DD HH12:MI:SS')"

sanitize_sql_array(["name='%s' and group_id='%s'", "foo'bar", 4])
# => "name='foo''bar' and group_id='4'"Note that this sanitization method is not schema-aware, hence wonât do any type casting and will directly use the database adapterâsquotemethod. For MySQL specifically this means that numeric parameters will be quoted as strings to prevent query manipulation attacks.sanitize_sql_array(["role = ?", 0])
# => "role = '0'"Source:show|on GitHub# File activerecord/lib/active_record/sanitization.rb, line 163defsanitize_sql_array(ary)statement,*values=aryifvalues.first.is_a?(Hash)&&/:\w+/.match?(statement)with_connectiondo|c|replace_named_bind_variables(c,statement,values.first)endelsifstatement.include?("?")with_connectiondo|c|replace_bind_variables(c,statement,values)endelsifstatement.blank?statementelsewith_connectiondo|c|statement%values.collect{|value|c.quote_string(value.to_s) }endendendsanitize_sql_for_assignment(assignments, default_table_name = table_name)LinkAccepts an array or hash of SQL conditions and sanitizes them into a valid SQL fragment for a SET clause.sanitize_sql_for_assignment(["name=? and group_id=?", nil, 4])
# => "name=NULL and group_id=4"

sanitize_sql_for_assignment(["name=:name and group_id=:group_id", name: nil, group_id: 4])
# => "name=NULL and group_id=4"

Post.sanitize_sql_for_assignment({ name: nil, group_id: 4 })
# => "`posts`.`name` = NULL, `posts`.`group_id` = 4"This method will NOT sanitize an SQL string since it wonât contain any conditions in it and will return the string as is.sanitize_sql_for_assignment("name=NULL and group_id='4'")
# => "name=NULL and group_id='4'"Note that this sanitization method is not schema-aware, hence wonât do any type casting and will directly use the database adapterâsquotemethod. For MySQL specifically this means that numeric parameters will be quoted as strings to prevent query manipulation attacks.sanitize_sql_for_assignment(["role = ?", 0])
# => "role = '0'"Source:show|on GitHub# File activerecord/lib/active_record/sanitization.rb, line 68defsanitize_sql_for_assignment(assignments,default_table_name=table_name)caseassignmentswhenArray;sanitize_sql_array(assignments)whenHash;sanitize_sql_hash_for_assignment(assignments,default_table_name)elseassignmentsendendsanitize_sql_for_conditions(condition)LinkAccepts an array of SQL conditions and sanitizes them into a valid SQL fragment for a WHERE clause.sanitize_sql_for_conditions(["name=? and group_id=?", "foo'bar", 4])
# => "name='foo''bar' and group_id=4"

sanitize_sql_for_conditions(["name=:name and group_id=:group_id", name: "foo'bar", group_id: 4])
# => "name='foo''bar' and group_id='4'"

sanitize_sql_for_conditions(["name='%s' and group_id='%s'", "foo'bar", 4])
# => "name='foo''bar' and group_id='4'"This method will NOT sanitize an SQL string since it wonât contain any conditions in it and will return the string as is.sanitize_sql_for_conditions("name='foo''bar' and group_id='4'")
# => "name='foo''bar' and group_id='4'"Note that this sanitization method is not schema-aware, hence wonât do any type casting and will directly use the database adapterâsquotemethod. For MySQL specifically this means that numeric parameters will be quoted as strings to prevent query manipulation attacks.sanitize_sql_for_conditions(["role = ?", 0])
# => "role = '0'"Also aliased as:sanitize_sqlSource:show|on GitHub# File activerecord/lib/active_record/sanitization.rb, line 33defsanitize_sql_for_conditions(condition)returnnilifcondition.blank?caseconditionwhenArray;sanitize_sql_array(condition)elseconditionendendsanitize_sql_for_order(condition)LinkAccepts an array, or string of SQL conditions and sanitizes them into a valid SQL fragment for an ORDER clause.sanitize_sql_for_order([Arel.sql("field(id, ?)"), [1,3,2]])
# => "field(id, 1,3,2)"

sanitize_sql_for_order("id ASC")
# => "id ASC"Source:show|on GitHub# File activerecord/lib/active_record/sanitization.rb, line 84defsanitize_sql_for_order(condition)ifcondition.is_a?(Array)&&condition.first.to_s.include?("?")disallow_raw_sql!(
      [condition.first],permit:adapter_class.column_name_with_order_matcher)# Ensure we aren't dealing with a subclass of String that might# override methods we use (e.g. Arel::Nodes::SqlLiteral).ifcondition.first.kind_of?(String)&&!condition.first.instance_of?(String)condition= [String.new(condition.first),*condition[1..-1]]endArel.sql(sanitize_sql_array(condition))elseconditionendendsanitize_sql_hash_for_assignment(attrs, table)LinkSanitizes a hash of attribute/value pairs into SQL conditions for a SET clause.sanitize_sql_hash_for_assignment({ status: nil, group_id: 1 }, "posts")
# => "`posts`.`status` = NULL, `posts`.`group_id` = 1"Source:show|on GitHub# File activerecord/lib/active_record/sanitization.rb, line 107defsanitize_sql_hash_for_assignment(attrs,table)c=connectionattrs.mapdo|attr,value|type=type_for_attribute(attr)value=type.serialize(type.cast(value))"#{c.quote_table_name_for_assignment(table, attr)} = #{c.quote(value)}"end.join(", ")endsanitize_sql_like(string, escape_character = "\\")LinkSanitizes astringso that it is safe to use within an SQL LIKE statement. This method usesescape_characterto escape all occurrences of itself, â_â and â%â.sanitize_sql_like("100% true!")
# => "100\\% true!"

sanitize_sql_like("snake_cased_string")
# => "snake\\_cased\\_string"

sanitize_sql_like("100% true!", "!")
# => "100!% true!!"

sanitize_sql_like("snake_cased_string", "!")
# => "snake!_cased!_string"Source:show|on GitHub# File activerecord/lib/active_record/sanitization.rb, line 131defsanitize_sql_like(string,escape_character="\\")ifstring.include?(escape_character)&&escape_character!="%"&&escape_character!="_"string=string.gsub(escape_character,'\0\0')endstring.gsub(/(?=[%_])/,escape_character)end