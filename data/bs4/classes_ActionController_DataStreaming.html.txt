Action Controller DataStreamingMethods for sending arbitrary data and for streaming files to the browser, instead of rendering.MethodsSsend_data,send_fileIncluded ModulesActionController::RenderingInstance Private methodssend_data(data, options = {})LinkSends the given binary data to the browser. This method is similar torender plain: data, but also allows you to specify whether the browser should display the response as a file attachment (i.e. in a download dialog) or as inline data. You may also set the content type, the file name, and other things.Options: *:filename- suggests a filename for the browser to use. *:type- specifies an HTTP content type. Defaults toapplication/octet-stream. You can specify either a string or a symbol for a registered type withMime::Type.register, for example:json. If omitted, type will be inferred from the file extension specified in:filename. If no content type is registered for the extension, the default typeapplication/octet-streamwill be used. *:disposition- specifies whether the file will be shown inline or downloaded. Valid values are"inline"and"attachment"(default). *:status- specifies the status code to send with the response. Defaults to 200.Generic data download:send_data bufferDownload a dynamically-generated tarball:send_data generate_tgz('dir'), filename: 'dir.tgz'Display an image Active Record in the browser:send_data image.data, type: image.content_type, disposition: 'inline'Seesend_filefor more information on HTTPContent-*headers and caching.Source:show|on GitHub# File actionpack/lib/action_controller/metal/data_streaming.rb, line 120defsend_data(data,options= {})# :doc:send_file_headers!optionsrenderoptions.slice(:status,:content_type).merge(body:data)endsend_file(path, options = {})LinkSends the file. This uses a server-appropriate method (such asX-Sendfile) via theRack::Sendfilemiddleware. The header to use is set viaconfig.action_dispatch.x_sendfile_header. Your server can also configure this for you by setting theX-Sendfile-Typeheader.Be careful to sanitize the path parameter if it is coming from a web page.send_file(params[:path])allows a malicious user to download any file on your server.Options: *:filename- suggests a filename for the browser to use. Defaults toFile.basename(path). *:type- specifies an HTTP content type. You can specify either a string or a symbol for a registered type withMime::Type.register, for example:json. If omitted, the type will be inferred from the file extension specified in:filename. If no content type is registered for the extension, the default typeapplication/octet-streamwill be used. *:disposition- specifies whether the file will be shown inline or downloaded. Valid values are"inline"and"attachment"(default). *:status- specifies the status code to send with the response. Defaults to 200. *:url_based_filename- set totrueif you want the browser to guess the filename from the URL, which is necessary for i18n filenames on certain browsers (setting:filenameoverrides this option).The defaultContent-TypeandContent-Dispositionheaders are set to download arbitrary binary files in as many browsers as possible. IE versions 4, 5, 5.5, and 6 are all known to have a variety of quirks (especially when downloading over SSL).Simple download:send_file '/path/to.zip'Show a JPEG in the browser:send_file '/path/to.jpeg', type: 'image/jpeg', disposition: 'inline'Show a 404 page in the browser:send_file '/path/to/404.html', type: 'text/html; charset=utf-8', disposition: 'inline', status: 404You can use otherContent-*HTTP headers to provide additional information to the client. See MDN for alist of HTTP headers.Also be aware that the document may be cached by proxies and browsers. ThePragmaandCache-Controlheaders declare how the file may be cached by intermediaries. They default to require clients to validate with the server before releasing cached responses. Seewww.mnot.net/cache_docs/ for an overview of web caching andRFC 9111for theCache-Controlheader spec.Source:show|on GitHub# File actionpack/lib/action_controller/metal/data_streaming.rb, line 76defsend_file(path,options= {})# :doc:raiseMissingFile,"Cannot read file #{path}"unlessFile.file?(path)&&File.readable?(path)options[:filename]||=File.basename(path)unlessoptions[:url_based_filename]send_file_headers!optionsself.status=options[:status]||200self.content_type=options[:content_type]ifoptions.key?(:content_type)response.send_filepathend