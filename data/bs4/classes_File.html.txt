MethodsAatomic_writeClass Public methodsatomic_write(file_name, temp_dir = dirname(file_name))LinkWrite to a file atomically. Useful for situations where you donât want other processes or threads to see half-written files.File.atomic_write('important.file') do |file|
  file.write('hello')
endThis method needs to create a temporary file. By default it will create it in the same directory as the destination file. If you donât like this behavior you can provide a different directory but it must be on the same physical filesystem as the file youâre trying to write.File.atomic_write('/data/something.important', '/data/tmp') do |file|
  file.write('hello')
endSource:show|on GitHub# File activesupport/lib/active_support/core_ext/file/atomic.rb, line 21defself.atomic_write(file_name,temp_dir=dirname(file_name))require"tempfile"unlessdefined?(Tempfile)Tempfile.open(".#{basename(file_name)}",temp_dir)do|temp_file|temp_file.binmodereturn_val=yieldtemp_filetemp_file.closeold_stat=ifexist?(file_name)# Get original file permissionsstat(file_name)else# If not possible, probe which are the default permissions in the# destination directory.probe_stat_in(dirname(file_name))endifold_stat# Set correct permissions on new filebeginchown(old_stat.uid,old_stat.gid,temp_file.path)# This operation will affect filesystem ACL'schmod(old_stat.mode,temp_file.path)rescueErrno::EPERM,Errno::EACCES# Changing file ownership failed, moving on.endend# Overwrite original file with temp filerename(temp_file.path,file_name)return_valendend