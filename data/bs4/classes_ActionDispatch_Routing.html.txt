The routing module provides URL rewriting in native Ruby. Itâs a way to redirect incoming requests to controllers and actions. This replaces mod_rewrite rules. Best of all, RailsâRoutingworks with any web server. Routes are defined inconfig/routes.rb.Think of creating routes as drawing a map for your requests. The map tells them where to go based on some predefined pattern:Rails.application.routes.draw do
  Pattern 1 tells some request to go to one place
  Pattern 2 tell them to go to another
  ...
endThe following symbols are special::controller maps to your controller name
:action     maps to an action with your controllersOther names simply map to a parameter as in the case of:id.ResourcesResource routing allows you to quickly declare all of the common routes for a given resourceful controller. Instead of declaring separate routes for yourindex,show,new,edit,create,update, anddestroyactions, a resourceful route declares them in a single line of code:resources :photosSometimes, you have a resource that clients always look up without referencing an ID. A common example, /profile always shows the profile of the currently logged in user. In this case, you can use a singular resource to map /profile (rather than /profile/:id) to the show action.resource :profileItâs common to have resources that are logically children of other resources:resources :magazines do
  resources :ads
endYou may wish to organize groups of controllers under a namespace. Most commonly, you might group a number of administrative controllers under anadminnamespace. You would place these controllers under theapp/controllers/admindirectory, and you can group them together in your router:namespace "admin" do
  resources :posts, :comments
endAlternatively, you can add prefixes to your path without using a separate directory by usingscope.scopetakes additional options which apply to all enclosed routes.scope path: "/cpanel", as: 'admin' do
  resources :posts, :comments
endFor more, seeRouting::Mapper::Resources#resources,Routing::Mapper::Scoping#namespace, andRouting::Mapper::Scoping#scope.Non-resourceful routesFor routes that donât fit theresourcesmold, you can use the HTTP helper methodsget,post,patch,putanddelete.get 'post/:id', to: 'posts#show'
post 'post/:id', to: 'posts#create_comment'Now, if you POST to/posts/:id, it will route to thecreate_commentaction. A GET on the same URL will route to theshowaction.If your route needs to respond to more than one HTTP method (or all methods) then using the:viaoption onmatchis preferable.match 'post/:id', to: 'posts#show', via: [:get, :post]Named routesRoutes can be named by passing an:asoption, allowing for easy reference within your source asname_of_route_urlfor the full URL andname_of_route_pathfor the URI path.Example:# In config/routes.rb
get '/login', to: 'accounts#login', as: 'login'

# With render, redirect_to, tests, etc.
redirect_to login_urlArguments can be passed as well.redirect_to show_item_path(id: 25)Userootas a shorthand to name a route for the root path â/â.# In config/routes.rb
root to: 'blogs#index'

# would recognize http://www.example.com/ as
params = { controller: 'blogs', action: 'index' }

# and provide these named routes
root_url   # => 'http://www.example.com/'
root_path  # => '/'Note: when usingcontroller, the route is simply named after the method you call on the block parameter rather than map.# In config/routes.rb
controller :blog do
  get 'blog/show'    => :list
  get 'blog/delete'  => :delete
  get 'blog/edit'    => :edit
end

# provides named routes for show, delete, and edit
link_to @article.title, blog_show_path(id: @article.id)Pretty URLsRoutes can generate pretty URLs. For example:get '/articles/:year/:month/:day', to: 'articles#find_by_id', constraints: {
  year:       /\d{4}/,
  month:      /\d{1,2}/,
  day:        /\d{1,2}/
}Using the route above, the URL âlocalhost:3000/articles/2005/11/06â maps toparams = {year: '2005', month: '11', day: '06'}Regular Expressions and parametersYou can specify a regular expression to define a format for a parameter.controller 'geocode' do
  get 'geocode/:postalcode', to: :show, constraints: {
    postalcode: /\d{5}(-\d{4})?/
  }
endConstraints can include the âignorecaseâ and âextended syntaxâ regular expression modifiers:controller 'geocode' do
  get 'geocode/:postalcode', to: :show, constraints: {
    postalcode: /hx\d\d\s\d[a-z]{2}/i
  }
end

controller 'geocode' do
  get 'geocode/:postalcode', to: :show, constraints: {
    postalcode: /# Postalcode format
       \d{5} #Prefix
       (-\d{4})? #Suffix
       /x
  }
endUsing the multiline modifier will raise anArgumentError. Encoding regular expression modifiers are silently ignored. The match will always use the default encoding or ASCII.External redirectsYou can redirect any path to another path using the redirect helper in your router:get "/stories", to: redirect("/posts")Unicode character routesYou can specify unicode character routes in your router:get "ããã«ã¡ã¯", to: "welcome#index"Routingto Rack ApplicationsInstead of aString, likeposts#index, which corresponds to the index action in the PostsController, you can specify any Rack application as the endpoint for a matcher:get "/application.js", to: SprocketsReloading routesYou can reload routes if you feel you must:Rails.application.reload_routes!This will clear all named routes and reload config/routes.rb if the file has been modified from last load. To absolutely force reloading, usereload!.Testing RoutesThe two main methods for testing your routes:assert_routingdef test_movie_route_properly_splits
  opts = {controller: "plugin", action: "checkout", id: "2"}
  assert_routing "plugin/checkout/2", opts
endassert_routinglets you test whether or not the route properly resolves into options.assert_recognizesdef test_route_has_options
  opts = {controller: "plugin", action: "show", id: "12"}
  assert_recognizes opts, "/plugins/show/12"
endNote the subtle difference between the two:assert_routingtests that a URL fits options whileassert_recognizestests that a URL breaks into parameters properly.In tests you can simply pass the URL or named route togetorpost.def send_to_jail
  get '/jail'
  assert_response :success
end

def goes_to_login
  get login_url
  #...
endView a list of all your routes$ bin/rails routesTarget a specific controller with-c, or grep routes using-g. Useful in conjunction with--expandedwhich displays routes vertically.NamespaceMODULEActionDispatch::Routing::ConsoleFormatterMODULEActionDispatch::Routing::PolymorphicRoutesMODULEActionDispatch::Routing::RedirectionMODULEActionDispatch::Routing::UrlForCLASSActionDispatch::Routing::HtmlTableFormatterCLASSActionDispatch::Routing::MapperCLASSActionDispatch::Routing::PathRedirectCLASSActionDispatch::Routing::RouteSet