NamespaceMODULEActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethodsMODULEActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatementsMODULEActiveRecord::ConnectionAdapters::PostgreSQL::OIDMODULEActiveRecord::ConnectionAdapters::PostgreSQL::QuotingMODULEActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatementsCLASSActiveRecord::ConnectionAdapters::PostgreSQL::AlterTableCLASSActiveRecord::ConnectionAdapters::PostgreSQL::TableCLASSActiveRecord::ConnectionAdapters::PostgreSQL::TableDefinitionCLASSActiveRecord::ConnectionAdapters::PostgreSQL::TypeMetadataConstantsExclusionConstraintDefinition=Struct.new(:table_name, :expression, :options) do
def name
options[:name]
end

def using
options[:using]
end

def where
options[:where]
end

def deferrable
options[:deferrable]
end

def export_name_on_schema_dump?
!ActiveRecord::SchemaDumper.excl_ignore_pattern.match?(name) if name
end
endUniqueConstraintDefinition=Struct.new(:table_name, :column, :options) do
def name
options[:name]
end

def deferrable
options[:deferrable]
end

def using_index
options[:using_index]
end

def export_name_on_schema_dump?
!ActiveRecord::SchemaDumper.unique_ignore_pattern.match?(name) if name
end

def defined_for?(name: nil, column: nil, **options)
(name.nil? || self.name == name.to_s) &&
(column.nil? || Array(self.column) == Array(column).map(&:to_s)) &&
options.all? { |k, v| self.options[k].to_s == v.to_s }
end
end