Active Record DatabaseTasksActiveRecord::Tasks::DatabaseTasksis a utility class, which encapsulates logic behind common tasks used to manage database and migrations.The tasks defined here are used with Rails commands provided by Active Record.In order to useDatabaseTasks, a few config values need to be set. All the needed config values are set by Rails already, so itâs necessary to do it only if you want to change the defaults or when you want to use Active Record outside of Rails (in such case after configuring the database tasks, you can also use the rake tasks defined in Active Record).The possible config values are:env: current environment (likeRails.env).database_configuration: configuration of your databases (as inconfig/database.yml).db_dir: yourdbdirectory.fixtures_path: a path to fixtures directory.migrations_paths: a list of paths to directories with migrations.seed_loader: an object which will load seeds, it needs to respond to theload_seedmethod.root: a path to the root of the application.Example usage ofDatabaseTasksoutside Rails could look as such:include ActiveRecord::Tasks
DatabaseTasks.database_configuration = YAML.load_file('my_database_config.yml')
DatabaseTasks.db_dir = 'db'
# other settings...

DatabaseTasks.create_current('production')MethodsCcache_dump_filename,charset,charset_current,check_protected_environments!,check_schema_file,check_target_version,clear_schema_cache,collation,collation_current,create,create_all,create_currentDdb_dir,drop,drop_all,drop_current,dump_schema_cacheEenvFfixtures_pathLload_schema_current,load_seedMmigrate,migrate_status,migrations_pathsNnamePprepare_all,purge,purge_all,purge_currentRregister_task,rootSschema_dump_path,schema_up_to_date?,seed_loader,structure_dump,structure_dump_flags,structure_load,structure_load_flagsTtarget_version,truncate_allConstantsLOCAL_HOSTS=["127.0.0.1", "localhost"]Attributes[RW]database_configuration[W]db_dir[W]env[W]fixtures_path[W]migrations_paths[W]root[W]seed_loaderClass Public methodsstructure_dump_flagsLinkExtra flags passed to database CLI tool (mysqldump/pg_dump) when calling db:schema:dump It can be used as a string/array (the typical case) or a hash (when you use multiple adapters) Example:ActiveRecord::Tasks::DatabaseTasks.structure_dump_flags = {
  mysql2: ['--no-defaults', '--skip-add-drop-table'],
  postgres: '--no-tablespaces'
}Source:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 50mattr_accessor:structure_dump_flags,instance_accessor:falsestructure_load_flagsLinkExtra flags passed to database CLI tool when calling db:schema:load It can be used as a string/array (the typical case) or a hash (when you use multiple adapters)Source:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 56mattr_accessor:structure_load_flags,instance_accessor:falseInstance Public methodscache_dump_filename(db_config_or_name, schema_cache_path: nil)LinkSource:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 449defcache_dump_filename(db_config_or_name,schema_cache_path:nil)ifdb_config_or_name.is_a?(DatabaseConfigurations::DatabaseConfig)schema_cache_path||db_config_or_name.schema_cache_path||schema_cache_env||db_config_or_name.default_schema_cache_path(ActiveRecord::Tasks::DatabaseTasks.db_dir)elseActiveRecord.deprecator.warn(<<~MSG.squish)Passing a database name to `cache_dump_filename` is deprecated and will be removed in Rails 8.0. Pass a
            `ActiveRecord::DatabaseConfigurations::DatabaseConfig` object instead.MSGfilename=ifActiveRecord::Base.configurations.primary?(db_config_or_name)"schema_cache.yml"else"#{db_config_or_name}_schema_cache.yml"endschema_cache_path||schema_cache_env||File.join(ActiveRecord::Tasks::DatabaseTasks.db_dir,filename)endendcharset(configuration, *arguments)LinkSource:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 313defcharset(configuration,*arguments)db_config=resolve_configuration(configuration)database_adapter_for(db_config,*arguments).charsetendcharset_current(env_name = env, db_name = name)LinkSource:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 308defcharset_current(env_name=env,db_name=name)db_config=configs_for(env_name:env_name,name:db_name)charset(db_config)endcheck_protected_environments!(environment = env)LinkSource:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 65defcheck_protected_environments!(environment=env)returnifENV["DISABLE_DATABASE_ENVIRONMENT_CHECK"]configs_for(env_name:environment).eachdo|db_config|check_current_protected_environment!(db_config)endendcheck_schema_file(filename)LinkSource:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 479defcheck_schema_file(filename)unlessFile.exist?(filename)message=+%{#{filename} doesn't exist yet. Run `bin/rails db:migrate` to create it, then try again.}message<<%{ If you do not intend to use a database, you should instead alter #{Rails.root}/config/application.rb to limit the frameworks that will be loaded.}ifdefined?(::Rails.root)Kernel.abortmessageendendcheck_target_version()LinkSource:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 298defcheck_target_versioniftarget_version&&!Migration.valid_version_format?(ENV["VERSION"])raise"Invalid format of target version: `VERSION=#{ENV['VERSION']}`"endendclear_schema_cache(filename)LinkSource:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 505defclear_schema_cache(filename)FileUtils.rm_ffilename,verbose:falseendcollation(configuration, *arguments)LinkSource:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 323defcollation(configuration,*arguments)db_config=resolve_configuration(configuration)database_adapter_for(db_config,*arguments).collationendcollation_current(env_name = env, db_name = name)LinkSource:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 318defcollation_current(env_name=env,db_name=name)db_config=configs_for(env_name:env_name,name:db_name)collation(db_config)endcreate(configuration, *arguments)LinkSource:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 115defcreate(configuration,*arguments)db_config=resolve_configuration(configuration)database_adapter_for(db_config,*arguments).create$stdout.puts"Created database '#{db_config.database}'"ifverbose?rescueDatabaseAlreadyExists$stderr.puts"Database '#{db_config.database}' already exists"ifverbose?rescueException=>error$stderr.putserror$stderr.puts"Couldn't create '#{db_config.database}' database. Please check your configuration."raiseendcreate_all()LinkSource:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 127defcreate_alldb_config=migration_connection.pool.db_configeach_local_configuration{|db_config|create(db_config) }migration_class.establish_connection(db_config)endcreate_current(environment = env, name = nil)LinkSource:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 170defcreate_current(environment=env,name=nil)each_current_configuration(environment,name) {|db_config|create(db_config) }migration_class.establish_connection(environment.to_sym)enddb_dir()LinkSource:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 83defdb_dir@db_dir||=Rails.application.config.paths["db"].firstenddrop(configuration, *arguments)LinkSource:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 212defdrop(configuration,*arguments)db_config=resolve_configuration(configuration)database_adapter_for(db_config,*arguments).drop$stdout.puts"Dropped database '#{db_config.database}'"ifverbose?rescueActiveRecord::NoDatabaseError$stderr.puts"Database '#{db_config.database}' does not exist"rescueException=>error$stderr.putserror$stderr.puts"Couldn't drop database '#{db_config.database}'"raiseenddrop_all()LinkSource:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 224defdrop_alleach_local_configuration{|db_config|drop(db_config) }enddrop_current(environment = env)LinkSource:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 228defdrop_current(environment=env)each_current_configuration(environment) {|db_config|drop(db_config) }enddump_schema_cache(conn_or_pool, filename)LinkDumps the schema cache in YAML format for the connection into the fileExamplesActiveRecord::Tasks::DatabaseTasks.dump_schema_cache(ActiveRecord::Base.lease_connection, "tmp/schema_dump.yaml")Source:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 501defdump_schema_cache(conn_or_pool,filename)conn_or_pool.schema_cache.dump_to(filename)endenv()LinkSource:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 103defenv@env||=Rails.envendfixtures_path()LinkSource:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 91deffixtures_path@fixtures_path||=ifENV["FIXTURES_PATH"]File.join(root,ENV["FIXTURES_PATH"])elseFile.join(root,"test","fixtures")endendload_schema_current(format = ActiveRecord.schema_format, file = nil, environment = env)LinkSource:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 471defload_schema_current(format=ActiveRecord.schema_format,file=nil,environment=env)each_current_configuration(environment)do|db_config|with_temporary_connection(db_config)doload_schema(db_config,format,file)endendendload_seed()LinkSource:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 487defload_seedifseed_loaderseed_loader.load_seedelseraise"You tried to load seed data, but no seed loader is specified. Please specify seed "\"loader with ActiveRecord::Tasks::DatabaseTasks.seed_loader = your_seed_loader\n"\"Seed loader should respond to load_seed method"endendmigrate(version = nil)LinkSource:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 245defmigrate(version=nil)scope=ENV["SCOPE"]verbose_was,Migration.verbose=Migration.verbose,verbose?check_target_versionmigration_connection_pool.migration_context.migrate(target_version)do|migration|ifversion.blank?scope.blank?||scope==migration.scopeelsemigration.version==versionendend.tapdo|migrations_ran|Migration.write("No migrations ran. (using #{scope} scope)")ifscope.present?&&migrations_ran.empty?endmigration_connection_pool.schema_cache.clear!ensureMigration.verbose=verbose_wasendmigrate_status()LinkSource:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 283defmigrate_statusunlessmigration_connection_pool.schema_migration.table_exists?Kernel.abort"Schema migrations table does not exist yet."end# outputputs"\ndatabase: #{migration_connection_pool.db_config.database}\n\n"puts"#{'Status'.center(8)}  #{'Migration ID'.ljust(14)}  Migration Name"puts"-"*50migration_connection_pool.migration_context.migrations_status.eachdo|status,version,name|puts"#{status.center(8)}  #{version.ljust(14)}  #{name}"endputsendmigrations_paths()LinkSource:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 87defmigrations_paths@migrations_paths||=Rails.application.paths["db/migrate"].to_aendname()LinkSource:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 107defname@name||="primary"endprepare_all()LinkSource:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 176defprepare_allseed=falseeach_current_configuration(env)do|db_config|with_temporary_pool(db_config)dobegindatabase_initialized=migration_connection_pool.schema_migration.table_exists?rescueActiveRecord::NoDatabaseErrorcreate(db_config)retryendunlessdatabase_initializedifFile.exist?(schema_dump_path(db_config))load_schema(db_config,ActiveRecord.schema_format,nil)endseed=trueendendendeach_current_environment(env)do|environment|db_configs_with_versions(environment).sort.eachdo|version,db_configs|db_configs.eachdo|db_config|with_temporary_pool(db_config)domigrate(version)dump_schema(db_config)ifActiveRecord.dump_schema_after_migrationendendendendload_seedifseedendpurge(configuration)LinkSource:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 328defpurge(configuration)db_config=resolve_configuration(configuration)database_adapter_for(db_config).purgeendpurge_all()LinkSource:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 333defpurge_alleach_local_configuration{|db_config|purge(db_config) }endpurge_current(environment = env)LinkSource:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 337defpurge_current(environment=env)each_current_configuration(environment) {|db_config|purge(db_config) }migration_class.establish_connection(environment.to_sym)endregister_task(pattern, task)LinkSource:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 73defregister_task(pattern,task)@tasks||={}@tasks[pattern] =taskendroot()LinkSource:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 99defroot@root||=Rails.rootendschema_dump_path(db_config, format = ActiveRecord.schema_format)LinkSource:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 436defschema_dump_path(db_config,format=ActiveRecord.schema_format)returnENV["SCHEMA"]ifENV["SCHEMA"]filename=db_config.schema_dump(format)returnunlessfilenameifFile.dirname(filename)==ActiveRecord::Tasks::DatabaseTasks.db_dirfilenameelseFile.join(ActiveRecord::Tasks::DatabaseTasks.db_dir,filename)endendschema_up_to_date?(configuration, format = ActiveRecord.schema_format, file = nil)LinkSource:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 378defschema_up_to_date?(configuration,format=ActiveRecord.schema_format,file=nil)db_config=resolve_configuration(configuration)file||=schema_dump_path(db_config)returntrueunlessfile&&File.exist?(file)with_temporary_pool(db_config)do|pool|internal_metadata=pool.internal_metadatareturnfalseunlessinternal_metadata.enabled?returnfalseunlessinternal_metadata.table_exists?internal_metadata[:schema_sha1]==schema_sha1(file)endendseed_loader()LinkSource:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 111defseed_loader@seed_loader||=Rails.applicationendstructure_dump(configuration, *arguments)LinkSource:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 343defstructure_dump(configuration,*arguments)db_config=resolve_configuration(configuration)filename=arguments.delete_at(0)flags=structure_dump_flags_for(db_config.adapter)database_adapter_for(db_config,*arguments).structure_dump(filename,flags)endstructure_load(configuration, *arguments)LinkSource:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 350defstructure_load(configuration,*arguments)db_config=resolve_configuration(configuration)filename=arguments.delete_at(0)flags=structure_load_flags_for(db_config.adapter)database_adapter_for(db_config,*arguments).structure_load(filename,flags)endtarget_version()LinkSource:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 304deftarget_versionENV["VERSION"].to_iifENV["VERSION"]&&!ENV["VERSION"].empty?endtruncate_all(environment = env)LinkSource:show|on GitHub# File activerecord/lib/active_record/tasks/database_tasks.rb, line 239deftruncate_all(environment=env)configs_for(env_name:environment).eachdo|db_config|truncate_tables(db_config)endend