Active Support Tagged LoggingWraps any standardLoggerobject to provide tagging capabilities.May be called with a block:logger = ActiveSupport::TaggedLogging.new(Logger.new(STDOUT))
logger.tagged('BCX') { logger.info 'Stuff' }                                  # Logs "[BCX] Stuff"
logger.tagged('BCX', "Jason") { |tagged_logger| tagged_logger.info 'Stuff' }  # Logs "[BCX] [Jason] Stuff"
logger.tagged('BCX') { logger.tagged('Jason') { logger.info 'Stuff' } }       # Logs "[BCX] [Jason] Stuff"If called without a block, a new logger will be returned with applied tags:logger = ActiveSupport::TaggedLogging.new(Logger.new(STDOUT))
logger.tagged("BCX").info "Stuff"                 # Logs "[BCX] Stuff"
logger.tagged("BCX", "Jason").info "Stuff"        # Logs "[BCX] [Jason] Stuff"
logger.tagged("BCX").tagged("Jason").info "Stuff" # Logs "[BCX] [Jason] Stuff"This is used by the defaultRails.loggeras configured by Railties to make it easy to stamp log lines with subdomains, request ids, and anything else to aid debugging of multi-user production applications.MethodsFflushNnewTtaggedClass Public methodsnew(logger)LinkSource:show|on GitHub# File activesupport/lib/active_support/tagged_logging.rb, line 116defself.new(logger)logger=logger.cloneiflogger.formatterlogger.formatter=logger.formatter.clone# Workaround for https://bugs.ruby-lang.org/issues/20250# Can be removed when Ruby 3.4 is the least supported version.logger.formatter.object_idiflogger.formatter.is_a?(Proc)else# Ensure we set a default formatter so we aren't extending nil!logger.formatter=ActiveSupport::Logger::SimpleFormatter.newendlogger.formatter.extendFormatterlogger.extend(self)endInstance Public methodsflush()LinkSource:show|on GitHub# File activesupport/lib/active_support/tagged_logging.rb, line 147defflushclear_tags!superifdefined?(super)endtagged(*tags)LinkSource:show|on GitHub# File activesupport/lib/active_support/tagged_logging.rb, line 136deftagged(*tags)ifblock_given?formatter.tagged(*tags) {yieldself}elselogger=ActiveSupport::TaggedLogging.new(self)logger.formatter.extendLocalTagStoragelogger.push_tags(*formatter.current_tags,*tags)loggerendend