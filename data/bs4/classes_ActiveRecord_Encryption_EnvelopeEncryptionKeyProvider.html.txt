Implements a simple envelope encryption approach where:It generates a random data-encryption key for each encryption operation.It stores the generated key along with the encrypted payload. It encrypts this key with the master key provided in theactive_record_encryption.primary_keycredential.This provider can work with multiple master keys. It will use the last one for encrypting.Whenconfig.active_record.encryption.store_key_referencesis true, it will also store a reference to the specific master key that was used to encrypt the data-encryption key. When not set, it will try all the configured master keys looking for the right one, in order to return the right decryption key.MethodsAactive_primary_keyDdecryption_keysEencryption_keyInstance Public methodsactive_primary_key()LinkSource:show|on GitHub# File activerecord/lib/active_record/encryption/envelope_encryption_key_provider.rb, line 31defactive_primary_key@active_primary_key||=primary_key_provider.encryption_keyenddecryption_keys(encrypted_message)LinkSource:show|on GitHub# File activerecord/lib/active_record/encryption/envelope_encryption_key_provider.rb, line 26defdecryption_keys(encrypted_message)secret=decrypt_data_key(encrypted_message)secret?[ActiveRecord::Encryption::Key.new(secret)]:[]endencryption_key()LinkSource:show|on GitHub# File activerecord/lib/active_record/encryption/envelope_encryption_key_provider.rb, line 18defencryption_keyrandom_secret=generate_random_secretActiveRecord::Encryption::Key.new(random_secret).tapdo|key|key.public_tags.encrypted_data_key=encrypt_data_key(random_secret)key.public_tags.encrypted_data_key_id=active_primary_key.idifActiveRecord::Encryption.config.store_key_referencesendend