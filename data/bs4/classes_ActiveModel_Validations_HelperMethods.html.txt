MethodsVvalidates_absence_of,validates_acceptance_of,validates_comparison_of,validates_confirmation_of,validates_exclusion_of,validates_format_of,validates_inclusion_of,validates_length_of,validates_numericality_of,validates_presence_of,validates_size_ofInstance Public methodsvalidates_absence_of(*attr_names)LinkValidates that the specified attributes are blank (as defined byObject#present?).class Person < ActiveRecord::Base
  validates_absence_of :first_name
endThe first_name attribute must be in the object and it must be blank.Configuration options::message- A custom error message (default is: âmust be blankâ).There is also a list of default options supported by every validator::if,:unless,:on,:allow_nil,:allow_blank, and:strict. SeeActiveModel::Validations::ClassMethods#validatesfor more information.Source:show|on GitHub# File activemodel/lib/active_model/validations/absence.rb, line 28defvalidates_absence_of(*attr_names)validates_withAbsenceValidator,_merge_attributes(attr_names)endvalidates_acceptance_of(*attr_names)LinkEncapsulates the pattern of wanting to validate the acceptance of a terms of service check box (or similar agreement).class Person < ActiveRecord::Base
  validates_acceptance_of :terms_of_service
  validates_acceptance_of :eula, message: 'must be abided'
endIf the database column does not exist, theterms_of_serviceattribute is entirely virtual. This check is performed only ifterms_of_serviceis notnil.Configuration options::message- A custom error message (default is: âmust be acceptedâ).:accept- Specifies a value that is considered accepted. Also accepts an array of possible values. The default value is an array [â1â, true], which makes it easy to relate to an HTML checkbox. This should be set to, or include,trueif you are validating a database column, since the attribute is typecast from â1â totruebefore validation.There is also a list of default options supported by every validator::if,:unless,:on,:allow_nil,:allow_blank, and:strict. SeeActiveModel::Validations::ClassMethods#validatesfor more information.Source:show|on GitHub# File activemodel/lib/active_model/validations/acceptance.rb, line 108defvalidates_acceptance_of(*attr_names)validates_withAcceptanceValidator,_merge_attributes(attr_names)endvalidates_comparison_of(*attr_names)LinkValidates the value of a specified attribute fulfills all defined comparisons with another value, proc, or attribute.class Person < ActiveRecord::Base
  validates_comparison_of :value, greater_than: 'the sum of its parts'
endConfiguration options::message- A custom error message (default is: âfailed comparisonâ).:greater_than- Specifies the value must be greater than the supplied value. The default error message for this option is _âmust be greater than %{count}â_.:greater_than_or_equal_to- Specifies the value must be greater than or equal to the supplied value. The default error message for this option is _âmust be greater than or equal to %{count}â_.:equal_to- Specifies the value must be equal to the supplied value. The default error message for this option is _âmust be equal to %{count}â_.:less_than- Specifies the value must be less than the supplied value. The default error message for this option is _âmust be less than %{count}â_.:less_than_or_equal_to- Specifies the value must be less than or equal to the supplied value. The default error message for this option is _âmust be less than or equal to %{count}â_.:other_than- Specifies the value must not be equal to the supplied value. The default error message for this option is _âmust be other than %{count}â_.There is also a list of default options supported by every validator::if,:unless,:on,:allow_nil,:allow_blank, and:strict. SeeActiveModel::Validations::ClassMethods#validatesfor more information.The validator requires at least one of the following checks to be supplied. Each will accept a proc, value, or a symbol which corresponds to a method::greater_than:greater_than_or_equal_to:equal_to:less_than:less_than_or_equal_to:other_thanFor example:class Person < ActiveRecord::Base
  validates_comparison_of :birth_date, less_than_or_equal_to: -> { Date.today }
  validates_comparison_of :preferred_name, other_than: :given_name, allow_nil: true
endSource:show|on GitHub# File activemodel/lib/active_model/validations/comparison.rb, line 85defvalidates_comparison_of(*attr_names)validates_withComparisonValidator,_merge_attributes(attr_names)endvalidates_confirmation_of(*attr_names)LinkEncapsulates the pattern of wanting to validate a password or email address field with a confirmation.Model:
  class Person < ActiveRecord::Base
    validates_confirmation_of :user_name, :password
    validates_confirmation_of :email_address,
                              message: 'should match confirmation'
  end

View:
  <%= password_field "person", "password" %>
  <%= password_field "person", "password_confirmation" %>The addedpassword_confirmationattribute is virtual; it exists only as an in-memory attribute for validating the password. To achieve this, the validation adds accessors to the model for the confirmation attribute.NOTE: This check is performed only ifpassword_confirmationis notnil. To require confirmation, make sure to add a presence check for the confirmation attribute:validates_presence_of :password_confirmation, if: :password_changed?Configuration options::message- A custom error message (default is: âdoesnât match%{translated_attribute_name}â).:case_sensitive- Looks for an exact match. Ignored by non-text columns (trueby default).There is also a list of default options supported by every validator::if,:unless,:on,:allow_nil,:allow_blank, and:strict. SeeActiveModel::Validations::ClassMethods#validatesfor more information.Source:show|on GitHub# File activemodel/lib/active_model/validations/confirmation.rb, line 75defvalidates_confirmation_of(*attr_names)validates_withConfirmationValidator,_merge_attributes(attr_names)endvalidates_exclusion_of(*attr_names)LinkValidates that the value of the specified attribute is not in a particular enumerable object.class Person < ActiveRecord::Base
  validates_exclusion_of :username, in: %w( admin superuser ), message: "You don't belong here"
  validates_exclusion_of :age, in: 30..60, message: 'This site is only for under 30 and over 60'
  validates_exclusion_of :format, in: %w( mov avi ), message: "extension %{value} is not allowed"
  validates_exclusion_of :password, in: ->(person) { [person.username, person.first_name] },
                         message: 'should not be the same as your username or first name'
  validates_exclusion_of :karma, in: :reserved_karmas
endConfiguration options::in- An enumerable object of items that the value shouldnât be part of. This can be supplied as a proc, lambda, or symbol which returns an enumerable. If the enumerable is a numerical, time, or datetime range the test is performed withRange#cover?, otherwise withinclude?. When using a proc or lambda the instance under validation is passed as an argument.:within- A synonym(or alias) for:inRange#cover?, otherwise withinclude?.:message- Specifies a custom error message (default is: âis reservedâ).There is also a list of default options supported by every validator::if,:unless,:on,:allow_nil,:allow_blank, and:strict. SeeActiveModel::Validations::ClassMethods#validatesfor more information.Source:show|on GitHub# File activemodel/lib/active_model/validations/exclusion.rb, line 44defvalidates_exclusion_of(*attr_names)validates_withExclusionValidator,_merge_attributes(attr_names)endvalidates_format_of(*attr_names)LinkValidates whether the value of the specified attribute is of the correct form, going by the regular expression provided. You can require that the attribute matches the regular expression:class Person < ActiveRecord::Base
  validates_format_of :email, with: /\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\z/i, on: :create
endAlternatively, you can require that the specified attribute doesnotmatch the regular expression:class Person < ActiveRecord::Base
  validates_format_of :email, without: /NOSPAM/
endYou can also provide a proc or lambda which will determine the regular expression that will be used to validate the attribute.class Person < ActiveRecord::Base
  # Admin can have number as a first letter in their screen name
  validates_format_of :screen_name,
                      with: ->(person) { person.admin? ? /\A[a-z0-9][a-z0-9_\-]*\z/i : /\A[a-z][a-z0-9_\-]*\z/i }
endNote: use\Aand\zto match the start and end of the string,^and$match the start/end of a line.Due to frequent misuse of^and$, you need to pass themultiline: trueoption in case you use any of these two anchors in the provided regular expression. In most cases, you should be using\Aand\z.You must pass either:withor:withoutas an option. In addition, both must be a regular expression or a proc or lambda, or else an exception will be raised.Configuration options::message- A custom error message (default is: âis invalidâ).:with- Regular expression that if the attribute matches will result in a successful validation. This can be provided as a proc or lambda returning regular expression which will be called at runtime.:without- Regular expression that if the attribute does not match will result in a successful validation. This can be provided as a proc or lambda returning regular expression which will be called at runtime.:multiline- Set to true if your regular expression contains anchors that match the beginning or end of lines as opposed to the beginning or end of the string. These anchors are^and$.There is also a list of default options supported by every validator::if,:unless,:on,:allow_nil,:allow_blank, and:strict. SeeActiveModel::Validations::ClassMethods#validatesfor more information.Source:show|on GitHub# File activemodel/lib/active_model/validations/format.rb, line 107defvalidates_format_of(*attr_names)validates_withFormatValidator,_merge_attributes(attr_names)endvalidates_inclusion_of(*attr_names)LinkValidates whether the value of the specified attribute is available in a particular enumerable object.class Person < ActiveRecord::Base
  validates_inclusion_of :role, in: %w( admin contributor )
  validates_inclusion_of :age, in: 0..99
  validates_inclusion_of :format, in: %w( jpg gif png ), message: "extension %{value} is not included in the list"
  validates_inclusion_of :states, in: ->(person) { STATES[person.country] }
  validates_inclusion_of :karma, in: :available_karmas
endConfiguration options::in- An enumerable object of available items. This can be supplied as a proc, lambda, or symbol which returns an enumerable. If the enumerable is a numerical, time, or datetime range the test is performed withRange#cover?, otherwise withinclude?. When using a proc or lambda the instance under validation is passed as an argument.:within- A synonym(or alias) for:in:message- Specifies a custom error message (default is: âis not included in the listâ).There is also a list of default options supported by every validator::if,:unless,:on,:allow_nil,:allow_blank, and:strict. SeeActiveModel::Validations::ClassMethods#validatesfor more information.Source:show|on GitHub# File activemodel/lib/active_model/validations/inclusion.rb, line 42defvalidates_inclusion_of(*attr_names)validates_withInclusionValidator,_merge_attributes(attr_names)endvalidates_length_of(*attr_names)LinkValidates that the specified attributes match the length restrictions supplied. Only one constraint option can be used at a time apart from:minimumand:maximumthat can be combined together:class Person < ActiveRecord::Base
  validates_length_of :first_name, maximum: 30
  validates_length_of :last_name, maximum: 30, message: "less than 30 if you don't mind"
  validates_length_of :fax, in: 7..32, allow_nil: true
  validates_length_of :phone, in: 7..32, allow_blank: true
  validates_length_of :user_name, within: 6..20, too_long: 'pick a shorter name', too_short: 'pick a longer name'
  validates_length_of :zip_code, minimum: 5, too_short: 'please enter at least 5 characters'
  validates_length_of :smurf_leader, is: 4, message: "papa is spelled with 4 characters... don't play me."
  validates_length_of :words_in_essay, minimum: 100, too_short: 'Your essay must be at least 100 words.'

  private
    def words_in_essay
      essay.scan(/\w+/)
    end
endConstraint options::minimum- The minimum size of the attribute.:maximum- The maximum size of the attribute. Allowsnilby default if not used with:minimum.:is- The exact size of the attribute.:within- A range specifying the minimum and maximum size of the attribute.:in- A synonym (or alias) for:within.Other options::allow_nil- Attribute may benil; skip validation.:allow_blank- Attribute may be blank; skip validation.:too_long- The error message if the attribute goes over the maximum (default is: âis too long (maximum is %{count} characters)â).:too_short- The error message if the attribute goes under the minimum (default is: âis too short (minimum is %{count} characters)â).:wrong_length- The error message if using the:ismethod and the attribute is the wrong size (default is: âis the wrong length (should be %{count} characters)â).:message- The error message to use for a:minimum,:maximum, or:isviolation. An alias of the appropriatetoo_long/too_short/wrong_lengthmessage.There is also a list of default options supported by every validator::if,:unless,:on, and:strict. SeeActiveModel::Validations::ClassMethods#validatesfor more information.Also aliased as:validates_size_ofSource:show|on GitHub# File activemodel/lib/active_model/validations/length.rb, line 123defvalidates_length_of(*attr_names)validates_withLengthValidator,_merge_attributes(attr_names)endvalidates_numericality_of(*attr_names)LinkValidates whether the value of the specified attribute is numeric by trying to convert it to a float withKernel.Float(ifonly_integerisfalse) or applying it to the regular expression/\A[+\-]?\d+\z/(ifonly_integeris set totrue). Precision ofKernel.Floatvalues are guaranteed up to 15 digits.class Person < ActiveRecord::Base
  validates_numericality_of :value, on: :create
endConfiguration options::message- A custom error message (default is: âis not a numberâ).:only_integer- Specifies whether the value has to be an integer (default isfalse).:only_numeric- Specifies whether the value has to be an instance ofNumeric(default isfalse). The default behavior is to attempt parsing the value if it is aString.:allow_nil- Skip validation if attribute isnil(default isfalse). Notice that forIntegerandFloatcolumns empty strings are converted tonil.:greater_than- Specifies the value must be greater than the supplied value. The default error message for this option is _âmust be greater than %{count}â_.:greater_than_or_equal_to- Specifies the value must be greater than or equal the supplied value. The default error message for this option is _âmust be greater than or equal to %{count}â_.:equal_to- Specifies the value must be equal to the supplied value. The default error message for this option is _âmust be equal to %{count}â_.:less_than- Specifies the value must be less than the supplied value. The default error message for this option is _âmust be less than %{count}â_.:less_than_or_equal_to- Specifies the value must be less than or equal the supplied value. The default error message for this option is _âmust be less than or equal to %{count}â_.:other_than- Specifies the value must be other than the supplied value. The default error message for this option is _âmust be other than %{count}â_.:odd- Specifies the value must be an odd number. The default error message for this option is _âmust be oddâ_.:even- Specifies the value must be an even number. The default error message for this option is _âmust be evenâ_.:in- Check that the value is within a range. The default error message for this option is _âmust be in %{count}â_.There is also a list of default options supported by every validator::if,:unless,:on,:allow_nil,:allow_blank, and:strict. SeeActiveModel::Validations::ClassMethods#validatesfor more information.The following checks can also be supplied with a proc or a symbol which corresponds to a method::greater_than:greater_than_or_equal_to:equal_to:less_than:less_than_or_equal_to:only_integer:other_thanFor example:class Person < ActiveRecord::Base
  validates_numericality_of :width, less_than: ->(person) { person.height }
  validates_numericality_of :width, greater_than: :minimum_weight
endSource:show|on GitHub# File activemodel/lib/active_model/validations/numericality.rb, line 217defvalidates_numericality_of(*attr_names)validates_withNumericalityValidator,_merge_attributes(attr_names)endvalidates_presence_of(*attr_names)LinkValidates that the specified attributes are not blank (as defined byObject#blank?).class Person < ActiveRecord::Base
  validates_presence_of :first_name
endThe first_name attribute must be in the object and it cannot be blank.If you want to validate the presence of a boolean field (where the real values aretrueandfalse), you will want to usevalidates_inclusion_of :field_name, in: [true, false].This is due to the wayObject#blank?handles boolean values:false.blank? # => true.Configuration options::message- A custom error message (default is: âcanât be blankâ).There is also a list of default options supported by every validator::if,:unless,:on,:allow_nil,:allow_blank, and:strict. SeeActiveModel::Validations::ClassMethods#validatesfor more information.Source:show|on GitHub# File activemodel/lib/active_model/validations/presence.rb, line 34defvalidates_presence_of(*attr_names)validates_withPresenceValidator,_merge_attributes(attr_names)endvalidates_size_of(*attr_names)LinkAlias for:validates_length_of