Implements the logic behindRails::Command::NotesCommand. Seerails notes --helpfor usage information.Annotationobjects are triplets:line,:tag,:textthat represent the line where the annotation lives, its tag, and its text. Note the filename is not stored.Annotations are looked for in comments and modulus whitespace they have to start with the tag optionally followed by a colon. Everything up to the end of the line (or closingERBcomment tag) is considered to be their text.NamespaceCLASSRails::SourceAnnotationExtractor::AnnotationCLASSRails::SourceAnnotationExtractor::ParserExtractorCLASSRails::SourceAnnotationExtractor::PatternExtractorMethodsDdisplayEenumerateFfind,find_inNnewAttributes[R]tagClass Public methodsenumerate(tag = nil, options = {})LinkPrints all annotations with tagtagunder the root directoriesapp,config,db,lib, andtest(recursively).Iftagisnil, annotations with either default or registered tags are printed.Specific directories can be explicitly set using the:dirskey inoptions.Rails::SourceAnnotationExtractor.enumerate 'TODO|FIXME', dirs: %w(app lib), tag: trueIfoptionshas a:tagflag, it will be passed to each annotationâsto_s.SeeSourceAnnotationExtractor#find_infor a list of file extensions that will be taken into account.This class method is the single entry point for therails notescommand.Source:show|on GitHub# File railties/lib/rails/source_annotation_extractor.rb, line 128defself.enumerate(tag=nil,options= {})tag||=Annotation.tags.join("|")extractor=new(tag)dirs=options.delete(:dirs)||Annotation.directoriesextractor.display(extractor.find(dirs),options)endnew(tag)LinkSource:show|on GitHub# File railties/lib/rails/source_annotation_extractor.rb, line 137definitialize(tag)@tag=tagendInstance Public methodsdisplay(results, options = {})LinkPrints the mapping from filenames to annotations inresultsordered by filename. Theoptionshash is passed to each annotationâsto_s.Source:show|on GitHub# File railties/lib/rails/source_annotation_extractor.rb, line 186defdisplay(results,options= {})options[:indent] =results.flat_map{|f,a|a.map(&:line) }.max.to_s.sizeresults.keys.sort.eachdo|file|puts"#{file}:"results[file].eachdo|note|puts"  * #{note.to_s(options)}"endputsendendfind(dirs)LinkReturns a hash that maps filenames underdirs(recursively) to arrays with their annotations.Source:show|on GitHub# File railties/lib/rails/source_annotation_extractor.rb, line 143deffind(dirs)dirs.inject({}) {|h,dir|h.update(find_in(dir)) }endfind_in(dir)LinkReturns a hash that maps filenames underdir(recursively) to arrays with their annotations. Files with extensions registered inRails::SourceAnnotationExtractor::Annotation.extensionsare taken into account. Only files with annotations are included.Source:show|on GitHub# File railties/lib/rails/source_annotation_extractor.rb, line 151deffind_in(dir)results= {}Dir.glob("#{dir}/*")do|item|nextifFile.basename(item).start_with?(".")ifFile.directory?(item)results.update(find_in(item))elseextension=Annotation.extensions.detectdo|regexp,_block|regexp.match(item)endifextensionpattern=extension.last.call(tag)# In case a user-defined pattern returns nothing for the given set# of tags, we exit early.nextunlesspattern# If a user-defined pattern returns a regular expression, we will# wrap it in a PatternExtractor to keep the same API.pattern=PatternExtractor.new(pattern)ifpattern.is_a?(Regexp)annotations=pattern.annotations(item)results.update(item=>annotations)ifannotations.any?endendendresultsend