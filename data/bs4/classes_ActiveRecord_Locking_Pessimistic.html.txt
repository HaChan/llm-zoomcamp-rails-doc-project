Pessimistic LockingLocking::Pessimisticprovides support for row-level locking using SELECT â¦ FOR UPDATE and other lock types.ChainActiveRecord::Base#findtoActiveRecord::QueryMethods#lockto obtain an exclusive lock on the selected rows:# select * from accounts where id=1 for update
Account.lock.find(1)Calllock('some locking clause')to use a database-specific locking clause of your own such as âLOCK IN SHARE MODEâ or âFOR UPDATE NOWAITâ. Example:Account.transaction do
  # select * from accounts where name = 'shugo' limit 1 for update nowait
  shugo = Account.lock("FOR UPDATE NOWAIT").find_by(name: "shugo")
  yuko = Account.lock("FOR UPDATE NOWAIT").find_by(name: "yuko")
  shugo.balance -= 100
  shugo.save!
  yuko.balance += 100
  yuko.save!
endYou can also useActiveRecord::Base#lock!method to lock one record by id. This may be better if you donât need to lock every row. Example:Account.transaction do
  # select * from accounts where ...
  accounts = Account.where(...)
  account1 = accounts.detect { |account| ... }
  account2 = accounts.detect { |account| ... }
  # select * from accounts where id=? for update
  account1.lock!
  account2.lock!
  account1.balance -= 100
  account1.save!
  account2.balance += 100
  account2.save!
endYou can start a transaction and acquire the lock in one go by callingwith_lockwith a block. The block is called from within a transaction, the object is already locked. Example:account = Account.first
account.with_lock do
  # This block is called within a transaction,
  # account is already locked.
  account.balance -= 100
  account.save!
endDatabase-specific information on row locking:MySQLdev.mysql.com/doc/refman/en/innodb-locking-reads.htmlPostgreSQLwww.postgresql.org/docs/current/interactive/sql-select.html#SQL-FOR-UPDATE-SHAREMethodsLlock!Wwith_lockInstance Public methodslock!(lock = true)LinkObtain a row lock on this record. Reloads the record to obtain the requested lock. Pass an SQL locking clause to append the end of the SELECT statement or pass true for âFOR UPDATEâ (the default, an exclusive row lock). Returns the locked record.Source:show|on GitHub# File activerecord/lib/active_record/locking/pessimistic.rb, line 69deflock!(lock=true)ifpersisted?ifhas_changes_to_save?raise(<<-MSG.squish)Locking a record with unpersisted changes is not supported. Use
              `save` to persist the changes, or `reload` to discard them
              explicitly.
              Changed attributes: #{changed.map(&:inspect).join(', ')}.MSGendreload(lock:lock)endselfendwith_lock(*args)LinkWraps the passed block in a transaction, reloading the object with a lock before yielding. You can pass the SQL locking clause as an optional argument (seelock!).You can also pass options likerequires_new:,isolation:, andjoinable:to the wrapping transaction (seeActiveRecord::ConnectionAdapters::DatabaseStatements#transaction).Source:show|on GitHub# File activerecord/lib/active_record/locking/pessimistic.rb, line 92defwith_lock(*args)transaction_opts=args.extract_options!lock=args.present??args.first:truetransaction(**transaction_opts)dolock!(lock)yieldendend