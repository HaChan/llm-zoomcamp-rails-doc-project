NamespaceMODULEActionController::TestCase::Behavior::ClassMethodsMethodsBbuild_responseCcontroller_class_nameDdeleteGgenerated_path,getHheadPpatch,post,process,putQquery_parameter_namesSsetup_controller_request_and_responseIncluded ModulesActionDispatch::TestProcessActiveSupport::Testing::ConstantLookupRails::Dom::Testing::AssertionsActionDispatch::AssertionsAttributes[R]request[R]responseInstance Public methodsbuild_response(klass)LinkSource:show|on GitHub# File actionpack/lib/action_controller/test_case.rb, line 584defbuild_response(klass)klass.createendcontroller_class_name()LinkSource:show|on GitHub# File actionpack/lib/action_controller/test_case.rb, line 544defcontroller_class_name@controller.class.anonymous??"anonymous":@controller.class.controller_pathenddelete(action, **args)LinkSimulate a DELETE request with the given parameters and set/volley the response. Seegetfor more details.Source:show|on GitHub# File actionpack/lib/action_controller/test_case.rb, line 455defdelete(action,**args)process(action,method:"DELETE",**args)endgenerated_path(generated_extras)LinkSource:show|on GitHub# File actionpack/lib/action_controller/test_case.rb, line 548defgenerated_path(generated_extras)generated_extras[0]endget(action, **args)LinkSimulate a GET request with the given parameters.action: The controller action to call.params: The hash with HTTP parameters that you want to pass. This may benil.body: The request body with a string that is appropriately encoded (application/x-www-form-urlencodedormultipart/form-data).session: A hash of parameters to store in the session. This may benil.flash: A hash of parameters to store in the flash. This may benil.You can also simulate POST, PATCH, PUT, DELETE, and HEAD requests withpost,patch,put,delete, andhead. Example sending parameters, session, and setting a flash message:get :show,
  params: { id: 7 },
  session: { user_id: 1 },
  flash: { notice: 'This is flash message' }Note that the request method is not verified. The different methods are available to make the tests more expressive.Source:show|on GitHub# File actionpack/lib/action_controller/test_case.rb, line 429defget(action,**args)res=process(action,method:"GET",**args)cookies.updateres.cookiesresendhead(action, **args)LinkSimulate a HEAD request with the given parameters and set/volley the response. Seegetfor more details.Source:show|on GitHub# File actionpack/lib/action_controller/test_case.rb, line 461defhead(action,**args)process(action,method:"HEAD",**args)endpatch(action, **args)LinkSimulate a PATCH request with the given parameters and set/volley the response. Seegetfor more details.Source:show|on GitHub# File actionpack/lib/action_controller/test_case.rb, line 443defpatch(action,**args)process(action,method:"PATCH",**args)endpost(action, **args)LinkSimulate a POST request with the given parameters and set/volley the response. Seegetfor more details.Source:show|on GitHub# File actionpack/lib/action_controller/test_case.rb, line 437defpost(action,**args)process(action,method:"POST",**args)endprocess(action, method: "GET", params: nil, session: nil, body: nil, flash: {}, format: nil, xhr: false, as: nil)LinkSimulate an HTTP request toactionby specifying request method, parameters and set/volley the response.action: The controller action to call.method: Request method used to send the HTTP request. Possible values areGET,POST,PATCH,PUT,DELETE,HEAD. Defaults toGET. Can be a symbol.params: The hash with HTTP parameters that you want to pass. This may benil.body: The request body with a string that is appropriately encoded (application/x-www-form-urlencodedormultipart/form-data).session: A hash of parameters to store in the session. This may benil.flash: A hash of parameters to store in the flash. This may benil.format: Request format. Defaults tonil. Can be string or symbol.as: Content type. Defaults tonil. Must be a symbol that corresponds to a mime type.Example callingcreateaction and sending two params:process :create,
  method: 'POST',
  params: {
    user: { name: 'Gaurish Sharma', email: 'user@example.com' }
  },
  session: { user_id: 1 },
  flash: { notice: 'This is flash message' }To simulateGET,POST,PATCH,PUT,DELETE, andHEADrequests prefer usingget,post,patch,put,deleteandheadmethods respectively which will make tests more expressive.Itâs not recommended to make more than one request in the same test. Instance variables that are set in one request will not persist to the next request, but itâs not guaranteed that allRailsinternal state will be reset. PreferActionDispatch::IntegrationTestfor making multiple requests in the same test.Note that the request method is not verified.Source:show|on GitHub# File actionpack/lib/action_controller/test_case.rb, line 504defprocess(action,method:"GET",params:nil,session:nil,body:nil,flash:{},format:nil,xhr:false,as:nil)check_required_ivars@controller.clear_instance_variables_between_requestsaction=+action.to_shttp_method=method.to_s.upcase@html_document=nilcookies.update(@request.cookies)cookies.update_cookies_from_jar@request.set_header"HTTP_COOKIE",cookies.to_header@request.delete_header"action_dispatch.cookies"@request=TestRequest.newscrub_env!(@request.env),@request.session,@controller.class@response=build_response@response_klass@response.request=@request@controller.recycle!ifbody@request.set_header"RAW_POST_DATA",bodyend@request.set_header"REQUEST_METHOD",http_methodifas@request.content_type=Mime[as].to_sformat||=asendparameters= (params||{}).symbolize_keysifformatparameters[:format] =formatendsetup_request(controller_class_name,action,parameters,session,flash,xhr)process_controller_response(action,cookies,xhr)endput(action, **args)LinkSimulate a PUT request with the given parameters and set/volley the response. Seegetfor more details.Source:show|on GitHub# File actionpack/lib/action_controller/test_case.rb, line 449defput(action,**args)process(action,method:"PUT",**args)endquery_parameter_names(generated_extras)LinkSource:show|on GitHub# File actionpack/lib/action_controller/test_case.rb, line 552defquery_parameter_names(generated_extras)generated_extras[1]+[:controller,:action]endsetup_controller_request_and_response()LinkSource:show|on GitHub# File actionpack/lib/action_controller/test_case.rb, line 556defsetup_controller_request_and_response@controller=nilunlessdefined?@controller@response_klass=ActionDispatch::TestResponseifklass=self.class.controller_classifklass<ActionController::Live@response_klass=LiveTestResponseendunless@controllerbegin@controller=klass.newrescuewarn"could not construct controller #{klass}"if$VERBOSEendendend@request=TestRequest.create(@controller.class)@response=build_response@response_klass@response.request=@requestif@controller@controller.request=@request@controller.params= {}endend