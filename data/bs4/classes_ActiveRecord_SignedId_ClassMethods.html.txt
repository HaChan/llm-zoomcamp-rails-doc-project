MethodsFfind_signed,find_signed!Ssigned_id_verifier,signed_id_verifier=Instance Public methodsfind_signed(signed_id, purpose: nil)LinkLets you find a record based on a signed id thatâs safe to put into the world without risk of tampering. This is particularly useful for things like password reset or email verification, where you want the bearer of the signed id to be able to interact with the underlying record, but usually only within a certain time period.You set the time period that the signed id is valid for during generation, using the instance methodsigned_id(expires_in: 15.minutes). If the time has elapsed before a signed find is attempted, the signed id will no longer be valid, and nil is returned.Itâs possible to further restrict the use of a signed id with a purpose. This helps when you have a general base model, like a User, which might have signed ids for several things, like password reset or email verification. The purpose that was set during generation must match the purpose set when finding. If thereâs a mismatch, nil is again returned.Examplessigned_id = User.first.signed_id expires_in: 15.minutes, purpose: :password_reset

User.find_signed signed_id # => nil, since the purpose does not match

travel 16.minutes
User.find_signed signed_id, purpose: :password_reset # => nil, since the signed id has expired

travel_back
User.find_signed signed_id, purpose: :password_reset # => User.firstSource:show|on GitHub# File activerecord/lib/active_record/signed_id.rb, line 52deffind_signed(signed_id,purpose:nil)raiseUnknownPrimaryKey.new(self)ifprimary_key.nil?ifid=signed_id_verifier.verified(signed_id,purpose:combine_signed_id_purposes(purpose))find_byprimary_key=>idendendfind_signed!(signed_id, purpose: nil)LinkWorks likefind_signed, but will raise anActiveSupport::MessageVerifier::InvalidSignatureexception if thesigned_idhas either expired, has a purpose mismatch, is for another record, or has been tampered with. It will also raise anActiveRecord::RecordNotFoundexception if the valid signed id canât find a record.ExamplesUser.find_signed! "bad data" # => ActiveSupport::MessageVerifier::InvalidSignature

signed_id = User.first.signed_id
User.first.destroy
User.find_signed! signed_id # => ActiveRecord::RecordNotFoundSource:show|on GitHub# File activerecord/lib/active_record/signed_id.rb, line 72deffind_signed!(signed_id,purpose:nil)ifid=signed_id_verifier.verify(signed_id,purpose:combine_signed_id_purposes(purpose))find(id)endendsigned_id_verifier()LinkThe verifier instance that all signed ids are generated and verified from. By default, itâll be initialized with the class-levelsigned_id_verifier_secret, which within Rails comes from theRails.application.key_generator. By default, itâs SHA256 for the digest and JSON for the serialization.Source:show|on GitHub# File activerecord/lib/active_record/signed_id.rb, line 81defsigned_id_verifier@signed_id_verifier||=beginsecret=signed_id_verifier_secretsecret=secret.callifsecret.respond_to?(:call)ifsecret.nil?raiseArgumentError,"You must set ActiveRecord::Base.signed_id_verifier_secret to use signed ids"elseActiveSupport::MessageVerifier.newsecret,digest:"SHA256",serializer:JSON,url_safe:trueendendendsigned_id_verifier=(verifier)LinkAllows you to pass in a custom verifier used for the signed ids. This also allows you to use different verifiers for different classes. This is also helpful if you need to rotate keys, as you can prepare your custom verifier for that in advance. SeeActiveSupport::MessageVerifierfor details.Source:show|on GitHub# File activerecord/lib/active_record/signed_id.rb, line 97defsigned_id_verifier=(verifier)@signed_id_verifier=verifierend