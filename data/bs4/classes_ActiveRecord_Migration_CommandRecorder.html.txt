Migration Command RecorderActiveRecord::Migration::CommandRecorderrecords commands done during a migration and knows how to reverse those commands. TheCommandRecorderknows how to invert the following commands:add_columnadd_foreign_keyadd_check_constraintadd_exclusion_constraintadd_unique_constraintadd_indexadd_referenceadd_timestampschange_column_default (must supply a:fromand:tooption)change_column_nullchange_column_comment (must supply a:fromand:tooption)change_table_comment (must supply a:fromand:tooption)create_enumcreate_join_tablecreate_tabledisable_extensiondrop_enum (must supply a list of values)drop_join_tabledrop_table (must supply a block)enable_extensionremove_column (must supply a type)remove_columns (must supply a:typeoption)remove_foreign_key (must supply a second table)remove_check_constraintremove_exclusion_constraintremove_unique_constraintremove_indexremove_referenceremove_timestampsrename_columnrename_enum (must supply a:tooption)rename_enum_value (must supply a:fromand:tooption)rename_indexrename_tableMethodsIinverse_ofNnewRrecord,replay,revertConstantsReversibleAndIrreversibleMethods=[
:create_table, :create_join_table, :rename_table, :add_column, :remove_column,
:rename_index, :rename_column, :add_index, :remove_index, :add_timestamps, :remove_timestamps,
:change_column_default, :add_reference, :remove_reference, :transaction,
:drop_join_table, :drop_table, :execute_block, :enable_extension, :disable_extension,
:change_column, :execute, :remove_columns, :change_column_null,
:add_foreign_key, :remove_foreign_key,
:change_column_comment, :change_table_comment,
:add_check_constraint, :remove_check_constraint,
:add_exclusion_constraint, :remove_exclusion_constraint,
:add_unique_constraint, :remove_unique_constraint,
:create_enum, :drop_enum, :rename_enum, :add_enum_value, :rename_enum_value,
]Attributes[RW]commands[RW]delegate[RW]revertingClass Public methodsnew(delegate = nil)LinkSource:show|on GitHub# File activerecord/lib/active_record/migration/command_recorder.rb, line 63definitialize(delegate=nil)@commands= []@delegate=delegate@reverting=falseendInstance Public methodsinverse_of(command, args, &block)LinkReturns the inverse of the given command. For example:recorder.inverse_of(:rename_table, [:old, :new])
# => [:rename_table, [:new, :old]]If the inverse of a command requires several commands, returns array of commands.recorder.inverse_of(:remove_columns, [:some_table, :foo, :bar, type: :string])
# => [[:add_column, :some_table, :foo, :string], [:add_column, :some_table, :bar, :string]]This method will raise anIrreversibleMigrationexception if it cannot invert thecommand.Source:show|on GitHub# File activerecord/lib/active_record/migration/command_recorder.rb, line 110definverse_of(command,args,&block)method=:"invert_#{command}"raiseIrreversibleMigration,<<~MSGunlessrespond_to?(method,true)This migration uses #{command}, which is not automatically reversible.
          To make the migration reversible you can either:
          1. Define #up and #down methods in place of the #change method.
          2. Use the #reversible method to define reversible behavior.MSGsend(method,args,&block)endrecord(*command, &block)LinkRecordcommand.commandshould be a method name and arguments. For example:recorder.record(:method_name, [:arg1, :arg2])Source:show|on GitHub# File activerecord/lib/active_record/migration/command_recorder.rb, line 90defrecord(*command,&block)if@reverting@commands<<inverse_of(*command,&block)else@commands<<(command<<block)endendreplay(migration)LinkSource:show|on GitHub# File activerecord/lib/active_record/migration/command_recorder.rb, line 144defreplay(migration)commands.eachdo|cmd,args,block|migration.send(cmd,*args,&block)endendrevert()LinkWhile executing the given block, the recorded will be in reverting mode. All commands recorded will end up being recorded reverted and in reverse order. For example:recorder.revert{ recorder.record(:rename_table, [:old, :new]) }
# same effect as recorder.record(:rename_table, [:new, :old])Source:show|on GitHub# File activerecord/lib/active_record/migration/command_recorder.rb, line 76defrevert@reverting=!@revertingprevious=@commands@commands= []yieldensure@commands=previous.concat(@commands.reverse)@reverting=!@revertingend