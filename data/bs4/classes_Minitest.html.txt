NamespaceCLASSMinitest::BacktraceFilterWithFallbackCLASSMinitest::ProfileReporterCLASSMinitest::SuppressedSummaryReporterMethodsPplugin_rails_init,plugin_rails_optionsClass Public methodsplugin_rails_init(options)LinkOwes great inspiration to test runner trailblazers like RSpec, minitest-reporters, maxitest, and others.Source:show|on GitHub# File railties/lib/minitest/rails_plugin.rb, line 111defself.plugin_rails_init(options)# Don't mess with Minitest unless RAILS_ENV is setreturnunlessENV["RAILS_ENV"]unlessoptions[:full_backtrace]# Plugin can run without Rails loaded, check before filtering.if::Rails.respond_to?(:backtrace_cleaner)Minitest.backtrace_filter=BacktraceFilterWithFallback.new(::Rails.backtrace_cleaner,Minitest.backtrace_filter)endend# Suppress summary reports when outputting inline rerun snippets.ifreporter.reporters.reject!{|reporter|reporter.kind_of?(SummaryReporter) }reporter<<SuppressedSummaryReporter.new(options[:io],options)end# Replace progress reporter for colors.ifreporter.reporters.reject!{|reporter|reporter.kind_of?(ProgressReporter) }reporter<<::Rails::TestUnitReporter.new(options[:io],options)end# Add slowest tests reporter at the end.ifoptions[:profile]reporter<<ProfileReporter.new(options[:io],options)endendplugin_rails_options(opts, options)LinkSource:show|on GitHub# File railties/lib/minitest/rails_plugin.rb, line 68defself.plugin_rails_options(opts,options)::Rails::TestUnit::Runner.attach_before_load_options(opts)opts.on("-b","--backtrace","Show the complete backtrace")dooptions[:full_backtrace] =trueendopts.on("-d","--defer-output","Output test failures and errors after the test run")dooptions[:output_inline] =falseendopts.on("-f","--fail-fast","Abort test run on first failure or error")dooptions[:fail_fast] =trueendopts.on("-c","--[no-]color","Enable color in the output")do|value|options[:color] =valueendopts.on("--profile [COUNT]","Enable profiling of tests and list the slowest test cases (default: 10)")do|value|default_count=10ifvalue.nil?count=default_countelsecount=Integer(value,exception:false)ifcount.nil?warn("Non integer specified as profile count, separate "\"your path from options with -- e.g. "\"`#{::Rails::TestUnitReporter.executable} --profile -- #{value}`")count=default_countendendoptions[:profile] =countendoptions[:color] =trueoptions[:output_inline] =trueend