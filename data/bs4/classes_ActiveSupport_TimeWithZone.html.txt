Active Support Time With ZoneA Time-like class that can represent a time in any time zone. Necessary because standard RubyTimeinstances are limited to UTC and the systemâsENV['TZ']zone.You shouldnât ever need to create aTimeWithZoneinstance directly vianew. Instead use methodslocal,parse,at, andnowonTimeZoneinstances, andin_time_zoneonTimeandDateTimeinstances.Time.zone = 'Eastern Time (US & Canada)'        # => 'Eastern Time (US & Canada)'
Time.zone.local(2007, 2, 10, 15, 30, 45)        # => Sat, 10 Feb 2007 15:30:45.000000000 EST -05:00
Time.zone.parse('2007-02-10 15:30:45')          # => Sat, 10 Feb 2007 15:30:45.000000000 EST -05:00
Time.zone.at(1171139445)                        # => Sat, 10 Feb 2007 15:30:45.000000000 EST -05:00
Time.zone.now                                   # => Sun, 18 May 2008 13:07:55.754107581 EDT -04:00
Time.utc(2007, 2, 10, 20, 30, 45).in_time_zone  # => Sat, 10 Feb 2007 15:30:45.000000000 EST -05:00SeeTimeandTimeZonefor further documentation of these methods.TimeWithZoneinstances implement the same API as RubyTimeinstances, so thatTimeandTimeWithZoneinstances are interchangeable.t = Time.zone.now                     # => Sun, 18 May 2008 13:27:25.031505668 EDT -04:00
t.hour                                # => 13
t.dst?                                # => true
t.utc_offset                          # => -14400
t.zone                                # => "EDT"
t.to_fs(:rfc822)                      # => "Sun, 18 May 2008 13:27:25 -0400"
t + 1.day                             # => Mon, 19 May 2008 13:27:25.031505668 EDT -04:00
t.beginning_of_year                   # => Tue, 01 Jan 2008 00:00:00.000000000 EST -05:00
t > Time.utc(1999)                    # => true
t.is_a?(Time)                         # => true
t.is_a?(ActiveSupport::TimeWithZone)  # => trueMethods#+,-,<=>Aacts_like_time?,advance,ago,as_jsonBbetween?,blank?Cchange,comparable_timeDdst?Eeql?Fformatted_offset,freeze,future?Ggetgm,getlocal,getutc,gmt?,gmt_offset,gmtime,gmtoffHhash,httpdateIin,in_time_zone,inspect,is_a?,isdst,iso8601Kkind_of?LlocaltimeMmarshal_dump,marshal_load,method_missingNnew,next_day?Ppast?,period,prev_day?Rrespond_to?,respond_to_missing?,rfc2822,rfc3339,rfc822Ssince,strftimeTtime,to_a,to_datetime,to_f,to_formatted_s,to_fs,to_i,to_r,to_s,to_time,today?,tomorrow?,tv_secUutc,utc?,utc_offsetXxmlschemaYyesterday?ZzoneConstantsPRECISIONS=Hash.new { |h, n| h[n] = "%FT%T.%#{n}N" }SECONDS_PER_DAY=86400Attributes[R]time_zoneClass Public methodsnew(utc_time, time_zone, local_time = nil, period = nil)LinkSource:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 51definitialize(utc_time,time_zone,local_time=nil,period=nil)@utc=utc_time?transfer_time_values_to_utc_constructor(utc_time):nil@time_zone,@time=time_zone,local_time@period=@utc?period:get_period_and_ensure_valid_local_time(period)endInstance Public methods+(other)LinkAdds an interval of time to the current objectâs time and returns that value as a newTimeWithZoneobject.Time.zone = 'Eastern Time (US & Canada)' # => 'Eastern Time (US & Canada)'
now = Time.zone.now # => Sun, 02 Nov 2014 01:26:28.725182881 EDT -04:00
now + 1000          # => Sun, 02 Nov 2014 01:43:08.725182881 EDT -04:00If weâre adding aDurationof variable length (i.e., years, months, days), move forward fromtime, otherwise move forward fromutc, for accuracy when moving across DST boundaries.For instance, a time + 24.hours will advance exactly 24 hours, while a time + 1.day will advance 23-25 hours, depending on the day.now + 24.hours      # => Mon, 03 Nov 2014 00:26:28.725182881 EST -05:00
now + 1.day         # => Mon, 03 Nov 2014 01:26:28.725182881 EST -05:00Also aliased as:since,inSource:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 299def+(other)ifduration_of_variable_length?(other)method_missing(:+,other)elseresult=utc.acts_like?(:date)?utc.since(other):utc+otherrescueutc.since(other)result.in_time_zone(time_zone)endend-(other)LinkSubtracts an interval of time and returns a newTimeWithZoneobject unless the other valueacts_like?time. In which case, it will subtract the other time and return the difference in seconds as aFloat.Time.zone = 'Eastern Time (US & Canada)' # => 'Eastern Time (US & Canada)'
now = Time.zone.now # => Mon, 03 Nov 2014 00:26:28.725182881 EST -05:00
now - 1000          # => Mon, 03 Nov 2014 00:09:48.725182881 EST -05:00If subtracting aDurationof variable length (i.e., years, months, days), move backward fromtime, otherwise move backward fromutc, for accuracy when moving across DST boundaries.For instance, a time - 24.hours will go subtract exactly 24 hours, while a time - 1.day will subtract 23-25 hours, depending on the day.now - 24.hours      # => Sun, 02 Nov 2014 01:26:28.725182881 EDT -04:00
now - 1.day         # => Sun, 02 Nov 2014 00:26:28.725182881 EDT -04:00If both theTimeWithZoneobject and the other value act likeTime, aFloatwill be returned.Time.zone.now - 1.day.ago # => 86399.999967Source:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 333def-(other)ifother.acts_like?(:time)getutc-other.getutcelsifduration_of_variable_length?(other)method_missing(:-,other)elseresult=utc.acts_like?(:date)?utc.ago(other):utc-otherrescueutc.ago(other)result.in_time_zone(time_zone)endend<=>(other)LinkUse the time in UTC for comparisons.Source:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 232def<=>(other)utc<=>otherendacts_like_time?()LinkSo thatselfacts_like?(:time).Source:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 494defacts_like_time?trueendadvance(options)LinkUsesDateto provide preciseTimecalculations for years, months, and days according to the proleptic Gregorian calendar. The result is returned as a newTimeWithZoneobject.Theoptionsparameter takes a hash with any of these keys::years,:months,:weeks,:days,:hours,:minutes,:seconds.If advancing by a value of variable length (i.e., years, weeks, months, days), move forward fromtime, otherwise move forward fromutc, for accuracy when moving across DST boundaries.Time.zone = 'Eastern Time (US & Canada)' # => 'Eastern Time (US & Canada)'
now = Time.zone.now # => Sun, 02 Nov 2014 01:26:28.558049687 EDT -04:00
now.advance(seconds: 1) # => Sun, 02 Nov 2014 01:26:29.558049687 EDT -04:00
now.advance(minutes: 1) # => Sun, 02 Nov 2014 01:27:28.558049687 EDT -04:00
now.advance(hours: 1)   # => Sun, 02 Nov 2014 01:26:28.558049687 EST -05:00
now.advance(days: 1)    # => Mon, 03 Nov 2014 01:26:28.558049687 EST -05:00
now.advance(weeks: 1)   # => Sun, 09 Nov 2014 01:26:28.558049687 EST -05:00
now.advance(months: 1)  # => Tue, 02 Dec 2014 01:26:28.558049687 EST -05:00
now.advance(years: 1)   # => Mon, 02 Nov 2015 01:26:28.558049687 EST -05:00Source:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 422defadvance(options)# If we're advancing a value of variable length (i.e., years, weeks, months, days), advance from #time,# otherwise advance from #utc, for accuracy when moving across DST boundariesifoptions.values_at(:years,:weeks,:months,:days).any?method_missing(:advance,options)elseutc.advance(options).in_time_zone(time_zone)endendago(other)LinkSubtracts an interval of time from the current objectâs time and returns the result as a newTimeWithZoneobject.Time.zone = 'Eastern Time (US & Canada)' # => 'Eastern Time (US & Canada)'
now = Time.zone.now # => Mon, 03 Nov 2014 00:26:28.725182881 EST -05:00
now.ago(1000)       # => Mon, 03 Nov 2014 00:09:48.725182881 EST -05:00If weâre subtracting aDurationof variable length (i.e., years, months, days), move backward fromtime, otherwise move backward fromutc, for accuracy when moving across DST boundaries.For instance,time.ago(24.hours)will move back exactly 24 hours, whiletime.ago(1.day)will move back 23-25 hours, depending on the day.now.ago(24.hours)   # => Sun, 02 Nov 2014 01:26:28.725182881 EDT -04:00
now.ago(1.day)      # => Sun, 02 Nov 2014 00:26:28.725182881 EDT -04:00Source:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 361defago(other)since(-other)endas_json(options = nil)LinkCoerces time to a string forJSONencoding. The default format is ISO 8601. You can get %Y/%m/%d %H:%M:%S +offset style by settingActiveSupport::JSON::Encoding.use_standard_json_time_formattofalse.# With ActiveSupport::JSON::Encoding.use_standard_json_time_format = true
Time.utc(2005,2,1,15,15,10).in_time_zone("Hawaii").to_json
# => "2005-02-01T05:15:10.000-10:00"

# With ActiveSupport::JSON::Encoding.use_standard_json_time_format = false
Time.utc(2005,2,1,15,15,10).in_time_zone("Hawaii").to_json
# => "2005/02/01 05:15:10 -1000"Source:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 166defas_json(options=nil)ifActiveSupport::JSON::Encoding.use_standard_json_time_formatxmlschema(ActiveSupport::JSON::Encoding.time_precision)else%(#{time.strftime("%Y/%m/%d %H:%M:%S")} #{formatted_offset(false)})endendbetween?(min, max)LinkReturns true if the current objectâs time is within the specifiedminandmaxtime.Source:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 240defbetween?(min,max)utc.between?(min,max)endblank?()LinkAn instance ofActiveSupport::TimeWithZoneis never blankSource:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 505defblank?falseendchange(options)LinkReturns a newActiveSupport::TimeWithZonewhere one or more of the elements have been changed according to theoptionsparameter. The time options (:hour,:min,:sec,:usec,:nsec) reset cascadingly, so if only the hour is passed, then minute, sec, usec, and nsec is set to 0. If the hour and minute is passed, then sec, usec, and nsec is set to 0. Theoptionsparameter takes a hash with any of these keys::year,:month,:day,:hour,:min,:sec,:usec,:nsec,:offset,:zone. Pass either:usecor:nsec, not both. Similarly, pass either:zoneor:offset, not both.t = Time.zone.now          # => Fri, 14 Apr 2017 11:45:15.116992711 EST -05:00
t.change(year: 2020)       # => Tue, 14 Apr 2020 11:45:15.116992711 EST -05:00
t.change(hour: 12)         # => Fri, 14 Apr 2017 12:00:00.000000000 EST -05:00
t.change(min: 30)          # => Fri, 14 Apr 2017 11:30:00.000000000 EST -05:00
t.change(offset: "-10:00") # => Fri, 14 Apr 2017 11:45:15.116992711 HST -10:00
t.change(zone: "Hawaii")   # => Fri, 14 Apr 2017 11:45:15.116992711 HST -10:00Source:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 382defchange(options)ifoptions[:zone]&&options[:offset]raiseArgumentError,"Can't change both :offset and :zone at the same time: #{options.inspect}"endnew_time=time.change(options)ifoptions[:zone]new_zone=::Time.find_zone(options[:zone])elsifoptions[:offset]new_zone=::Time.find_zone(new_time.utc_offset)endnew_zone||=time_zoneperiods=new_zone.periods_for_local(new_time)self.class.new(nil,new_zone,new_time,periods.include?(period)?period:nil)endcomparable_time()LinkAlias for:utcdst?()LinkReturns true if the current time is within Daylight SavingsTimefor the specified time zone.Time.zone = 'Eastern Time (US & Canada)'    # => 'Eastern Time (US & Canada)'
Time.zone.parse("2012-5-30").dst?           # => true
Time.zone.parse("2012-11-30").dst?          # => falseAlso aliased as:isdstSource:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 94defdst?period.dst?endeql?(other)LinkReturnstrueifotheris equal to current object.Source:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 275defeql?(other)other.eql?(utc)endformatted_offset(colon = true, alternate_utc_string = nil)LinkReturns a formatted string of the offset from UTC, or an alternative string if the time zone is already UTC.Time.zone = 'Eastern Time (US & Canada)'   # => "Eastern Time (US & Canada)"
Time.zone.now.formatted_offset(true)       # => "-05:00"
Time.zone.now.formatted_offset(false)      # => "-0500"
Time.zone = 'UTC'                          # => "UTC"
Time.zone.now.formatted_offset(true, "0")  # => "0"Source:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 125defformatted_offset(colon=true,alternate_utc_string=nil)utc?&&alternate_utc_string||TimeZone.seconds_to_utc_offset(utc_offset,colon)endfreeze()LinkSource:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 513deffreeze# preload instance variables before freezingperiod;utc;time;to_datetime;to_timesuperendfuture?()LinkReturns true if the current objectâs time is in the future.Source:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 270deffuture?utc.future?endgetgm()LinkAlias for:utcgetlocal(utc_offset = nil)LinkAlias for:localtimegetutc()LinkAlias for:utcgmt?()LinkAlias for:utc?gmt_offset()LinkAlias for:utc_offsetgmtime()LinkAlias for:utcgmtoff()LinkAlias for:utc_offsethash()LinkSource:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 279defhashutc.hashendhttpdate()LinkReturns a string of the objectâs date and time in the format used by HTTP requests.Time.zone.now.httpdate  # => "Tue, 01 Jan 2013 04:39:43 GMT"Source:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 186defhttpdateutc.httpdateendin(other)LinkAlias for:+in_time_zone(new_zone = ::Time.zone)LinkReturns the simultaneous time inTime.zone, or the specified zone.Source:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 77defin_time_zone(new_zone=::Time.zone)returnselfiftime_zone==new_zoneutc.in_time_zone(new_zone)endinspect()LinkReturns a string of the objectâs date, time, zone, and offset from UTC.Time.zone.now.inspect # => "Thu, 04 Dec 2014 11:00:25.624541392 EST -05:00"Source:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 140definspect"#{time.strftime('%a, %d %b %Y %H:%M:%S.%9N')} #{zone} #{formatted_offset}"endis_a?(klass)LinkSay weâre aTimeto thwart type checking.Also aliased as:kind_of?Source:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 499defis_a?(klass)klass==::Time||superendisdst()LinkAlias for:dst?iso8601(fraction_digits = 0)LinkAlias for:xmlschemakind_of?(klass)LinkAlias for:is_a?localtime(utc_offset = nil)LinkReturns aTimeinstance of the simultaneous time in the system timezone.Also aliased as:getlocalSource:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 83deflocaltime(utc_offset=nil)utc.getlocal(utc_offset)endmarshal_dump()LinkSource:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 519defmarshal_dump[utc,time_zone.name,time]endmarshal_load(variables)LinkSource:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 523defmarshal_load(variables)initialize(variables[0].utc,::Time.find_zone(variables[1]),variables[2].utc)endmethod_missing(...)LinkSend the missing method totimeinstance, and wrap result in a newTimeWithZonewith the existingtime_zone.Source:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 544defmethod_missing(...)wrap_with_time_zonetime.__send__(...)rescueNoMethodError=>eraisee,e.message.sub(time.inspect,inspect).sub("Time","ActiveSupport::TimeWithZone"),e.backtraceendnext_day?()LinkAlias for:tomorrow?past?()LinkReturns true if the current objectâs time is in the past.Source:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 245defpast?utc.past?endperiod()LinkReturns the underlyingTZInfo::TimezonePeriod.Source:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 72defperiod@period||=time_zone.period_for_utc(@utc)endprev_day?()LinkAlias for:yesterday?respond_to?(sym, include_priv = false)Linkrespond_to_missing? is not called in some cases, such as when type conversion is performed with Kernel#StringSource:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 529defrespond_to?(sym,include_priv=false)# ensure that we're not going to throw and rescue from NoMethodError in method_missing which is slowreturnfalseifsym.to_sym==:to_strsuperendrespond_to_missing?(sym, include_priv)LinkEnsure proxy class responds to all methods that underlying time instance responds to.Source:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 537defrespond_to_missing?(sym,include_priv)returnfalseifsym.to_sym==:acts_like_date?time.respond_to?(sym,include_priv)endrfc2822()LinkReturns a string of the objectâs date and time in the RFC 2822 standard format.Time.zone.now.rfc2822  # => "Tue, 01 Jan 2013 04:51:39 +0000"Also aliased as:rfc822Source:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 194defrfc2822to_fs(:rfc822)endrfc3339(fraction_digits = 0)LinkAlias for:xmlschemarfc822()LinkAlias for:rfc2822since(other)LinkAlias for:+strftime(format)LinkReplaces%Zdirective with +zone before passing to Time#strftime, so that zone information is correct.Source:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 226defstrftime(format)format=format.gsub(/((?:\A|[^%])(?:%%)*)%Z/,"\\1#{zone}")getlocal(utc_offset).strftime(format)endtime()LinkReturns aTimeinstance that represents the time intime_zone.Source:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 58deftime@time||=incorporate_utc_offset(@utc,utc_offset)endto_a()LinkReturnsArrayof parts ofTimein sequence of [seconds, minutes, hours, day, month, year, weekday, yearday, dst?, zone].now = Time.zone.now     # => Tue, 18 Aug 2015 02:29:27.485278555 UTC +00:00
now.to_a                # => [27, 29, 2, 18, 8, 2015, 2, 230, false, "UTC"]Source:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 445defto_a[time.sec,time.min,time.hour,time.day,time.mon,time.year,time.wday,time.yday,dst?,zone]endto_datetime()LinkReturns an instance ofDateTimewith the timezoneâs UTC offsetTime.zone.now.to_datetime                         # => Tue, 18 Aug 2015 02:32:20 +0000
Time.current.in_time_zone('Hawaii').to_datetime   # => Mon, 17 Aug 2015 16:32:20 -1000Source:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 478defto_datetime@to_datetime||=utc.to_datetime.new_offset(Rational(utc_offset,86_400))endto_f()LinkReturns the objectâs date and time as a floating-point number of seconds since the Epoch (January 1, 1970 00:00 UTC).Time.zone.now.to_f # => 1417709320.285418Source:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 453defto_futc.to_fendto_formatted_s(format = :default)LinkAlias for:to_fsto_fs(format = :default)LinkReturns a string of the objectâs date and time.This method is aliased toto_formatted_s.Accepts an optionalformat::default- default value, mimics Ruby Time#to_s format.:db- format outputs time in UTC :db time. SeeTime#to_fs(:db).Any key inTime::DATE_FORMATScan be used. See active_support/core_ext/time/conversions.rb.Also aliased as:to_formatted_sSource:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 212defto_fs(format=:default)ifformat==:dbutc.to_fs(format)elsifformatter=::Time::DATE_FORMATS[format]formatter.respond_to?(:call)?formatter.call(self).to_s:strftime(formatter)else# Change to to_s when deprecation is gone."#{time.strftime("%Y-%m-%d %H:%M:%S")} #{formatted_offset(false, 'UTC')}"endendto_i()LinkReturns the objectâs date and time as an integer number of seconds since the Epoch (January 1, 1970 00:00 UTC).Time.zone.now.to_i # => 1417709320Also aliased as:tv_secSource:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 461defto_iutc.to_iendto_r()LinkReturns the objectâs date and time as a rational number of seconds since the Epoch (January 1, 1970 00:00 UTC).Time.zone.now.to_r # => (708854548642709/500000)Source:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 470defto_rutc.to_rendto_s()LinkReturns a string of the objectâs date and time.Source:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 200defto_s"#{time.strftime("%Y-%m-%d %H:%M:%S")} #{formatted_offset(false, 'UTC')}"# mimicking Ruby Time#to_s formatendto_time()LinkReturns an instance ofTime, either with the same UTC offset asselfor in the local system timezone depending on the setting ofActiveSupport.to_time_preserves_timezone.Source:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 485defto_timeifpreserve_timezone@to_time_with_instance_offset||=getlocal(utc_offset)else@to_time_with_system_offset||=getlocalendendtoday?()LinkReturns true if the current objectâs time falls within the current day.Source:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 251deftoday?time.today?endtomorrow?()LinkReturns true if the current objectâs time falls within the next day (tomorrow).Also aliased as:next_day?Source:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 257deftomorrow?time.tomorrow?endtv_sec()LinkAlias for:to_iutc()LinkReturns aTimeinstance of the simultaneous time in the UTC timezone.Also aliased as:comparable_time,getgm,getutc,gmtimeSource:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 63defutc@utc||=incorporate_utc_offset(@time,-utc_offset)endutc?()LinkReturns true if the current time zone is set to UTC.Time.zone = 'UTC'                           # => 'UTC'
Time.zone.now.utc?                          # => true
Time.zone = 'Eastern Time (US & Canada)'    # => 'Eastern Time (US & Canada)'
Time.zone.now.utc?                          # => falseAlso aliased as:gmt?Source:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 105defutc?zone=="UTC"||zone=="UCT"endutc_offset()LinkReturns the offset from current time to UTC time in seconds.Also aliased as:gmt_offset,gmtoffSource:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 111defutc_offsetperiod.observed_utc_offsetendxmlschema(fraction_digits = 0)LinkReturns a string of the objectâs date and time in the ISO 8601 standard format.Time.zone.now.xmlschema  # => "2014-12-04T11:02:37-05:00"Also aliased as:iso8601,rfc3339Source:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 148defxmlschema(fraction_digits=0)"#{time.strftime(PRECISIONS[fraction_digits.to_i])}#{formatted_offset(true, 'Z')}"endyesterday?()LinkReturns true if the current objectâs time falls within the previous day (yesterday).Also aliased as:prev_day?Source:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 264defyesterday?time.yesterday?endzone()LinkReturns the time zone abbreviation.Time.zone = 'Eastern Time (US & Canada)'   # => "Eastern Time (US & Canada)"
Time.zone.now.zone # => "EST"Source:show|on GitHub# File activesupport/lib/active_support/time_with_zone.rb, line 133defzoneperiod.abbreviationend