MethodsAallDdefault_scopedSscopeInstance Public methodsall(all_queries: nil)LinkReturns anActiveRecord::Relationscope object.posts = Post.all
posts.size # Fires "select count(*) from  posts" and returns the count
posts.each {|p| puts p.name } # Fires "select * from posts" and loads post objects

fruits = Fruit.all
fruits = fruits.where(color: 'red') if options[:red_only]
fruits = fruits.limit(10) if limited?You can define a scope that applies to all finders usingdefault_scope.Source:show|on GitHub# File activerecord/lib/active_record/scoping/named.rb, line 22defall(all_queries:nil)scope=current_scopeifscopeifself==scope.klassscope.cloneelserelation.merge!(scope)endelsedefault_scoped(all_queries:all_queries)endenddefault_scoped(scope = relation, all_queries: nil)LinkReturns a scope for the model with default scopes.Source:show|on GitHub# File activerecord/lib/active_record/scoping/named.rb, line 45defdefault_scoped(scope=relation,all_queries:nil)build_default_scope(scope,all_queries:all_queries)||scopeendscope(name, body, &block)LinkAdds a class method for retrieving and querying objects. The method is intended to return anActiveRecord::Relationobject, which is composable with other scopes. If it returnsnilorfalse, anallscope is returned instead.A scope represents a narrowing of a database query, such aswhere(color: :red).select('shirts.*').includes(:washing_instructions).class Shirt < ActiveRecord::Base
  scope :red, -> { where(color: 'red') }
  scope :dry_clean_only, -> { joins(:washing_instructions).where('washing_instructions.dry_clean_only = ?', true) }
endThe above calls toscopedefine class methodsShirt.redandShirt.dry_clean_only.Shirt.red, in effect, represents the queryShirt.where(color: 'red').Note that this is simply âsyntactic sugarâ for defining an actual class method:class Shirt < ActiveRecord::Base
  def self.red
    where(color: 'red')
  end
endUnlikeShirt.find(...), however, the object returned byShirt.redis not anArraybut anActiveRecord::Relation, which is composable with other scopes; it resembles the association object constructed by ahas_manydeclaration. For instance, you can invokeShirt.red.first,Shirt.red.count,Shirt.red.where(size: 'small'). Also, just as with the association objects, named scopes act like anArray, implementingEnumerable;Shirt.red.each(&block),Shirt.red.first, andShirt.red.inject(memo, &block)all behave as ifShirt.redreally was an array.These named scopes are composable. For instance,Shirt.red.dry_clean_onlywill produce all shirts that are both red and dry clean only. Nested finds and calculations also work with these compositions:Shirt.red.dry_clean_only.countreturns the number of garments for which these criteria obtain. Similarly withShirt.red.dry_clean_only.average(:thread_count).All scopes are available as class methods on theActiveRecord::Basedescendant upon which the scopes were defined. But they are also available tohas_manyassociations. If,class Person < ActiveRecord::Base
  has_many :shirts
endthenelton.shirts.red.dry_clean_onlywill return all of Eltonâs red, dry clean only shirts.Named scopes can also have extensions, just as withhas_manydeclarations:class Shirt < ActiveRecord::Base
  scope :red, -> { where(color: 'red') } do
    def dom_id
      'red_shirts'
    end
  end
endScopes can also be used while creating/building a record.class Article < ActiveRecord::Base
  scope :published, -> { where(published: true) }
end

Article.published.new.published    # => true
Article.published.create.published # => trueClass methods on your model are automatically available on scopes. Assuming the following setup:class Article < ActiveRecord::Base
  scope :published, -> { where(published: true) }
  scope :featured, -> { where(featured: true) }

  def self.latest_article
    order('published_at desc').first
  end

  def self.titles
    pluck(:title)
  end
endWe are able to call the methods like this:Article.published.featured.latest_article
Article.featured.titlesSource:show|on GitHub# File activerecord/lib/active_record/scoping/named.rb, line 154defscope(name,body,&block)unlessbody.respond_to?(:call)raiseArgumentError,"The scope body needs to be callable."endifdangerous_class_method?(name)raiseArgumentError,"You tried to define a scope named \"#{name}\" "\"on the model \"#{self.name}\", but Active Record already defined "\"a class method with the same name."endifmethod_defined_within?(name,Relation)raiseArgumentError,"You tried to define a scope named \"#{name}\" "\"on the model \"#{self.name}\", but ActiveRecord::Relation already defined "\"an instance method with the same name."endextension=Module.new(&block)ifblockifbody.respond_to?(:to_proc)singleton_class.define_method(name)do|*args|scope=all._exec_scope(*args,&body)scope=scope.extending(extension)ifextensionscopeendelsesingleton_class.define_method(name)do|*args|scope=body.call(*args)||allscope=scope.extending(extension)ifextensionscopeendendsingleton_class.send(:ruby2_keywords,name)generate_relation_method(name)end