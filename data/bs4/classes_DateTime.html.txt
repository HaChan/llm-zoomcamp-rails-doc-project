Methods#<=>Aacts_like_date?,acts_like_time?,advance,ago,at_beginning_of_day,at_beginning_of_hour,at_beginning_of_minute,at_end_of_day,at_end_of_hour,at_end_of_minute,at_midday,at_middle_of_day,at_midnight,at_noonBbeginning_of_day,beginning_of_hour,beginning_of_minuteCchange,civil_from_format,currentDdefault_inspectEend_of_day,end_of_hour,end_of_minuteFformatted_offsetGgetgm,getlocal,getutc,gmtimeIin,inspectLlocaltimeMmidday,middle_of_day,midnightNnoon,nsecRreadable_inspectSseconds_since_midnight,seconds_until_end_of_day,since,subsecTto_f,to_formatted_s,to_fs,to_i,to_timeUusec,utc,utc?,utc_offsetIncluded ModulesDateAndTime::CompatibilityClass Public methodscivil_from_format(utc_or_local, year, month = 1, day = 1, hour = 0, min = 0, sec = 0)LinkReturnsDateTimewith local offset for given year if format is local else offset is zero.DateTime.civil_from_format :local, 2012
# => Sun, 01 Jan 2012 00:00:00 +0300
DateTime.civil_from_format :local, 2012, 12, 17
# => Mon, 17 Dec 2012 00:00:00 +0000Source:show|on GitHub# File activesupport/lib/active_support/core_ext/date_time/conversions.rb, line 69defself.civil_from_format(utc_or_local,year,month=1,day=1,hour=0,min=0,sec=0)ifutc_or_local.to_sym==:localoffset=::Time.local(year,month,day).utc_offset.to_r/86400elseoffset=0endcivil(year,month,day,hour,min,sec,offset)endcurrent()LinkReturnsTime.zone.now.to_datetimewhenTime.zoneorconfig.time_zoneare set, otherwise returnsTime.now.to_datetime.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 10defcurrent::Time.zone?::Time.zone.now.to_datetime:::Time.now.to_datetimeendInstance Public methods<=>(other)LinkLayers additional behavior onDateTime#<=>so thatTimeandActiveSupport::TimeWithZoneinstances can be compared with aDateTime.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 208def<=>(other)ifother.respond_to?:to_datetimesuperother.to_datetimerescuenilelsesuperendendacts_like_date?()LinkDuck-types as a Date-like class. SeeObject#acts_like?.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/date_time/acts_like.rb, line 8defacts_like_date?trueendacts_like_time?()LinkDuck-types as a Time-like class. SeeObject#acts_like?.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/date_time/acts_like.rb, line 13defacts_like_time?trueendadvance(options)LinkUsesDateto provide preciseTimecalculations for years, months, and days. Theoptionsparameter takes a hash with any of these keys::years,:months,:weeks,:days,:hours,:minutes,:seconds.Just likeDate#advance, increments are applied in order of time units from largest to smallest. This order can affect the result around the end of a month.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 82defadvance(options)unlessoptions[:weeks].nil?options[:weeks],partial_weeks=options[:weeks].divmod(1)options[:days] =options.fetch(:days,0)+7*partial_weeksendunlessoptions[:days].nil?options[:days],partial_days=options[:days].divmod(1)options[:hours] =options.fetch(:hours,0)+24*partial_daysendd=to_date.advance(options)datetime_advanced_by_date=change(year:d.year,month:d.month,day:d.day)seconds_to_advance= \options.fetch(:seconds,0)+options.fetch(:minutes,0)*60+options.fetch(:hours,0)*3600ifseconds_to_advance.zero?datetime_advanced_by_dateelsedatetime_advanced_by_date.since(seconds_to_advance)endendago(seconds)LinkReturns a newDateTimerepresenting the time a number of seconds ago. Do not use this method in combination with x.months, use months_ago instead!Source:show|on GitHub# File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 109defago(seconds)since(-seconds)endat_beginning_of_day()LinkAlias for:beginning_of_dayat_beginning_of_hour()LinkAlias for:beginning_of_hourat_beginning_of_minute()LinkAlias for:beginning_of_minuteat_end_of_day()LinkAlias for:end_of_dayat_end_of_hour()LinkAlias for:end_of_hourat_end_of_minute()LinkAlias for:end_of_minuteat_midday()LinkAlias for:middle_of_dayat_middle_of_day()LinkAlias for:middle_of_dayat_midnight()LinkAlias for:beginning_of_dayat_noon()LinkAlias for:middle_of_daybeginning_of_day()LinkReturns a newDateTimerepresenting the start of the day (0:00).Also aliased as:midnight,at_midnight,at_beginning_of_daySource:show|on GitHub# File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 122defbeginning_of_daychange(hour:0)endbeginning_of_hour()LinkReturns a newDateTimerepresenting the start of the hour (hh:00:00).Also aliased as:at_beginning_of_hourSource:show|on GitHub# File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 146defbeginning_of_hourchange(min:0)endbeginning_of_minute()LinkReturns a newDateTimerepresenting the start of the minute (hh:mm:00).Also aliased as:at_beginning_of_minuteSource:show|on GitHub# File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 158defbeginning_of_minutechange(sec:0)endchange(options)LinkReturns a newDateTimewhere one or more of the elements have been changed according to theoptionsparameter. The time options (:hour,:min,:sec) reset cascadingly, so if only the hour is passed, then minute and sec is set to 0. If the hour and minute is passed, then sec is set to 0. Theoptionsparameter takes a hash with any of these keys::year,:month,:day,:hour,:min,:sec,:offset,:start.DateTime.new(2012, 8, 29, 22, 35, 0).change(day: 1)              # => DateTime.new(2012, 8, 1, 22, 35, 0)
DateTime.new(2012, 8, 29, 22, 35, 0).change(year: 1981, day: 1)  # => DateTime.new(1981, 8, 1, 22, 35, 0)
DateTime.new(2012, 8, 29, 22, 35, 0).change(year: 1981, hour: 0) # => DateTime.new(1981, 8, 29, 0, 0, 0)Source:show|on GitHub# File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 51defchange(options)ifnew_nsec=options[:nsec]raiseArgumentError,"Can't change both :nsec and :usec at the same time: #{options.inspect}"ifoptions[:usec]new_fraction=Rational(new_nsec,1000000000)elsenew_usec=options.fetch(:usec, (options[:hour]||options[:min]||options[:sec])?0:Rational(nsec,1000))new_fraction=Rational(new_usec,1000000)endraiseArgumentError,"argument out of range"ifnew_fraction>=1::DateTime.civil(options.fetch(:year,year),options.fetch(:month,month),options.fetch(:day,day),options.fetch(:hour,hour),options.fetch(:min,options[:hour]?0:min),options.fetch(:sec, (options[:hour]||options[:min])?0:sec)+new_fraction,options.fetch(:offset,offset),options.fetch(:start,start)
  )enddefault_inspect()LinkAlias for:inspectend_of_day()LinkReturns a newDateTimerepresenting the end of the day (23:59:59).Also aliased as:at_end_of_daySource:show|on GitHub# File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 140defend_of_daychange(hour:23,min:59,sec:59,usec:Rational(999999999,1000))endend_of_hour()LinkReturns a newDateTimerepresenting the end of the hour (hh:59:59).Also aliased as:at_end_of_hourSource:show|on GitHub# File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 152defend_of_hourchange(min:59,sec:59,usec:Rational(999999999,1000))endend_of_minute()LinkReturns a newDateTimerepresenting the end of the minute (hh:mm:59).Also aliased as:at_end_of_minuteSource:show|on GitHub# File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 164defend_of_minutechange(sec:59,usec:Rational(999999999,1000))endformatted_offset(colon = true, alternate_utc_string = nil)LinkReturns a formatted string of the offset from UTC, or an alternative string if the time zone is already UTC.datetime = DateTime.civil(2000, 1, 1, 0, 0, 0, Rational(-6, 24))
datetime.formatted_offset         # => "-06:00"
datetime.formatted_offset(false)  # => "-0600"Source:show|on GitHub# File activesupport/lib/active_support/core_ext/date_time/conversions.rb, line 51defformatted_offset(colon=true,alternate_utc_string=nil)utc?&&alternate_utc_string||ActiveSupport::TimeZone.seconds_to_utc_offset(utc_offset,colon)endgetgm()LinkAlias for:utcgetlocal(utc_offset = nil)LinkAlias for:localtimegetutc()LinkAlias for:utcgmtime()LinkAlias for:utcin(seconds)LinkAlias for:sinceinspect()LinkAlso aliased as:default_inspectAlias for:readable_inspectlocaltime(utc_offset = nil)LinkReturns aTimeinstance of the simultaneous time in the system timezone.Also aliased as:getlocalSource:show|on GitHub# File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 170deflocaltime(utc_offset=nil)utc=new_offset(0)Time.utc(utc.year,utc.month,utc.day,utc.hour,utc.min,utc.sec+utc.sec_fraction).getlocal(utc_offset)endmidday()LinkAlias for:middle_of_daymiddle_of_day()LinkReturns a newDateTimerepresenting the middle of the day (12:00)Also aliased as:midday,noon,at_midday,at_noon,at_middle_of_daySource:show|on GitHub# File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 130defmiddle_of_daychange(hour:12)endmidnight()LinkAlias for:beginning_of_daynoon()LinkAlias for:middle_of_daynsec()LinkReturns the fraction of a second as nanosecondsSource:show|on GitHub# File activesupport/lib/active_support/core_ext/date_time/conversions.rb, line 94defnsec(sec_fraction*1_000_000_000).to_iendreadable_inspect()LinkOverrides the default inspect method with a human readable one, e.g., âMon, 21 Feb 2005 14:30:00 +0000â.Also aliased as:inspectSource:show|on GitHub# File activesupport/lib/active_support/core_ext/date_time/conversions.rb, line 56defreadable_inspectto_fs(:rfc822)endseconds_since_midnight()LinkReturns the number of seconds since 00:00:00.DateTime.new(2012, 8, 29,  0,  0,  0).seconds_since_midnight # => 0
DateTime.new(2012, 8, 29, 12, 34, 56).seconds_since_midnight # => 45296
DateTime.new(2012, 8, 29, 23, 59, 59).seconds_since_midnight # => 86399Source:show|on GitHub# File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 20defseconds_since_midnightsec+(min*60)+(hour*3600)endseconds_until_end_of_day()LinkReturns the number of seconds until 23:59:59.DateTime.new(2012, 8, 29,  0,  0,  0).seconds_until_end_of_day # => 86399
DateTime.new(2012, 8, 29, 12, 34, 56).seconds_until_end_of_day # => 41103
DateTime.new(2012, 8, 29, 23, 59, 59).seconds_until_end_of_day # => 0Source:show|on GitHub# File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 29defseconds_until_end_of_dayend_of_day.to_i-to_iendsince(seconds)LinkReturns a newDateTimerepresenting the time a number of seconds since the instance time. Do not use this method in combination with x.months, use months_since instead!Also aliased as:inSource:show|on GitHub# File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 116defsince(seconds)self+Rational(seconds,86400)endsubsec()LinkReturns the fraction of a second as aRationalDateTime.new(2012, 8, 29, 0, 0, 0.5).subsec # => (1/2)Source:show|on GitHub# File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 36defsubsecsec_fractionendto_f()LinkConvertsselfto a floating-point number of seconds, including fractional microseconds, since the Unix epoch.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/date_time/conversions.rb, line 79defto_fseconds_since_unix_epoch.to_f+sec_fractionendto_formatted_s(format = :default)LinkAlias for:to_fsto_fs(format = :default)LinkConvert to a formatted string. See Time::DATE_FORMATS for predefined formats.This method is aliased toto_formatted_s.Examplesdatetime = DateTime.civil(2007, 12, 4, 0, 0, 0, 0)   # => Tue, 04 Dec 2007 00:00:00 +0000

datetime.to_fs(:db)            # => "2007-12-04 00:00:00"
datetime.to_formatted_s(:db)   # => "2007-12-04 00:00:00"
datetime.to_fs(:number)        # => "20071204000000"
datetime.to_fs(:short)         # => "04 Dec 00:00"
datetime.to_fs(:long)          # => "December 04, 2007 00:00"
datetime.to_fs(:long_ordinal)  # => "December 4th, 2007 00:00"
datetime.to_fs(:rfc822)        # => "Tue, 04 Dec 2007 00:00:00 +0000"
datetime.to_fs(:iso8601)       # => "2007-12-04T00:00:00+00:00"Adding your own datetime formats toto_fsDateTimeformats are shared withTime. You can add your own to the Time::DATE_FORMATS hash. Use the format name as the hash key and either a strftime string or Proc instance that takes a time or datetime argument as the value.# config/initializers/time_formats.rb
Time::DATE_FORMATS[:month_and_year] = '%B %Y'
Time::DATE_FORMATS[:short_ordinal] = lambda { |time| time.strftime("%B #{time.day.ordinalize}") }Also aliased as:to_formatted_sSource:show|on GitHub# File activesupport/lib/active_support/core_ext/date_time/conversions.rb, line 35defto_fs(format=:default)ifformatter=::Time::DATE_FORMATS[format]formatter.respond_to?(:call)?formatter.call(self).to_s:strftime(formatter)elseto_sendendto_i()LinkConvertsselfto an integer number of seconds since the Unix epoch.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/date_time/conversions.rb, line 84defto_iseconds_since_unix_epoch.to_iendto_time()LinkEither return an instance ofTimewith the same UTC offset asselfor an instance ofTimerepresenting the same time in the local system timezone depending on the setting of on the setting ofActiveSupport.to_time_preserves_timezone.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/date_time/compatibility.rb, line 15defto_timepreserve_timezone?getlocal(utc_offset):getlocalendusec()LinkReturns the fraction of a second as microsecondsSource:show|on GitHub# File activesupport/lib/active_support/core_ext/date_time/conversions.rb, line 89defusec(sec_fraction*1_000_000).to_iendutc()LinkReturns aTimeinstance of the simultaneous time in the UTC timezone.DateTime.civil(2005, 2, 21, 10, 11, 12, Rational(-6, 24))     # => Mon, 21 Feb 2005 10:11:12 -0600
DateTime.civil(2005, 2, 21, 10, 11, 12, Rational(-6, 24)).utc # => Mon, 21 Feb 2005 16:11:12 UTCAlso aliased as:getgm,getutc,gmtimeSource:show|on GitHub# File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 184defutcutc=new_offset(0)Time.utc(utc.year,utc.month,utc.day,utc.hour,utc.min,utc.sec+utc.sec_fraction)endutc?()LinkReturnstrueifoffset == 0.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 197defutc?offset==0endutc_offset()LinkReturns the offset value in seconds.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 202defutc_offset(offset*86400).to_iend