Active Record Query LogsAutomatically append comments to SQL queries with runtime information tags. This can be used to trace troublesome SQL statements back to the application code that generated these statements.Query logs can be enabled via Rails configuration inconfig/application.rbor an initializer:config.active_record.query_log_tags_enabled = trueBy default the name of the application, the name and action of the controller, or the name of the job are logged. The default format isSQLCommenter. The tags shown in a query comment can be configured via Rails configuration:config.active_record.query_log_tags = [ :application, :controller, :action, :job ]Active Record defines default tags available for use:applicationpidsocketdb_hostdatabasesource_locationAction Controller adds default tags when loaded:controlleractionnamespaced_controllerActive Job adds default tags when loaded:jobNew comment tags can be defined by adding them in aHashto the tagsArray. Tags can have dynamic content by setting aProcor lambda value in theHash, and can reference any value stored by Rails in thecontextobject.ActiveSupport::CurrentAttributescan be used to store application values. Tags withnilvalues are omitted from the query comment.Escaping is performed on the string returned, however untrusted user input should not be used.Example:config.active_record.query_log_tags = [
  :namespaced_controller,
  :action,
  :job,
  {
    request_id: ->(context) { context[:controller]&.request&.request_id },
    job_id: ->(context) { context[:job]&.job_id },
    tenant_id: -> { Current.tenant&.id },
    static: "value",
  },
]By default the name of the application, the name and action of the controller, or the name of the job are logged using theSQLCommenterformat. This can be changed viaconfig.active_record.query_log_tags_formatTag comments can be prepended to the query:ActiveRecord::QueryLogs.prepend_comment = trueFor applications where the content will not change during the lifetime of the request or job execution, the tags can be cached for reuse in every query:config.active_record.cache_query_log_tags = trueMethodsUupdate_formatterClass Public methodsupdate_formatter(format)LinkUpdates the formatter to be what the passed in format is.Source:show|on GitHub# File activerecord/lib/active_record/query_logs.rb, line 100defupdate_formatter(format)self.tags_formatter=caseformatwhen:legacyLegacyFormatter.newwhen:sqlcommenterSQLCommenter.newelseraiseArgumentError,"Formatter is unsupported: #{formatter}"endend