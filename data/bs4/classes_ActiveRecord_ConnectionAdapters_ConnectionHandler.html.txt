Active Record Connection HandlerConnectionHandleris a collection ofConnectionPoolobjects. It is used for keeping separate connection pools that connect to different databases.For example, suppose that you have 5 models, with the following hierarchy:class Author < ActiveRecord::Base
end

class BankAccount < ActiveRecord::Base
end

class Book < ActiveRecord::Base
  establish_connection :library_db
end

class ScaryBook < Book
end

class GoodBook < Book
endAnd a database.yml that looked like this:development:
  database: my_application
  host: localhost

library_db:
  database: library
  host: some.library.orgYour primary database in the development environment is âmy_applicationâ but the Book model connects to a separate database called âlibrary_dbâ (this can even be a database on a different machine).Book, ScaryBook, and GoodBook will all use the same connection pool to âlibrary_dbâ while Author, BankAccount, and any other models you create will use the default connection pool to âmy_applicationâ.The various connection pools are managed by a single instance ofConnectionHandleraccessible viaActiveRecord::Base.connection_handler. All Active Record models use this handler to determine the connection pool that they should use.TheConnectionHandlerclass is not coupled with the Active models, as it has no knowledge about the model. The model needs to pass a connection specification name to the handler, in order to look up the correct connection pool.MethodsAactive_connections?Cclear_active_connections!,clear_all_connections!,clear_reloadable_connections!,connected?,connection_pool_list,connection_poolsEestablish_connectionFflush_idle_connections!NnewRremove_connection_pool,retrieve_connection_poolClass Public methodsnew()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/abstract/connection_handler.rb, line 74definitialize# These caches are keyed by pool_config.connection_name (PoolConfig#connection_name).@connection_name_to_pool_manager=Concurrent::Map.new(initial_capacity:2)endInstance Public methodsactive_connections?(role = nil)LinkReturns true if there are any active connections among the connection pools that theConnectionHandleris managing.Source:show|on GitHub# File activerecord/lib/active_record/connection_adapters/abstract/connection_handler.rb, line 155defactive_connections?(role=nil)each_connection_pool(role).any?(&:active_connection?)endclear_active_connections!(role = nil)LinkReturns any connections in use by the current thread back to the pool, and also returns connections to the pool cached by threads that are no longer alive.Source:show|on GitHub# File activerecord/lib/active_record/connection_adapters/abstract/connection_handler.rb, line 162defclear_active_connections!(role=nil)each_connection_pool(role).eachdo|pool|pool.release_connectionpool.disable_query_cache!endendclear_all_connections!(role = nil)LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/abstract/connection_handler.rb, line 176defclear_all_connections!(role=nil)each_connection_pool(role).each(&:disconnect!)endclear_reloadable_connections!(role = nil)LinkClears the cache which maps classes.SeeConnectionPool#clear_reloadable_connections!for details.Source:show|on GitHub# File activerecord/lib/active_record/connection_adapters/abstract/connection_handler.rb, line 172defclear_reloadable_connections!(role=nil)each_connection_pool(role).each(&:clear_reloadable_connections!)endconnected?(connection_name, role: ActiveRecord::Base.current_role, shard: ActiveRecord::Base.current_shard)LinkReturns true if a connection thatâs accessible to this class has already been opened.Source:show|on GitHub# File activerecord/lib/active_record/connection_adapters/abstract/connection_handler.rb, line 198defconnected?(connection_name,role:ActiveRecord::Base.current_role,shard:ActiveRecord::Base.current_shard)pool=retrieve_connection_pool(connection_name,role:role,shard:shard)pool&&pool.connected?endconnection_pool_list(role = nil)LinkReturns the pools for a connection handler and given role. If:allis passed, all pools belonging to the connection handler will be returned.Also aliased as:connection_poolsSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/abstract/connection_handler.rb, line 93defconnection_pool_list(role=nil)ifrole.nil?||role==:allconnection_name_to_pool_manager.values.flat_map{|m|m.pool_configs.map(&:pool) }elseconnection_name_to_pool_manager.values.flat_map{|m|m.pool_configs(role).map(&:pool) }endendconnection_pools(role = nil)LinkAlias for:connection_pool_listestablish_connection(config, owner_name: Base, role: Base.current_role, shard: Base.current_shard, clobber: false)LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/abstract/connection_handler.rb, line 113defestablish_connection(config,owner_name:Base,role:Base.current_role,shard:Base.current_shard,clobber:false)owner_name=determine_owner_name(owner_name,config)pool_config=resolve_pool_config(config,owner_name,role,shard)db_config=pool_config.db_configpool_manager=set_pool_manager(pool_config.connection_name)# If there is an existing pool with the same values as the pool_config# don't remove the connection. Connections should only be removed if we are# establishing a connection on a class that is already connected to a different# configuration.existing_pool_config=pool_manager.get_pool_config(role,shard)if!clobber&&existing_pool_config&&existing_pool_config.db_config==db_config# Update the pool_config's connection class if it differs. This is used# for ensuring that ActiveRecord::Base and the primary_abstract_class use# the same pool. Without this granular swapping will not work correctly.ifowner_name.primary_class?&&(existing_pool_config.connection_class!=owner_name)existing_pool_config.connection_class=owner_nameendexisting_pool_config.poolelsedisconnect_pool_from_pool_manager(pool_manager,role,shard)pool_manager.set_pool_config(role,shard,pool_config)payload= {connection_name:pool_config.connection_name,role:role,shard:shard,config:db_config.configuration_hash}ActiveSupport::Notifications.instrumenter.instrument("!connection.active_record",payload)dopool_config.poolendendendflush_idle_connections!(role = nil)LinkDisconnects all currently idle connections.SeeConnectionPool#flush!for details.Source:show|on GitHub# File activerecord/lib/active_record/connection_adapters/abstract/connection_handler.rb, line 183defflush_idle_connections!(role=nil)each_connection_pool(role).each(&:flush!)endremove_connection_pool(connection_name, role: ActiveRecord::Base.current_role, shard: ActiveRecord::Base.current_shard)LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/abstract/connection_handler.rb, line 203defremove_connection_pool(connection_name,role:ActiveRecord::Base.current_role,shard:ActiveRecord::Base.current_shard)ifpool_manager=get_pool_manager(connection_name)disconnect_pool_from_pool_manager(pool_manager,role,shard)endendretrieve_connection_pool(connection_name, role: ActiveRecord::Base.current_role, shard: ActiveRecord::Base.current_shard, strict: false)LinkRetrieving the connection pool happens a lot, so we cache it in @connection_name_to_pool_manager. This makes retrieving the connection pool O(1) once the process is warm. When a connection is established or removed, we invalidate the cache.Source:show|on GitHub# File activerecord/lib/active_record/connection_adapters/abstract/connection_handler.rb, line 212defretrieve_connection_pool(connection_name,role:ActiveRecord::Base.current_role,shard:ActiveRecord::Base.current_shard,strict:false)pool=get_pool_manager(connection_name)&.get_pool_config(role,shard)&.poolifstrict&&!poolifshard!=ActiveRecord::Base.default_shardmessage="No connection pool for '#{connection_name}' found for the '#{shard}' shard."elsifrole!=ActiveRecord::Base.default_rolemessage="No connection pool for '#{connection_name}' found for the '#{role}' role."elsemessage="No connection pool for '#{connection_name}' found."endraiseConnectionNotEstablished,messageendpoolend