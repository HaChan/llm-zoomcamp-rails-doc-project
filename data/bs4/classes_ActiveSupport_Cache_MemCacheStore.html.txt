Memcached Cache StoreA cache store implementation which stores data in Memcached:memcached.orgThis is currently the most popular cache store for production websites.Special features:Clustering and load balancing. One can specify multiple memcached servers, andMemCacheStorewill load balance between all available servers. If a server goes down, thenMemCacheStorewill ignore it until it comes back up.MemCacheStoreimplements theStrategy::LocalCachestrategy which implements an in-memory cache inside of a block.MethodsCclearDdecrementIincrement,inspectNnewSstats,supports_cache_versioning?WwriteConstantsESCAPE_KEY_CHARS=/[\x00-\x20%\x7F-\xFF]/nKEY_MAX_SIZE=250OVERRIDDEN_OPTIONS=UNIVERSAL_OPTIONSThese options represent behavior overridden by this implementation and should not be allowed to get down to the Dalli clientClass Public methodsnew(*addresses)LinkCreates a newMemCacheStoreobject, with the given memcached server addresses. Each address is either a host name, or a host-with-port string in the form of âhost_name:portâ. For example:ActiveSupport::Cache::MemCacheStore.new("localhost", "server-downstairs.localnetwork:8229")If no addresses are provided, butENV['MEMCACHE_SERVERS']is defined, it will be used instead. Otherwise,MemCacheStorewill connect to localhost:11211 (the default memcached port).Source:show|on GitHub# File activesupport/lib/active_support/cache/mem_cache_store.rb, line 77definitialize(*addresses)addresses=addresses.flattenoptions=addresses.extract_options!ifoptions.key?(:cache_nils)options[:skip_nil] =!options.delete(:cache_nils)endsuper(options)unless[String,Dalli::Client,NilClass].include?(addresses.first.class)raiseArgumentError,"First argument must be an empty array, address, or array of addresses."end@mem_cache_options=options.dup# The value "compress: false" prevents duplicate compression within Dalli.@mem_cache_options[:compress] =false(OVERRIDDEN_OPTIONS-%i(compress)).each{|name|@mem_cache_options.delete(name) }@data=self.class.build_mem_cache(*(addresses+[@mem_cache_options]))endsupports_cache_versioning?()LinkAdvertise cache versioning support.Source:show|on GitHub# File activesupport/lib/active_support/cache/mem_cache_store.rb, line 38defself.supports_cache_versioning?trueendInstance Public methodsclear(options = nil)LinkClear the entire cache on all memcached servers. This method should be used with care when shared cache is being used.Source:show|on GitHub# File activesupport/lib/active_support/cache/mem_cache_store.rb, line 171defclear(options=nil)rescue_error_with(nil) {@data.with{|c|c.flush_all} }enddecrement(name, amount = 1, options = nil)LinkDecrement a cached integer value using the memcached decr atomic operator. Returns the updated value.If the key is unset or has expired, it will be set to 0. Memcached does not support negative counters.cache.decrement("foo") # => 0To set a specific value, callwritepassingraw: true:cache.write("baz", 5, raw: true)
cache.decrement("baz") # => 4Decrementing a non-numeric value, or a value written withoutraw: true, will fail and returnnil.Source:show|on GitHub# File activesupport/lib/active_support/cache/mem_cache_store.rb, line 158defdecrement(name,amount=1,options=nil)options=merged_options(options)key=normalize_key(name,options)instrument(:decrement,key,amount:amount)dorescue_error_withnildo@data.with{|c|c.decr(key,amount,options[:expires_in],0) }endendendincrement(name, amount = 1, options = nil)LinkIncrement a cached integer value using the memcached incr atomic operator. Returns the updated value.If the key is unset or has expired, it will be set toamount:cache.increment("foo") # => 1
cache.increment("bar", 100) # => 100To set a specific value, callwritepassingraw: true:cache.write("baz", 5, raw: true)
cache.increment("baz") # => 6Incrementing a non-numeric value, or a value written withoutraw: true, will fail and returnnil.Source:show|on GitHub# File activesupport/lib/active_support/cache/mem_cache_store.rb, line 132defincrement(name,amount=1,options=nil)options=merged_options(options)key=normalize_key(name,options)instrument(:increment,key,amount:amount)dorescue_error_withnildo@data.with{|c|c.incr(key,amount,options[:expires_in],amount) }endendendinspect()LinkSource:show|on GitHub# File activesupport/lib/active_support/cache/mem_cache_store.rb, line 96definspectinstance=@data||@mem_cache_options"#<#{self.class} options=#{options.inspect} mem_cache=#{instance.inspect}>"endstats()LinkGet the statistics from the memcached servers.Source:show|on GitHub# File activesupport/lib/active_support/cache/mem_cache_store.rb, line 176defstats@data.with{|c|c.stats}endwrite(name, value, options = nil)LinkBehaves the same asActiveSupport::Cache::Store#write, but supports additional options specific to memcached.Additional Optionsraw: true- Sends the value directly to the server as raw bytes. The value must be a string or number. You can use memcached direct operations likeincrementanddecrementonly on raw values.unless_exist: true- Prevents overwriting an existing cache entry.Source:on GitHub# File activesupport/lib/active_support/cache/mem_cache_store.rb, line 102