Action View Form BuilderAFormBuilderobject is associated with a particular model object and allows you to generate fields associated with the model object. TheFormBuilderobject is yielded when usingform_withorfields_for. For example:<%= form_with model: @person do |person_form| %>
  Name: <%= person_form.text_field :name %>
  Admin: <%= person_form.check_box :admin %>
<% end %>In the above block, aFormBuilderobject is yielded as theperson_formvariable. This allows you to generate thetext_fieldandcheck_boxfields by specifying their eponymous methods, which modify the underlying template and associates the@personmodel object with the form.TheFormBuilderobject can be thought of as serving as a proxy for the methods in theFormHelpermodule. This class, however, allows you to call methods with the model object you are building the form for.You can create your own customFormBuildertemplates by subclassing this class. For example:class MyFormBuilder < ActionView::Helpers::FormBuilder
  def div_radio_button(method, tag_value, options = {})
    @template.content_tag(:div,
      @template.radio_button(
        @object_name, method, tag_value, objectify_options(options)
      )
    )
  end
endThe above code creates a new methoddiv_radio_buttonwhich wraps a div around the new radio button. Note that when options are passed in, you must callobjectify_optionsin order for the model object to get correctly passed to the method. Ifobjectify_optionsis not called, then the newly created helper will not be linked back to the model.Thediv_radio_buttoncode from above can now be used as follows:<%= form_with model: @person, :builder => MyFormBuilder do |f| %>
  I am a child: <%= f.div_radio_button(:admin, "child") %>
  I am an adult: <%= f.div_radio_button(:admin, "adult") %>
<% end -%>The standard set of helper methods for form building are located in thefield_helpersclass attribute.Methods#_to_partial_pathBbuttonCcheck_box,collection_check_boxes,collection_radio_buttons,collection_select,color_fieldDdate_field,date_select,datetime_field,datetime_local_field,datetime_selectEemail_fieldFfield_id,field_name,fields,fields_for,file_fieldGgrouped_collection_selectHhidden_fieldIidLlabelMmonth_field,multipart=Nnew,number_fieldPpassword_field,phone_fieldRradio_button,range_field,rich_text_areaSsearch_field,select,submitTtelephone_field,text_area,text_field,time_field,time_select,time_zone_select,to_model,to_partial_pathUurl_fieldWweek_field,weekday_selectAttributes[R]index[R]multipart[R]multipart?[RW]object[RW]object_name[RW]optionsClass Public methods_to_partial_path()LinkSource:show|on GitHub# File actionview/lib/action_view/helpers/form_helper.rb, line 1705defself._to_partial_path@_to_partial_path||=name.demodulize.underscore.sub!(/_builder$/,"")endnew(object_name, object, template, options)LinkSource:show|on GitHub# File actionview/lib/action_view/helpers/form_helper.rb, line 1717definitialize(object_name,object,template,options)@nested_child_index= {}@object_name,@object,@template,@options=object_name,object,template,options@default_options=@options?@options.slice(:index,:namespace,:skip_default_ids,:allow_method_names_outside_object):{}@default_html_options=@default_options.except(:skip_default_ids,:allow_method_names_outside_object)convert_to_legacy_options(@options)if@object_name&.end_with?("[]")if(object||=@template.instance_variable_get("@#{@object_name[0..-3]}"))&&object.respond_to?(:to_param)@auto_index=object.to_paramelseraiseArgumentError,"object[] naming but object param and @object var don't exist or don't respond to to_param: #{object.inspect}"endend@multipart=nil@index=options[:index]||options[:child_index]endInstance Public methodsbutton(value = nil, options = {}, &block)LinkAdd the submit button for the given form. When no value is given, it checks if the object is a new resource or not to create the proper label:<%= form_with model: @article do |f| %>
  <%= f.button %>
<% end %>In the example above, if@articleis a new record, it will use âCreate Articleâ as button label; otherwise, it uses âUpdate Articleâ.Those labels can be customized using I18n under thehelpers.submitkey (the same as submit helper) and using%{model}for translation interpolation:en:
  helpers:
    submit:
      create: "Create a %{model}"
      update: "Confirm changes to %{model}"It also searches for a key specific to the given object:en:
  helpers:
    submit:
      article:
        create: "Add %{model}"Examplesbutton("Create article")
# => <button name='button' type='submit'>Create article</button>

button(:draft, value: true)
# => <button id="article_draft" name="article[draft]" value="true" type="submit">Create article</button>

button do
  content_tag(:strong, 'Ask me!')
end
# => <button name='button' type='submit'>
#      <strong>Ask me!</strong>
#    </button>

button do |text|
  content_tag(:strong, text)
end
# => <button name='button' type='submit'>
#      <strong>Create article</strong>
#    </button>

button(:draft, value: true) do
  content_tag(:strong, "Save as draft")
end
# =>  <button id="article_draft" name="article[draft]" value="true" type="submit">
#       <strong>Save as draft</strong>
#     </button>Source:show|on GitHub# File actionview/lib/action_view/helpers/form_helper.rb, line 2649defbutton(value=nil,options= {},&block)casevaluewhenHashvalue,options=nil,valuewhenSymbolvalue,options=nil, {name:field_name(value),id:field_id(value) }.merge!(options.to_h)endvalue||=submit_default_valueifblock_given?value=@template.capture{yield(value) }endformmethod=options[:formmethod]ifformmethod.present?&&!/post|get/i.match?(formmethod)&&!options.key?(:name)&&!options.key?(:value)options.merge!formmethod::post,name:"_method",value:formmethodend@template.button_tag(value,options)endcheck_box(method, options = {}, checked_value = "1", unchecked_value = "0")LinkReturns a checkbox tag tailored for accessing a specified attribute (identified bymethod) on an object assigned to the template (identified byobject). This object must be an instance object (@object) and not a local object. Itâs intended thatmethodreturns an integer and if that integer is above zero, then the checkbox is checked. Additional options on the input tag can be passed as a hash withoptions. Thechecked_valuedefaults to 1 while the defaultunchecked_valueis set to 0 which is convenient for boolean values.OptionsAny standard HTML attributes for the tag can be passed in, for example:class.:checked-trueorfalseforces the state of the checkbox to be checked or not.:include_hidden- If set to false, the auxiliary hidden field described below will not be generated.GotchaThe HTML specification says unchecked check boxes are not successful, and thus web browsers do not send them. Unfortunately this introduces a gotcha: if anInvoicemodel has apaidflag, and in the form that edits a paid invoice the user unchecks its check box, nopaidparameter is sent. So, any mass-assignment idiom like@invoice.update(params[:invoice])wouldnât update the flag.To prevent this the helper generates an auxiliary hidden field before every check box. The hidden field has the same name and its attributes mimic an unchecked check box.This way, the client either sends only the hidden field (representing the check box is unchecked), or both fields. Since the HTML specification says key/value pairs have to be sent in the same order they appear in the form, and parameters extraction gets the last occurrence of any repeated key in the query string, that works for ordinary forms.Unfortunately that workaround does not work when the check box goes within an array-like parameter, as in<%= fields_for "project[invoice_attributes][]", invoice, index: nil do |form| %>
  <%= form.check_box :paid %>
  ...
<% end %>because parameter name repetition is precisely what Rails seeks to distinguish the elements of the array. For each item with a checked check box you get an extra ghost item with only that attribute, assigned to â0â.In that case it is preferable to either usecheck_box_tagor to use hashes instead of arrays.Examples# Let's say that @article.validated? is 1:
check_box("validated")
# => <input name="article[validated]" type="hidden" value="0" />
#    <input checked="checked" type="checkbox" id="article_validated" name="article[validated]" value="1" />

# Let's say that @puppy.gooddog is "no":
check_box("gooddog", {}, "yes", "no")
# => <input name="puppy[gooddog]" type="hidden" value="no" />
#    <input type="checkbox" id="puppy_gooddog" name="puppy[gooddog]" value="yes" />

# Let's say that @eula.accepted is "no":
check_box("accepted", { class: 'eula_check' }, "yes", "no")
# => <input name="eula[accepted]" type="hidden" value="no" />
#    <input type="checkbox" class="eula_check" id="eula_accepted" name="eula[accepted]" value="yes" />Source:show|on GitHub# File actionview/lib/action_view/helpers/form_helper.rb, line 2474defcheck_box(method,options= {},checked_value="1",unchecked_value="0")@template.check_box(@object_name,method,objectify_options(options),checked_value,unchecked_value)endcollection_check_boxes(method, collection, value_method, text_method, options = {}, html_options = {}, &block)LinkWrapsActionView::Helpers::FormOptionsHelper#collection_check_boxesfor form builders:<%= form_for @post do |f| %>
  <%= f.collection_check_boxes :author_ids, Author.all, :id, :name_with_initial %>
  <%= f.submit %>
<% end %>Please refer to the documentation of the base helper for details.Source:show|on GitHub# File actionview/lib/action_view/helpers/form_options_helper.rb, line 908defcollection_check_boxes(method,collection,value_method,text_method,options= {},html_options= {},&block)@template.collection_check_boxes(@object_name,method,collection,value_method,text_method,objectify_options(options),@default_html_options.merge(html_options),&block)endcollection_radio_buttons(method, collection, value_method, text_method, options = {}, html_options = {}, &block)LinkWrapsActionView::Helpers::FormOptionsHelper#collection_radio_buttonsfor form builders:<%= form_for @post do |f| %>
  <%= f.collection_radio_buttons :author_id, Author.all, :id, :name_with_initial %>
  <%= f.submit %>
<% end %>Please refer to the documentation of the base helper for details.Source:show|on GitHub# File actionview/lib/action_view/helpers/form_options_helper.rb, line 920defcollection_radio_buttons(method,collection,value_method,text_method,options= {},html_options= {},&block)@template.collection_radio_buttons(@object_name,method,collection,value_method,text_method,objectify_options(options),@default_html_options.merge(html_options),&block)endcollection_select(method, collection, value_method, text_method, options = {}, html_options = {})LinkWrapsActionView::Helpers::FormOptionsHelper#collection_selectfor form builders:<%= form_for @post do |f| %>
  <%= f.collection_select :person_id, Author.all, :id, :name_with_initial, prompt: true %>
  <%= f.submit %>
<% end %>Please refer to the documentation of the base helper for details.Source:show|on GitHub# File actionview/lib/action_view/helpers/form_options_helper.rb, line 860defcollection_select(method,collection,value_method,text_method,options= {},html_options= {})@template.collection_select(@object_name,method,collection,value_method,text_method,objectify_options(options),@default_html_options.merge(html_options))endcolor_field(method, options = {})LinkWrapsActionView::Helpers::FormHelper#color_fieldfor form builders:<%= form_with model: @user do |f| %>
  <%= f.color_field :favorite_color %>
<% end %>Please refer to the documentation of the base helper for details.Source:on GitHub# File actionview/lib/action_view/helpers/form_helper.rb, line 1840date_field(method, options = {})LinkWrapsActionView::Helpers::FormHelper#date_fieldfor form builders:<%= form_with model: @user do |f| %>
  <%= f.date_field :born_on %>
<% end %>Please refer to the documentation of the base helper for details.Source:on GitHub# File actionview/lib/action_view/helpers/form_helper.rb, line 1892date_select(method, options = {}, html_options = {})LinkWrapsActionView::Helpers::DateHelper#date_selectfor form builders:<%= form_for @person do |f| %>
  <%= f.date_select :birth_date %>
  <%= f.submit %>
<% end %>Please refer to the documentation of the base helper for details.Source:show|on GitHub# File actionview/lib/action_view/helpers/date_helper.rb, line 1237defdate_select(method,options= {},html_options= {})@template.date_select(@object_name,method,objectify_options(options),html_options)enddatetime_field(method, options = {})LinkWrapsActionView::Helpers::FormHelper#datetime_fieldfor form builders:<%= form_with model: @user do |f| %>
  <%= f.datetime_field :graduation_day %>
<% end %>Please refer to the documentation of the base helper for details.Source:on GitHub# File actionview/lib/action_view/helpers/form_helper.rb, line 1918datetime_local_field(method, options = {})LinkWrapsActionView::Helpers::FormHelper#datetime_local_fieldfor form builders:<%= form_with model: @user do |f| %>
  <%= f.datetime_local_field :graduation_day %>
<% end %>Please refer to the documentation of the base helper for details.Source:on GitHub# File actionview/lib/action_view/helpers/form_helper.rb, line 1931datetime_select(method, options = {}, html_options = {})LinkWrapsActionView::Helpers::DateHelper#datetime_selectfor form builders:<%= form_for @person do |f| %>
  <%= f.datetime_select :last_request_at %>
  <%= f.submit %>
<% end %>Please refer to the documentation of the base helper for details.Source:show|on GitHub# File actionview/lib/action_view/helpers/date_helper.rb, line 1261defdatetime_select(method,options= {},html_options= {})@template.datetime_select(@object_name,method,objectify_options(options),html_options)endemail_field(method, options = {})LinkWrapsActionView::Helpers::FormHelper#email_fieldfor form builders:<%= form_with model: @user do |f| %>
  <%= f.email_field :address %>
<% end %>Please refer to the documentation of the base helper for details.Source:on GitHub# File actionview/lib/action_view/helpers/form_helper.rb, line 1983field_id(method, *suffixes, namespace: @options[:namespace], index: @options[:index])LinkGenerate an HTMLidattribute value for the given fieldReturn the value generated by theFormBuilderfor the given attribute name.<%= form_with model: @article do |f| %>
  <%= f.label :title %>
  <%= f.text_field :title, aria: { describedby: f.field_id(:title, :error) } %>
  <%= tag.span("is blank", id: f.field_id(:title, :error) %>
<% end %>In the example above, the<input type="text">element built by the call toFormBuilder#text_fielddeclares anaria-describedbyattribute referencing the<span>element, sharing a commonidroot (article_title, in this case).Source:show|on GitHub# File actionview/lib/action_view/helpers/form_helper.rb, line 1774deffield_id(method,*suffixes,namespace:@options[:namespace],index:@options[:index])@template.field_id(@object_name,method,*suffixes,namespace:namespace,index:index)endfield_name(method, *methods, multiple: false, index: @options[:index])LinkGenerate an HTMLnameattribute value for the given name and field combinationReturn the value generated by theFormBuilderfor the given attribute name.<%= form_with model: @article do |f| %>
  <%= f.text_field :title, name: f.field_name(:title, :subtitle) %>
  <%# => <input type="text" name="article[title][subtitle]"> %>
<% end %>

<%= form_with model: @article do |f| %>
  <%= f.text_field :tag, name: f.field_name(:tag, multiple: true) %>
  <%# => <input type="text" name="article[tag][]"> %>
<% end %>Source:show|on GitHub# File actionview/lib/action_view/helpers/form_helper.rb, line 1794deffield_name(method,*methods,multiple:false,index:@options[:index])object_name=@options.fetch(:as) {@object_name}@template.field_name(object_name,method,*methods,index:index,multiple:multiple)endfields(scope = nil, model: nil, **options, &block)LinkSee the docs for theActionView::Helpers::FormHelper#fieldshelper method.Source:show|on GitHub# File actionview/lib/action_view/helpers/form_helper.rb, line 2328deffields(scope=nil,model:nil,**options,&block)options[:allow_method_names_outside_object] =trueoptions[:skip_default_ids] =!FormHelper.form_with_generates_idsconvert_to_legacy_options(options)fields_for(scope||model,model,options,&block)endfields_for(record_name, record_object = nil, fields_options = nil, &block)LinkCreates a scope around a specific model object like form_with, but doesnât create the form tags themselves. This makesfields_forsuitable for specifying additional model objects in the same form.Although the usage and purpose offields_foris similar toform_withâs, its method signature is slightly different. Likeform_with, it yields aFormBuilderobject associated with a particular model object to a block, and within the block allows methods to be called on the builder to generate fields associated with the model object. Fields may reflect a model object in two ways - how they are named (hence how submitted values appear within theparamshash in the controller) and what default values are shown when the form fields are first displayed. In order for both of these features to be specified independently, both an object name (represented by either a symbol or string) and the object itself can be passed to the method separately -<%= form_with model: @person do |person_form| %>
  First name: <%= person_form.text_field :first_name %>
  Last name : <%= person_form.text_field :last_name %>

  <%= fields_for :permission, @person.permission do |permission_fields| %>
    Admin?  : <%= permission_fields.check_box :admin %>
  <% end %>

  <%= person_form.submit %>
<% end %>In this case, the checkbox field will be represented by an HTMLinputtag with thenameattributepermission[admin], and the submitted value will appear in the controller asparams[:permission][:admin]. If@person.permissionis an existing record with an attributeadmin, the initial state of the checkbox when first displayed will reflect the value of@person.permission.admin.Often this can be simplified by passing just the name of the model object tofields_for-<%= fields_for :permission do |permission_fields| %>
  Admin?: <%= permission_fields.check_box :admin %>
<% end %>â¦in which case, if:permissionalso happens to be the name of an instance variable@permission, the initial state of the input field will reflect the value of that variableâs attribute@permission.admin.Alternatively, you can pass just the model object itself (if the first argument isnât a string or symbolfields_forwill realize that the name has been omitted) -<%= fields_for @person.permission do |permission_fields| %>
  Admin?: <%= permission_fields.check_box :admin %>
<% end %>andfields_forwill derive the required name of the field from theclassof the model object, e.g. if@person.permission, is of classPermission, the field will still be namedpermission[admin].Note: This also works for the methods inFormOptionsHelperandDateHelperthat are designed to work with an object as base, likeFormOptionsHelper#collection_selectandDateHelper#datetime_select.fields_fortries to be smart about parameters, but it can be confused if both name and value parameters are provided and the provided value has the shape of an optionHash. To remove the ambiguity, explicitly pass an optionHash, even if empty.<%= form_with model: @person do |person_form| %>
  ...
  <%= fields_for :permission, @person.permission, {} do |permission_fields| %>
    Admin?: <%= check_box_tag permission_fields.field_name(:admin), @person.permission[:admin] %>
  <% end %>
  ...
<% end %>Nested Attributes ExamplesWhen the object belonging to the current scope has a nested attribute writer for a certain attribute,fields_forwill yield a new scope for that attribute. This allows you to create forms that set or change the attributes of a parent object and its associations in one go.Nested attribute writers are normal setter methods named after an association. The most common way of defining these writers is either withaccepts_nested_attributes_forin a model definition or by defining a method with the proper name. For example: the attribute writer for the association:addressis calledaddress_attributes=.Whether a one-to-one or one-to-many style form builder will be yielded depends on whether the normal reader method returns asingleobject or anarrayof objects.One-to-oneConsider a Person class which returns asingleAddress from theaddressreader method and responds to theaddress_attributes=writer method:class Person
  def address
    @address
  end

  def address_attributes=(attributes)
    # Process the attributes hash
  end
endThis model can now be used with a nestedfields_for, like so:<%= form_with model: @person do |person_form| %>
  ...
  <%= person_form.fields_for :address do |address_fields| %>
    Street  : <%= address_fields.text_field :street %>
    Zip code: <%= address_fields.text_field :zip_code %>
  <% end %>
  ...
<% end %>When address is already an association on a Person you can useaccepts_nested_attributes_forto define the writer method for you:class Person < ActiveRecord::Base
  has_one :address
  accepts_nested_attributes_for :address
endIf you want to destroy the associated model through the form, you have to enable it first using the:allow_destroyoption foraccepts_nested_attributes_for:class Person < ActiveRecord::Base
  has_one :address
  accepts_nested_attributes_for :address, allow_destroy: true
endNow, when you use a form element with the_destroyparameter, with a value that evaluates totrue, you will destroy the associated model (e.g. 1, â1â, true, or âtrueâ):<%= form_with model: @person do |person_form| %>
  ...
  <%= person_form.fields_for :address do |address_fields| %>
    ...
    Delete: <%= address_fields.check_box :_destroy %>
  <% end %>
  ...
<% end %>One-to-manyConsider a Person class which returns anarrayof Project instances from theprojectsreader method and responds to theprojects_attributes=writer method:class Person
  def projects
    [@project1, @project2]
  end

  def projects_attributes=(attributes)
    # Process the attributes hash
  end
endNote that theprojects_attributes=writer method is in fact required forfields_forto correctly identify:projectsas a collection, and the correct indices to be set in the form markup.When projects is already an association on Person you can useaccepts_nested_attributes_forto define the writer method for you:class Person < ActiveRecord::Base
  has_many :projects
  accepts_nested_attributes_for :projects
endThis model can now be used with a nested fields_for. The block given to the nestedfields_forcall will be repeated for each instance in the collection:<%= form_with model: @person do |person_form| %>
  ...
  <%= person_form.fields_for :projects do |project_fields| %>
    <% if project_fields.object.active? %>
      Name: <%= project_fields.text_field :name %>
    <% end %>
  <% end %>
  ...
<% end %>Itâs also possible to specify the instance to be used:<%= form_with model: @person do |person_form| %>
  ...
  <% @person.projects.each do |project| %>
    <% if project.active? %>
      <%= person_form.fields_for :projects, project do |project_fields| %>
        Name: <%= project_fields.text_field :name %>
      <% end %>
    <% end %>
  <% end %>
  ...
<% end %>Or a collection to be used:<%= form_with model: @person do |person_form| %>
  ...
  <%= person_form.fields_for :projects, @active_projects do |project_fields| %>
    Name: <%= project_fields.text_field :name %>
  <% end %>
  ...
<% end %>If you want to destroy any of the associated models through the form, you have to enable it first using the:allow_destroyoption foraccepts_nested_attributes_for:class Person < ActiveRecord::Base
  has_many :projects
  accepts_nested_attributes_for :projects, allow_destroy: true
endThis will allow you to specify which models to destroy in the attributes hash by adding a form element for the_destroyparameter with a value that evaluates totrue(e.g. 1, â1â, true, or âtrueâ):<%= form_with model: @person do |person_form| %>
  ...
  <%= person_form.fields_for :projects do |project_fields| %>
    Delete: <%= project_fields.check_box :_destroy %>
  <% end %>
  ...
<% end %>When a collection is used you might want to know the index of each object in the array. For this purpose, theindexmethod is available in theFormBuilderobject.<%= form_with model: @person do |person_form| %>
  ...
  <%= person_form.fields_for :projects do |project_fields| %>
    Project #<%= project_fields.index %>
    ...
  <% end %>
  ...
<% end %>Note thatfields_forwill automatically generate a hidden field to store the ID of the record. There are circumstances where this hidden field is not needed and you can passinclude_id: falseto preventfields_forfrom rendering it automatically.Source:show|on GitHub# File actionview/lib/action_view/helpers/form_helper.rb, line 2290deffields_for(record_name,record_object=nil,fields_options=nil,&block)fields_options,record_object=record_object,niliffields_options.nil?&&record_object.is_a?(Hash)&&record_object.extractable_options?fields_options||={}fields_options[:builder]||=options[:builder]fields_options[:namespace] =options[:namespace]fields_options[:parent_builder] =selfcaserecord_namewhenString,Symbolifnested_attributes_association?(record_name)returnfields_for_with_nested_attributes(record_name,record_object,fields_options,block)endelserecord_object=@template._object_for_form_builder(record_name)record_name=model_name_from_record_or_class(record_object).param_keyendobject_name=@object_nameindex=ifoptions.has_key?(:index)options[:index]elsifdefined?(@auto_index)object_name=object_name.to_s.delete_suffix("[]")@auto_indexendrecord_name=ifindex"#{object_name}[#{index}][#{record_name}]"elsifrecord_name.end_with?("[]")"#{object_name}[#{record_name[0..-3]}][#{record_object.id}]"else"#{object_name}[#{record_name}]"endfields_options[:child_index] =index@template.fields_for(record_name,record_object,fields_options,&block)endfile_field(method, options = {})LinkReturns a file upload input tag tailored for accessing a specified attribute (identified bymethod) on an object assigned to the template (identified byobject). Additional options on the input tag can be passed as a hash withoptions. These options will be tagged onto the HTML as an HTML element attribute as in the example shown.Using this method inside aform_withblock will set the enclosing formâs encoding tomultipart/form-data.OptionsCreates standard HTML attributes for the tag.:disabled- If set to true, the user will not be able to use this input.:multiple- If set to true, *in most updated browsers* the user will be allowed to select multiple files.:include_hidden- Whenmultiple: trueandinclude_hidden: true, the field will be prefixed with an<input type="hidden">field with an empty value to support submitting an empty collection of files. Sinceinclude_hiddenwill default toconfig.active_storage.multiple_file_field_include_hiddenif you donât specifyinclude_hidden, you will need to passinclude_hidden: falseto prevent submitting an empty collection of files when passingmultiple: true.:accept- If set to one or multiple mime-types, the user will be suggested a filter when choosing a file. You still need to set up model validations.Examples# Let's say that @user has avatar:
file_field(:avatar)
# => <input type="file" id="user_avatar" name="user[avatar]" />

# Let's say that @article has image:
file_field(:image, :multiple => true)
# => <input type="file" id="article_image" name="article[image][]" multiple="multiple" />

# Let's say that @article has attached:
file_field(:attached, accept: 'text/html')
# => <input accept="text/html" type="file" id="article_attached" name="article[attached]" />

# Let's say that @article has image:
file_field(:image, accept: 'image/png,image/gif,image/jpeg')
# => <input type="file" id="article_image" name="article[image]" accept="image/png,image/gif,image/jpeg" />

# Let's say that @attachment has file:
file_field(:file, class: 'file_input')
# => <input type="file" id="attachment_file" name="attachment[file]" class="file_input" />Source:show|on GitHub# File actionview/lib/action_view/helpers/form_helper.rb, line 2557deffile_field(method,options= {})self.multipart=true@template.file_field(@object_name,method,objectify_options(options))endgrouped_collection_select(method, collection, group_method, group_label_method, option_key_method, option_value_method, options = {}, html_options = {})LinkWrapsActionView::Helpers::FormOptionsHelper#grouped_collection_selectfor form builders:<%= form_for @city do |f| %>
  <%= f.grouped_collection_select :country_id, @continents, :countries, :name, :id, :name %>
  <%= f.submit %>
<% end %>Please refer to the documentation of the base helper for details.Source:show|on GitHub# File actionview/lib/action_view/helpers/form_options_helper.rb, line 872defgrouped_collection_select(method,collection,group_method,group_label_method,option_key_method,option_value_method,options= {},html_options= {})@template.grouped_collection_select(@object_name,method,collection,group_method,group_label_method,option_key_method,option_value_method,objectify_options(options),@default_html_options.merge(html_options))endhidden_field(method, options = {})LinkReturns a hidden input tag tailored for accessing a specified attribute (identified bymethod) on an object assigned to the template (identified byobject). Additional options on the input tag can be passed as a hash withoptions. These options will be tagged onto the HTML as an HTML element attribute as in the example shown.Examples# Let's say that @signup.pass_confirm returns true:
hidden_field(:pass_confirm)
# => <input type="hidden" id="signup_pass_confirm" name="signup[pass_confirm]" value="true" />

# Let's say that @article.tag_list returns "blog, ruby":
hidden_field(:tag_list)
# => <input type="hidden" id="article_tag_list" name="article[tag_list]" value="blog, ruby" />

# Let's say that @user.token returns "abcde":
hidden_field(:token)
# => <input type="hidden" id="user_token" name="user[token]" value="abcde" />Source:show|on GitHub# File actionview/lib/action_view/helpers/form_helper.rb, line 2518defhidden_field(method,options= {})@emitted_hidden_id=trueifmethod==:id@template.hidden_field(@object_name,method,objectify_options(options))endid()LinkGenerate an HTMLidattribute value.return the<form>elementâsidattribute.<%= form_with model: @article do |f| %>
  <%# ... %>

  <% content_for :sticky_footer do %>
    <%= form.button(form: f.id) %>
  <% end %>
<% end %>In the example above, the:sticky_footercontent area will exist outside of the<form>element. By declaring theformHTML attribute, we hint to the browser that the generated<button>element should be treated as the<form>elementâs submit button, regardless of where it exists in the DOM.Source:show|on GitHub# File actionview/lib/action_view/helpers/form_helper.rb, line 1754defidoptions.dig(:html,:id)||options[:id]endlabel(method, text = nil, options = {}, &block)LinkReturns a label tag tailored for labelling an input field for a specified attribute (identified bymethod) on an object assigned to the template (identified byobject). The text of label will default to the attribute name unless a translation is found in the current I18n locale (throughhelpers.label.<modelname>.<attribute>) or you specify it explicitly. Additional options on the label tag can be passed as a hash withoptions. These options will be tagged onto the HTML as an HTML element attribute as in the example shown, except for the:valueoption, which is designed to target labels forradio_buttontags (where the value is used in the ID of the input tag).Exampleslabel(:title)
# => <label for="article_title">Title</label>You can localize your labels based on model and attribute names. For example you can define the following in your locale (e.g. en.yml)helpers:
  label:
    article:
      body: "Write your entire text here"Which then will result inlabel(:body)
# => <label for="article_body">Write your entire text here</label>Localization can also be based purely on the translation of the attribute-name (if you are usingActiveRecord):activerecord:
  attributes:
    article:
      cost: "Total cost"label(:cost)
# => <label for="article_cost">Total cost</label>

label(:title, "A short title")
# => <label for="article_title">A short title</label>

label(:title, "A short title", class: "title_label")
# => <label for="article_title" class="title_label">A short title</label>

label(:privacy, "Public Article", value: "public")
# => <label for="article_privacy_public">Public Article</label>

label(:cost) do |translation|
  content_tag(:span, translation, class: "cost_label")
end
# => <label for="article_cost"><span class="cost_label">Total cost</span></label>

label(:cost) do |builder|
  content_tag(:span, builder.translation, class: "cost_label")
end
# => <label for="article_cost"><span class="cost_label">Total cost</span></label>

label(:cost) do |builder|
  content_tag(:span, builder.translation, class: [
    "cost_label",
    ("error_label" if builder.object.errors.include?(:cost))
  ])
end
# => <label for="article_cost"><span class="cost_label error_label">Total cost</span></label>

label(:terms) do
  raw('Accept <a href="/terms">Terms</a>.')
end
# => <label for="article_terms">Accept <a href="/terms">Terms</a>.</label>Source:show|on GitHub# File actionview/lib/action_view/helpers/form_helper.rb, line 2405deflabel(method,text=nil,options= {},&block)@template.label(@object_name,method,text,objectify_options(options),&block)endmonth_field(method, options = {})LinkWrapsActionView::Helpers::FormHelper#month_fieldfor form builders:<%= form_with model: @user do |f| %>
  <%= f.month_field :birthday_month %>
<% end %>Please refer to the documentation of the base helper for details.Source:on GitHub# File actionview/lib/action_view/helpers/form_helper.rb, line 1944multipart=(multipart)LinkSource:show|on GitHub# File actionview/lib/action_view/helpers/form_helper.rb, line 1697defmultipart=(multipart)@multipart=multipartifparent_builder=@options[:parent_builder]parent_builder.multipart=multipartendendnumber_field(method, options = {})LinkWrapsActionView::Helpers::FormHelper#number_fieldfor form builders:<%= form_with model: @user do |f| %>
  <%= f.number_field :age %>
<% end %>Please refer to the documentation of the base helper for details.Source:on GitHub# File actionview/lib/action_view/helpers/form_helper.rb, line 1996password_field(method, options = {})LinkWrapsActionView::Helpers::FormHelper#password_fieldfor form builders:<%= form_with model: @user do |f| %>
  <%= f.password_field :password %>
<% end %>Please refer to the documentation of the base helper for details.Source:on GitHub# File actionview/lib/action_view/helpers/form_helper.rb, line 1814phone_field(method, options = {})LinkWrapsActionView::Helpers::FormHelper#phone_fieldfor form builders:<%= form_with model: @user do |f| %>
  <%= f.phone_field :phone %>
<% end %>Please refer to the documentation of the base helper for details.Source:on GitHub# File actionview/lib/action_view/helpers/form_helper.rb, line 1879radio_button(method, tag_value, options = {})LinkReturns a radio button tag for accessing a specified attribute (identified bymethod) on an object assigned to the template (identified byobject). If the current value ofmethodistag_valuethe radio button will be checked.To force the radio button to be checked passchecked: truein theoptionshash. You may pass HTML options there as well.# Let's say that @article.category returns "rails":
radio_button("category", "rails")
radio_button("category", "java")
# => <input type="radio" id="article_category_rails" name="article[category]" value="rails" checked="checked" />
#    <input type="radio" id="article_category_java" name="article[category]" value="java" />

# Let's say that @user.receive_newsletter returns "no":
radio_button("receive_newsletter", "yes")
radio_button("receive_newsletter", "no")
# => <input type="radio" id="user_receive_newsletter_yes" name="user[receive_newsletter]" value="yes" />
#    <input type="radio" id="user_receive_newsletter_no" name="user[receive_newsletter]" value="no" checked="checked" />Source:show|on GitHub# File actionview/lib/action_view/helpers/form_helper.rb, line 2496defradio_button(method,tag_value,options= {})@template.radio_button(@object_name,method,tag_value,objectify_options(options))endrange_field(method, options = {})LinkWrapsActionView::Helpers::FormHelper#range_fieldfor form builders:<%= form_with model: @user do |f| %>
  <%= f.range_field :age %>
<% end %>Please refer to the documentation of the base helper for details.Source:on GitHub# File actionview/lib/action_view/helpers/form_helper.rb, line 2009rich_text_area(method, options = {})LinkWrapsActionView::Helpers::FormHelper#rich_text_areafor form builders:<%= form_with model: @message do |f| %>
  <%= f.rich_text_area :content %>
<% end %>Please refer to the documentation of the base helper for details.Source:show|on GitHub# File actiontext/app/helpers/action_text/tag_helper.rb, line 99defrich_text_area(method,options= {})@template.rich_text_area(@object_name,method,objectify_options(options))endsearch_field(method, options = {})LinkWrapsActionView::Helpers::FormHelper#search_fieldfor form builders:<%= form_with model: @user do |f| %>
  <%= f.search_field :name %>
<% end %>Please refer to the documentation of the base helper for details.Source:on GitHub# File actionview/lib/action_view/helpers/form_helper.rb, line 1853select(method, choices = nil, options = {}, html_options = {}, &block)LinkWrapsActionView::Helpers::FormOptionsHelper#selectfor form builders:<%= form_for @post do |f| %>
  <%= f.select :person_id, Person.all.collect { |p| [ p.name, p.id ] }, include_blank: true %>
  <%= f.submit %>
<% end %>Please refer to the documentation of the base helper for details.Source:show|on GitHub# File actionview/lib/action_view/helpers/form_options_helper.rb, line 848defselect(method,choices=nil,options= {},html_options= {},&block)@template.select(@object_name,method,choices,objectify_options(options),@default_html_options.merge(html_options),&block)endsubmit(value = nil, options = {})LinkAdd the submit button for the given form. When no value is given, it checks if the object is a new resource or not to create the proper label:<%= form_with model: @article do |f| %>
  <%= f.submit %>
<% end %>In the example above, if@articleis a new record, it will use âCreate Articleâ as submit button label; otherwise, it uses âUpdate Articleâ.Those labels can be customized using I18n under thehelpers.submitkey and using%{model}for translation interpolation:en:
  helpers:
    submit:
      create: "Create a %{model}"
      update: "Confirm changes to %{model}"It also searches for a key specific to the given object:en:
  helpers:
    submit:
      article:
        create: "Add %{model}"Source:show|on GitHub# File actionview/lib/action_view/helpers/form_helper.rb, line 2589defsubmit(value=nil,options= {})value,options=nil,valueifvalue.is_a?(Hash)value||=submit_default_value@template.submit_tag(value,options)endtelephone_field(method, options = {})LinkWrapsActionView::Helpers::FormHelper#telephone_fieldfor form builders:<%= form_with model: @user do |f| %>
  <%= f.telephone_field :phone %>
<% end %>Please refer to the documentation of the base helper for details.Source:on GitHub# File actionview/lib/action_view/helpers/form_helper.rb, line 1866text_area(method, options = {})LinkWrapsActionView::Helpers::FormHelper#text_areafor form builders:<%= form_with model: @user do |f| %>
  <%= f.text_area :detail %>
<% end %>Please refer to the documentation of the base helper for details.Source:on GitHub# File actionview/lib/action_view/helpers/form_helper.rb, line 1827text_field(method, options = {})LinkWrapsActionView::Helpers::FormHelper#text_fieldfor form builders:<%= form_with model: @user do |f| %>
  <%= f.text_field :name %>
<% end %>Please refer to the documentation of the base helper for details.Source:on GitHub# File actionview/lib/action_view/helpers/form_helper.rb, line 1801time_field(method, options = {})LinkWrapsActionView::Helpers::FormHelper#time_fieldfor form builders:<%= form_with model: @user do |f| %>
  <%= f.time_field :born_at %>
<% end %>Please refer to the documentation of the base helper for details.Source:on GitHub# File actionview/lib/action_view/helpers/form_helper.rb, line 1905time_select(method, options = {}, html_options = {})LinkWrapsActionView::Helpers::DateHelper#time_selectfor form builders:<%= form_for @race do |f| %>
  <%= f.time_select :average_lap %>
  <%= f.submit %>
<% end %>Please refer to the documentation of the base helper for details.Source:show|on GitHub# File actionview/lib/action_view/helpers/date_helper.rb, line 1249deftime_select(method,options= {},html_options= {})@template.time_select(@object_name,method,objectify_options(options),html_options)endtime_zone_select(method, priority_zones = nil, options = {}, html_options = {})LinkWrapsActionView::Helpers::FormOptionsHelper#time_zone_selectfor form builders:<%= form_for @user do |f| %>
  <%= f.time_zone_select :time_zone, nil, include_blank: true %>
  <%= f.submit %>
<% end %>Please refer to the documentation of the base helper for details.Source:show|on GitHub# File actionview/lib/action_view/helpers/form_options_helper.rb, line 884deftime_zone_select(method,priority_zones=nil,options= {},html_options= {})@template.time_zone_select(@object_name,method,priority_zones,objectify_options(options),@default_html_options.merge(html_options))endto_model()LinkSource:show|on GitHub# File actionview/lib/action_view/helpers/form_helper.rb, line 1713defto_modelselfendto_partial_path()LinkSource:show|on GitHub# File actionview/lib/action_view/helpers/form_helper.rb, line 1709defto_partial_pathself.class._to_partial_pathendurl_field(method, options = {})LinkWrapsActionView::Helpers::FormHelper#url_fieldfor form builders:<%= form_with model: @user do |f| %>
  <%= f.url_field :homepage %>
<% end %>Please refer to the documentation of the base helper for details.Source:on GitHub# File actionview/lib/action_view/helpers/form_helper.rb, line 1970week_field(method, options = {})LinkWrapsActionView::Helpers::FormHelper#week_fieldfor form builders:<%= form_with model: @user do |f| %>
  <%= f.week_field :birthday_week %>
<% end %>Please refer to the documentation of the base helper for details.Source:on GitHub# File actionview/lib/action_view/helpers/form_helper.rb, line 1957weekday_select(method, options = {}, html_options = {})LinkWrapsActionView::Helpers::FormOptionsHelper#weekday_selectfor form builders:<%= form_for @user do |f| %>
  <%= f.weekday_select :weekday, include_blank: true %>
  <%= f.submit %>
<% end %>Please refer to the documentation of the base helper for details.Source:show|on GitHub# File actionview/lib/action_view/helpers/form_options_helper.rb, line 896defweekday_select(method,options= {},html_options= {})@template.weekday_select(@object_name,method,objectify_options(options),@default_html_options.merge(html_options))end