Active Record CoreNamespaceMODULEActiveRecord::Core::ClassMethodsCLASSActiveRecord::Core::InspectionMaskMethods#<=>,==Cclone,configurations,configurations=,connection_handler,connection_handler,connection_handler=,current_preventing_writes,current_role,current_shardDdestroy_association_async_batch_size,destroy_association_async_job,dupEencode_with,enumerate_columns_in_select_statements,eql?Ffreeze,frozen?,full_inspectHhashIinit_with,inspectLloggerNnewPpretty_printRreadonly!,readonly?Sslice,strict_loading!,strict_loading?,strict_loading_all?,strict_loading_n_plus_one_only?Vvalues_atAttributes[R]strict_loading_modeClass Public methodsconfigurations()LinkReturns a fully resolvedActiveRecord::DatabaseConfigurationsobject.Source:show|on GitHub# File activerecord/lib/active_record/core.rb, line 77defself.configurations@@configurationsendconfigurations=(config)LinkContains the database configuration - as is typically stored in config/database.yml - as anActiveRecord::DatabaseConfigurationsobject.For example, the following database.ymlâ¦development:
  adapter: sqlite3
  database: storage/development.sqlite3

production:
  adapter: sqlite3
  database: storage/production.sqlite3â¦would result inActiveRecord::Base.configurationsto look like this:#<ActiveRecord::DatabaseConfigurations:0x00007fd1acbdf800 @configurations=[
  #<ActiveRecord::DatabaseConfigurations::HashConfig:0x00007fd1acbded10 @env_name="development",
    @name="primary", @config={adapter: "sqlite3", database: "storage/development.sqlite3"}>,
  #<ActiveRecord::DatabaseConfigurations::HashConfig:0x00007fd1acbdea90 @env_name="production",
    @name="primary", @config={adapter: "sqlite3", database: "storage/production.sqlite3"}>
]>Source:show|on GitHub# File activerecord/lib/active_record/core.rb, line 71defself.configurations=(config)@@configurations=ActiveRecord::DatabaseConfigurations.new(config)endconnection_handler()LinkSource:show|on GitHub# File activerecord/lib/active_record/core.rb, line 120defself.connection_handlerActiveSupport::IsolatedExecutionState[:active_record_connection_handler]||default_connection_handlerendconnection_handler=(handler)LinkSource:show|on GitHub# File activerecord/lib/active_record/core.rb, line 124defself.connection_handler=(handler)ActiveSupport::IsolatedExecutionState[:active_record_connection_handler] =handlerendcurrent_preventing_writes()LinkReturns the symbol representing the current setting for preventing writes.ActiveRecord::Base.connected_to(role: :reading) do
  ActiveRecord::Base.current_preventing_writes #=> true
end

ActiveRecord::Base.connected_to(role: :writing) do
  ActiveRecord::Base.current_preventing_writes #=> false
endSource:show|on GitHub# File activerecord/lib/active_record/core.rb, line 183defself.current_preventing_writesconnected_to_stack.reverse_eachdo|hash|returnhash[:prevent_writes]if!hash[:prevent_writes].nil?&&hash[:klasses].include?(Base)returnhash[:prevent_writes]if!hash[:prevent_writes].nil?&&hash[:klasses].include?(connection_class_for_self)endfalseendcurrent_role()LinkReturns the symbol representing the current connected role.ActiveRecord::Base.connected_to(role: :writing) do
  ActiveRecord::Base.current_role #=> :writing
end

ActiveRecord::Base.connected_to(role: :reading) do
  ActiveRecord::Base.current_role #=> :reading
endSource:show|on GitHub# File activerecord/lib/active_record/core.rb, line 146defself.current_roleconnected_to_stack.reverse_eachdo|hash|returnhash[:role]ifhash[:role]&&hash[:klasses].include?(Base)returnhash[:role]ifhash[:role]&&hash[:klasses].include?(connection_class_for_self)enddefault_roleendcurrent_shard()LinkReturns the symbol representing the current connected shard.ActiveRecord::Base.connected_to(role: :reading) do
  ActiveRecord::Base.current_shard #=> :default
end

ActiveRecord::Base.connected_to(role: :writing, shard: :one) do
  ActiveRecord::Base.current_shard #=> :one
endSource:show|on GitHub# File activerecord/lib/active_record/core.rb, line 164defself.current_shardconnected_to_stack.reverse_eachdo|hash|returnhash[:shard]ifhash[:shard]&&hash[:klasses].include?(Base)returnhash[:shard]ifhash[:shard]&&hash[:klasses].include?(connection_class_for_self)enddefault_shardenddestroy_association_async_batch_sizeLinkSpecifies the maximum number of records that will be destroyed in a single background job by thedependent: :destroy_asyncassociation option. Whennil(default), all dependent records will be destroyed in a single background job. If specified, the records to be destroyed will be split into multiple background jobs.Source:show|on GitHub# File activerecord/lib/active_record/core.rb, line 47class_attribute:destroy_association_async_batch_size,instance_writer:false,instance_predicate:false,default:nildestroy_association_async_job()LinkThe job class used to destroy associations in the background.Source:show|on GitHub# File activerecord/lib/active_record/core.rb, line 27defself.destroy_association_async_jobif_destroy_association_async_job.is_a?(String)self._destroy_association_async_job=_destroy_association_async_job.constantizeend_destroy_association_async_jobrescueNameError=>errorraiseNameError,"Unable to load destroy_association_async_job: #{error.message}"endenumerate_columns_in_select_statementsLinkForce enumeration of all columns in SELECT statements. e.g.SELECT first_name, last_name FROM ...instead ofSELECT * FROM ...This avoidsPreparedStatementCacheExpirederrors when a column is added to the database while the app is running.Source:show|on GitHub# File activerecord/lib/active_record/core.rb, line 87class_attribute:enumerate_columns_in_select_statements,instance_accessor:false,default:falseloggerLinkAccepts a logger conforming to the interface of Log4r or the default RubyLoggerclass, which is then passed on to any new database connections made. You can retrieve this logger by callingloggeron either an Active Record model class or an Active Record model instance.Source:show|on GitHub# File activerecord/lib/active_record/core.rb, line 22class_attribute:logger,instance_writer:falsenew(attributes = nil)LinkNew objects can be instantiated as either empty (pass no construction parameter) or pre-set with attributes but not yet saved (pass a hash with key names matching the associated table column names). In both instances, valid attribute keys are determined by the column names of the associated table â hence you canât have attributes that arenât part of the table columns.Example# Instantiates a single new object
User.new(first_name: 'Jamie')Source:show|on GitHub# File activerecord/lib/active_record/core.rb, line 451definitialize(attributes=nil)@new_record=true@attributes=self.class._default_attributes.deep_dupinit_internalsinitialize_internals_callbacksuperyieldselfifblock_given?_run_initialize_callbacksendInstance Public methods<=>(other_object)LinkAllows sort on objectsSource:show|on GitHub# File activerecord/lib/active_record/core.rb, line 638def<=>(other_object)ifother_object.is_a?(self.class)to_key<=>other_object.to_keyelsesuperendend==(comparison_object)LinkReturns true ifcomparison_objectis the same exact object, orcomparison_objectis of the same type andselfhas an ID and it is equal tocomparison_object.id.Note that new records are different from any other record by definition, unless the other record is the receiver itself. Besides, if you fetch existing records withselectand leave the ID out, youâre on your own, this predicate will return false.Note also that destroying a record preserves its ID in the model instance, so deleted models are still comparable.Also aliased as:eql?Source:show|on GitHub# File activerecord/lib/active_record/core.rb, line 604def==(comparison_object)super||comparison_object.instance_of?(self.class)&&primary_key_values_present?&&comparison_object.id==idendcloneLinkIdentical to Rubyâs clone method.  This is a âshallowâ copy.  Be warned that your attributes are not copied. That means that modifying attributes of the clone will modify the original, since they will both point to the same attributes hash. If you need a copy of your attributes hash, please use thedupmethod.user = User.first
new_user = user.clone
user.name               # => "Bob"
new_user.name = "Joe"
user.name               # => "Joe"

user.object_id == new_user.object_id            # => false
user.name.object_id == new_user.name.object_id  # => true

user.name.object_id == user.dup.name.object_id  # => falseSource:on GitHub# File activerecord/lib/active_record/core.rb, line 503connection_handler()LinkSource:show|on GitHub# File activerecord/lib/active_record/core.rb, line 723defconnection_handlerself.class.connection_handlerenddupLinkDuped objects have no id assigned and are treated as new records. Note that this is a âshallowâ copy as it copies the objectâs attributes only, not its associations. The extent of a âdeepâ copy is application specific and is therefore left to the application to implement according to its need. The dup method does not preserve the timestamps (created|updated)_(at|on) and locking column.Source:on GitHub# File activerecord/lib/active_record/core.rb, line 520encode_with(coder)LinkPopulatecoderwith attributes about this record that should be serialized. The structure ofcoderdefined in this method is guaranteed to match the structure ofcoderpassed to theinit_withmethod.Example:class Post < ActiveRecord::Base
end
coder = {}
Post.new.encode_with(coder)
coder # => {"attributes" => {"id" => nil, ... }}Source:show|on GitHub# File activerecord/lib/active_record/core.rb, line 560defencode_with(coder)self.class.yaml_encoder.encode(@attributes,coder)coder["new_record"] =new_record?coder["active_record_yaml_version"] =2endeql?(comparison_object)LinkAlias for:==freeze()LinkClone and freeze the attributes hash such that associations are still accessible, even on destroyed records, but cloned models will not be frozen.Source:show|on GitHub# File activerecord/lib/active_record/core.rb, line 627deffreeze@attributes=@attributes.clone.freezeselfendfrozen?()LinkReturnstrueif the attributes hash has been frozen.Source:show|on GitHub# File activerecord/lib/active_record/core.rb, line 633deffrozen?@attributes.frozen?endfull_inspect()LinkReturns the full contents of the record as a nicely formatted string.Source:show|on GitHub# File activerecord/lib/active_record/core.rb, line 733deffull_inspectinspect_with_attributes(attribute_names)endhash()LinkDelegates to id in order to allow two records of the same type and id to work with something like:[ Person.find(1), Person.find(2), Person.find(3) ] & [ Person.find(1), Person.find(4) ] # => [ Person.find(1) ]Source:show|on GitHub# File activerecord/lib/active_record/core.rb, line 614defhashid=self.idifprimary_key_values_present?self.class.hash^id.hashelsesuperendendinit_with(coder, &block)LinkInitialize an empty model object fromcoder.codershould be the result of previously encoding an Active Record model, usingencode_with.class Post < ActiveRecord::Base
end

old_post = Post.new(title: "hello world")
coder = {}
old_post.encode_with(coder)

post = Post.allocate
post.init_with(coder)
post.title # => 'hello world'Source:show|on GitHub# File activerecord/lib/active_record/core.rb, line 478definit_with(coder,&block)coder=LegacyYamlAdapter.convert(coder)attributes=self.class.yaml_encoder.decode(coder)init_with_attributes(attributes,coder["new_record"],&block)endinspect()LinkReturns the attributes specified by.attributes_for_inspectas a nicely formatted string.Source:show|on GitHub# File activerecord/lib/active_record/core.rb, line 728definspectinspect_with_attributes(attributes_for_inspect)endpretty_print(pp)LinkTakes a PP and prettily prints this record to it, allowing you to get a nice result frompp recordwhen pp is required.Source:show|on GitHub# File activerecord/lib/active_record/core.rb, line 739defpretty_print(pp)returnsuperifcustom_inspect_method_defined?pp.object_address_group(self)doif@attributesattr_names=attributes_for_inspect.select{|name|_has_attribute?(name.to_s) }pp.seplist(attr_names,proc{pp.text","})do|attr_name|attr_name=attr_name.to_spp.breakable" "pp.group(1)dopp.textattr_namepp.text":"pp.breakablevalue=attribute_for_inspect(attr_name)pp.textvalueendendelsepp.breakable" "pp.text"not initialized"endendendreadonly!()LinkMarks this record as read only.customer = Customer.first
customer.readonly!
customer.save # Raises an ActiveRecord::ReadOnlyRecordSource:show|on GitHub# File activerecord/lib/active_record/core.rb, line 719defreadonly!@readonly=trueendreadonly?()LinkReturnstrueif the record is read only.Source:show|on GitHub# File activerecord/lib/active_record/core.rb, line 655defreadonly?@readonlyendslice(*methods)LinkReturns a hash of the given methods with their names as keys and returned values as values.topic = Topic.new(title: "Budget", author_name: "Jason")
topic.slice(:title, :author_name)
=> { "title" => "Budget", "author_name" => "Jason" }Source:on GitHub# File activerecord/lib/active_record/core.rb, line 567strict_loading!(value = true, mode: :all)LinkSets the record to strict_loading mode. This will raise an error if the record tries to lazily load an association.user = User.first
user.strict_loading! # => true
user.address.city
=> ActiveRecord::StrictLoadingViolationError
user.comments.to_a
=> ActiveRecord::StrictLoadingViolationErrorParametersvalue- Boolean specifying whether to enable or disable strict loading.:mode-Symbolspecifying strict loading mode. Defaults to :all. Using :n_plus_one_only mode will only raise an error if an association that will lead to an n plus one query is lazily loaded.Examplesuser = User.first
user.strict_loading!(false) # => false
user.address.city # => "Tatooine"
user.comments.to_a # => [#<Comment:0x00...]

user.strict_loading!(mode: :n_plus_one_only)
user.address.city # => "Tatooine"
user.comments.to_a # => [#<Comment:0x00...]
user.comments.first.ratings.to_a
=> ActiveRecord::StrictLoadingViolationErrorSource:show|on GitHub# File activerecord/lib/active_record/core.rb, line 693defstrict_loading!(value=true,mode::all)unless[:all,:n_plus_one_only].include?(mode)raiseArgumentError,"The :mode option must be one of [:all, :n_plus_one_only] but #{mode.inspect} was provided."end@strict_loading_mode=mode@strict_loading=valueendstrict_loading?()LinkReturnstrueif the record is in strict_loading mode.Source:show|on GitHub# File activerecord/lib/active_record/core.rb, line 660defstrict_loading?@strict_loadingendstrict_loading_all?()LinkReturnstrueif the record uses strict_loading with:allmode enabled.Source:show|on GitHub# File activerecord/lib/active_record/core.rb, line 710defstrict_loading_all?@strict_loading_mode==:allendstrict_loading_n_plus_one_only?()LinkReturnstrueif the record uses strict_loading with:n_plus_one_onlymode enabled.Source:show|on GitHub# File activerecord/lib/active_record/core.rb, line 705defstrict_loading_n_plus_one_only?@strict_loading_mode==:n_plus_one_onlyendvalues_at(*methods)LinkReturns an array of the values returned by the given methods.topic = Topic.new(title: "Budget", author_name: "Jason")
topic.values_at(:title, :author_name)
=> ["Budget", "Jason"]Source:on GitHub# File activerecord/lib/active_record/core.rb, line 582