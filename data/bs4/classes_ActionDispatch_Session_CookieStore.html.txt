Action DispatchSessionCookieStoreThis cookie-based session store is theRailsdefault. It is dramatically faster than the alternatives.Sessions typically contain at most a user ID and flash message; both fit within the 4096 bytes cookie size limit. ACookieOverflowexception is raised if you attempt to store more than 4096 bytes of data.The cookie jar used for storage is automatically configured to be the best possible option given your applicationâs configuration.Your cookies will be encrypted using your applicationâssecret_key_base. This goes a step further than signed cookies in that encrypted cookies cannot be altered or read by users. This is the default starting inRails4.Configure your session store in an initializer:Rails.application.config.session_store :cookie_store, key: '_your_app_session'In the development and test environments your applicationâssecret_key_baseis generated byRailsand stored in a temporary file intmp/local_secret.txt. In all other environments, it is stored encrypted in theconfig/credentials.yml.encfile.If your application was not updated toRails5.2 defaults, thesecret_key_basewill be found in the oldconfig/secrets.ymlfile.Note that changing yoursecret_key_basewill invalidate all existing session. Additionally, you should take care to make sure you are not relying on the ability to decode signed cookies generated by your app in external applications or JavaScript before changing it.BecauseCookieStoreextendsRack::Session::Abstract::Persisted, many of the options described there can be used to customize the session cookie that is generated. For example:Rails.application.config.session_store :cookie_store, expire_after: 14.dayswould set the session cookie to expire automatically 14 days after creation. Other useful options include:key,:secure,:httponly, and:same_site.NamespaceCLASSActionDispatch::Session::CookieStore::SessionIdMethodsDdelete_sessionLload_sessionNnewClass Public methodsnew(app, options = {})LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/middleware/session/cookie_store.rb, line 64definitialize(app,options= {})options[:cookie_only] =trueoptions[:same_site] =DEFAULT_SAME_SITEif!options.key?(:same_site)superendInstance Public methodsdelete_session(req, session_id, options)LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/middleware/session/cookie_store.rb, line 70defdelete_session(req,session_id,options)new_sid=generate_sidunlessoptions[:drop]# Reset hash and Assign the new session idreq.set_header("action_dispatch.request.unsigned_session_cookie",new_sid?{"session_id"=>new_sid.public_id}:{})new_sidendload_session(req)LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/middleware/session/cookie_store.rb, line 77defload_session(req)stale_session_check!dodata=unpacked_cookie_data(req)data=persistent_session_id!(data)
    [Rack::Session::SessionId.new(data["session_id"]),data]endend