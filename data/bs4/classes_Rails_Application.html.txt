AnEnginewith the responsibility of coordinating the whole boot process.InitializationRails::Applicationis responsible for executing all railties and engines initializers. It also executes some bootstrap initializers (checkRails::Application::Bootstrap) and finishing initializers, after all the others are executed (checkRails::Application::Finisher).ConfigurationBesides providing the same configuration asRails::EngineandRails::Railtie, the application object has several specific configurations, for exampleenable_reloading,consider_all_requests_local,filter_parameters,logger, and so forth.CheckRails::Application::Configurationto see them all.RoutesThe application object is also responsible for holding the routes and reloading routes whenever the files change in development.MiddlewaresTheApplicationis also responsible for building the middleware stack.Booting processThe application is also responsible for setting up and executing the booting process. From the moment you requireconfig/application.rbin your app, the booting process goes like this:require "config/boot.rb"to set up load paths.requirerailties and engines.DefineRails.applicationasclass MyApp::Application < Rails::Application.Runconfig.before_configurationcallbacks.Loadconfig/environments/ENV.rb.Runconfig.before_initializecallbacks.RunRailtie#initializerdefined by railties, engines, and application. One by one, each engine sets up its load paths and routes, and runs itsconfig/initializers/*files.CustomRailtie#initializersadded by railties, engines, and applications are executed.Build the middleware stack and runto_preparecallbacks.Runconfig.before_eager_loadandeager_load!ifeager_loadistrue.Runconfig.after_initializecallbacks.NamespaceMODULERails::Application::BootstrapMODULERails::Application::FinisherCLASSRails::Application::ConfigurationCLASSRails::Application::DefaultMiddlewareStackCLASSRails::Application::RoutesReloaderMethodsCconfig_for,console,create,credentialsDdeprecatorsEeager_load!,encrypted,ensure_generator_templates_added,env_configFfind_rootGgeneratorsIinherited,initialized?,initializer,instance,isolate_namespaceKkey_generatorMmessage_verifier,message_verifiersNname,newRrake_tasks,reload_routes!,runnerSsecret_key_base,serverAttributes[RW]assets[R]autoloaders[W]config[W]credentials[R]executor[R]reloader[R]reloaders[RW]sandbox[RW]sandbox?Class Public methodscreate(initial_variable_values = {}, &block)LinkSource:show|on GitHub# File railties/lib/rails/application.rb, line 83defcreate(initial_variable_values= {},&block)new(initial_variable_values,&block).run_load_hooks!endfind_root(from)LinkSource:show|on GitHub# File railties/lib/rails/application.rb, line 87deffind_root(from)find_root_with_flag"config.ru",from,Dir.pwdendinherited(base)LinkSource:show|on GitHub# File railties/lib/rails/application.rb, line 70definherited(base)superRails.app_class=base# lib has to be added to $LOAD_PATH unconditionally, even if it's in the# autoload paths and config.add_autoload_paths_to_load_path is false.add_lib_to_load_path!(find_root(base.called_from))ActiveSupport.run_load_hooks(:before_configuration,base)endinstance()LinkSource:show|on GitHub# File railties/lib/rails/application.rb, line 79definstancesuper.run_load_hooks!endnew(initial_variable_values = {}, &block)LinkSource:show|on GitHub# File railties/lib/rails/application.rb, line 108definitialize(initial_variable_values= {},&block)super()@initialized=false@reloaders= []@routes_reloader=nil@app_env_config=nil@ordered_railties=nil@railties=nil@key_generators= {}@message_verifiers=nil@deprecators=nil@ran_load_hooks=false@executor=Class.new(ActiveSupport::Executor)@reloader=Class.new(ActiveSupport::Reloader)@reloader.executor=@executor@autoloaders=Rails::Autoloaders.new# are these actually used?@initial_variable_values=initial_variable_values@block=blockendInstance Public methodsconfig_for(name, env: Rails.env)LinkConvenience for loading config/foo.yml for the current Rails env. Example:# config/exception_notification.yml:
production:
  url: http://127.0.0.1:8080
  namespace: my_app_production

development:
  url: http://localhost:3001
  namespace: my_app_development# config/environments/production.rb
Rails.application.configure do
  config.middleware.use ExceptionNotifier, config_for(:exception_notification)
endYou can also store configurations in a shared section which will be merged with the environment configuration# config/example.yml
shared:
  foo:
    bar:
      baz: 1

development:
  foo:
    bar:
      qux: 2# development environment
Rails.application.config_for(:example)[:foo][:bar]
# => { baz: 1, qux: 2 }Source:show|on GitHub# File railties/lib/rails/application.rb, line 283defconfig_for(name,env:Rails.env)yaml=name.is_a?(Pathname)?name:Pathname.new("#{paths["config"].existent.first}/#{name}.yml")ifyaml.exist?require"erb"all_configs=ActiveSupport::ConfigurationFile.parse(yaml).deep_symbolize_keysconfig,shared=all_configs[env.to_sym],all_configs[:shared]ifsharedconfig= {}ifconfig.nil?&&shared.is_a?(Hash)ifconfig.is_a?(Hash)&&shared.is_a?(Hash)config=shared.deep_merge(config)elsifconfig.nil?config=sharedendendifconfig.is_a?(Hash)config=ActiveSupport::OrderedOptions.new.update(config)endconfigelseraise"Could not load configuration. No such file - #{yaml}"endendconsole(&blk)LinkSends any console called in the instance of a new application up to theconsolemethod defined inRails::Railtie.Source:show|on GitHub# File railties/lib/rails/application.rb, line 366defconsole(&blk)self.class.console(&blk)endcredentials()LinkReturns anActiveSupport::EncryptedConfigurationinstance for the credentials file specified byconfig.credentials.content_path.By default,config.credentials.content_pathwill point to eitherconfig/credentials/#{environment}.yml.encfor the current environment (for example,config/credentials/production.yml.encfor theproductionenvironment), orconfig/credentials.yml.encif that file does not exist.The encryption key is taken from eitherENV["RAILS_MASTER_KEY"], or from the file specified byconfig.credentials.key_path. By default,config.credentials.key_pathwill point to eitherconfig/credentials/#{environment}.keyfor the current environment, orconfig/master.keyif that file does not exist.Source:show|on GitHub# File railties/lib/rails/application.rb, line 487defcredentials@credentials||=encrypted(config.credentials.content_path,key_path:config.credentials.key_path)enddeprecators()LinkA managed collection of deprecators (ActiveSupport::Deprecation::Deprecators). The collectionâs configuration methods affect all deprecators in the collection. Additionally, the collectionâssilencemethod silences all deprecators in the collection for the duration of a given block.Source:show|on GitHub# File railties/lib/rails/application.rb, line 239defdeprecators@deprecators||=ActiveSupport::Deprecation::Deprecators.new.tapdo|deprecators|deprecators[:railties] =Rails.deprecatorendendeager_load!()LinkEager loads the application code.Source:show|on GitHub# File railties/lib/rails/application.rb, line 545defeager_load!Rails.autoloaders.each(&:eager_load)endencrypted(path, key_path: "config/master.key", env_key: "RAILS_MASTER_KEY")LinkReturns anActiveSupport::EncryptedConfigurationinstance for an encrypted file. By default, the encryption key is taken from eitherENV["RAILS_MASTER_KEY"], or from theconfig/master.keyfile.my_config = Rails.application.encrypted("config/my_config.enc")

my_config.read
# => "foo:\n  bar: 123\n"

my_config.foo.bar
# => 123Encrypted files can be edited with thebin/rails encrypted:editcommand. (See the output ofbin/rails encrypted:edit --helpfor more information.)Source:show|on GitHub# File railties/lib/rails/application.rb, line 506defencrypted(path,key_path:"config/master.key",env_key:"RAILS_MASTER_KEY")ActiveSupport::EncryptedConfiguration.new(config_path:Rails.root.join(path),key_path:Rails.root.join(key_path),env_key:env_key,raise_if_missing_key:config.require_master_key)endenv_config()LinkStores some of the Rails initial environment parameters which will be used by middlewares and engines to configure themselves.Source:show|on GitHub# File railties/lib/rails/application.rb, line 312defenv_config@app_env_config||=super.merge("action_dispatch.parameter_filter"=>filter_parameters,"action_dispatch.redirect_filter"=>config.filter_redirect,"action_dispatch.secret_key_base"=>secret_key_base,"action_dispatch.show_exceptions"=>config.action_dispatch.show_exceptions,"action_dispatch.show_detailed_exceptions"=>config.consider_all_requests_local,"action_dispatch.log_rescued_responses"=>config.action_dispatch.log_rescued_responses,"action_dispatch.debug_exception_log_level"=>ActiveSupport::Logger.const_get(config.action_dispatch.debug_exception_log_level.to_s.upcase),"action_dispatch.logger"=>Rails.logger,"action_dispatch.backtrace_cleaner"=>Rails.backtrace_cleaner,"action_dispatch.key_generator"=>key_generator,"action_dispatch.http_auth_salt"=>config.action_dispatch.http_auth_salt,"action_dispatch.signed_cookie_salt"=>config.action_dispatch.signed_cookie_salt,"action_dispatch.encrypted_cookie_salt"=>config.action_dispatch.encrypted_cookie_salt,"action_dispatch.encrypted_signed_cookie_salt"=>config.action_dispatch.encrypted_signed_cookie_salt,"action_dispatch.authenticated_encrypted_cookie_salt"=>config.action_dispatch.authenticated_encrypted_cookie_salt,"action_dispatch.use_authenticated_cookie_encryption"=>config.action_dispatch.use_authenticated_cookie_encryption,"action_dispatch.encrypted_cookie_cipher"=>config.action_dispatch.encrypted_cookie_cipher,"action_dispatch.signed_cookie_digest"=>config.action_dispatch.signed_cookie_digest,"action_dispatch.cookies_serializer"=>config.action_dispatch.cookies_serializer,"action_dispatch.cookies_digest"=>config.action_dispatch.cookies_digest,"action_dispatch.cookies_rotations"=>config.action_dispatch.cookies_rotations,"action_dispatch.cookies_same_site_protection"=>coerce_same_site_protection(config.action_dispatch.cookies_same_site_protection),"action_dispatch.use_cookies_with_metadata"=>config.action_dispatch.use_cookies_with_metadata,"action_dispatch.content_security_policy"=>config.content_security_policy,"action_dispatch.content_security_policy_report_only"=>config.content_security_policy_report_only,"action_dispatch.content_security_policy_nonce_generator"=>config.content_security_policy_nonce_generator,"action_dispatch.content_security_policy_nonce_directives"=>config.content_security_policy_nonce_directives,"action_dispatch.permissions_policy"=>config.permissions_policy,
    )endgenerators(&blk)LinkSends any generators called in the instance of a new application up to thegeneratorsmethod defined inRails::Railtie.Source:show|on GitHub# File railties/lib/rails/application.rb, line 372defgenerators(&blk)self.class.generators(&blk)endinitialized?()LinkReturns true if the application is initialized.Source:show|on GitHub# File railties/lib/rails/application.rb, line 133definitialized?@initializedendinitializer(name, opts = {}, &block)LinkSends the initializers to theinitializermethod defined in theRails::Initializablemodule. EachRails::Applicationclass has its own set of initializers, as defined by theInitializablemodule.Source:show|on GitHub# File railties/lib/rails/application.rb, line 354definitializer(name,opts= {},&block)self.class.initializer(name,opts,&block)endisolate_namespace(mod)LinkSends theisolate_namespacemethod up to the class method.Source:show|on GitHub# File railties/lib/rails/application.rb, line 383defisolate_namespace(mod)self.class.isolate_namespace(mod)endkey_generator(secret_key_base = self.secret_key_base)LinkReturns a key generator (ActiveSupport::CachingKeyGenerator) for a specifiedsecret_key_base. The return value is memoized, so additional calls with the samesecret_key_basewill return the same key generator instance.Source:show|on GitHub# File railties/lib/rails/application.rb, line 167defkey_generator(secret_key_base=self.secret_key_base)# number of iterations selected based on consultation with the google security# team. Details at https://github.com/rails/rails/pull/6952#issuecomment-7661220@key_generators[secret_key_base]||=ActiveSupport::CachingKeyGenerator.new(ActiveSupport::KeyGenerator.new(secret_key_base,iterations:1000)
  )endmessage_verifier(verifier_name)LinkReturns a message verifier object.This verifier can be used to generate and verify signed messages in the application.It is recommended not to use the same verifier for different things, so you can get different verifiers passing theverifier_nameargument.For instance,ActiveStorage::Blob.signed_id_verifieris implemented using this feature, which assures that the IDs strings havenât been tampered with and are safe to use in a finder.See theActiveSupport::MessageVerifierdocumentation for more information.Parametersverifier_name- the name of the message verifier.Examplesmessage = Rails.application.message_verifier('my_purpose').generate('data to sign against tampering')
Rails.application.message_verifier('my_purpose').verify(message)
# => 'data to sign against tampering'Source:show|on GitHub# File railties/lib/rails/application.rb, line 231defmessage_verifier(verifier_name)message_verifiers[verifier_name]endmessage_verifiers()LinkReturns a message verifier factory (ActiveSupport::MessageVerifiers). This factory can be used as a central point to configure and create message verifiers (ActiveSupport::MessageVerifier) for your application.By default, message verifiers created by this factory will generate messages using the defaultActiveSupport::MessageVerifieroptions. You can override these options with a combination ofActiveSupport::MessageVerifiers#clear_rotationsandActiveSupport::MessageVerifiers#rotate. However, this must be done prior to building any message verifier instances. For example, in abefore_initializeblock:# Use `url_safe: true` when generating messages
config.before_initialize do |app|
  app.message_verifiers.clear_rotations
  app.message_verifiers.rotate(url_safe: true)
endMessage verifiers created by this factory will always use a secret derived fromsecret_key_basewhen generating messages.clear_rotationswill not affect this behavior. However, oldersecret_key_basevalues can be rotated for verifying messages:# Fall back to old `secret_key_base` when verifying messages
config.before_initialize do |app|
  app.message_verifiers.rotate(secret_key_base: "old secret_key_base")
endSource:show|on GitHub# File railties/lib/rails/application.rb, line 203defmessage_verifiers@message_verifiers||=ActiveSupport::MessageVerifiers.newdo|salt,secret_key_base:self.secret_key_base|key_generator(secret_key_base).generate_key(salt)end.rotate_defaultsendname()LinkReturns the dasherized application name.MyApp::Application.new.name => "my-app"Source:show|on GitHub# File railties/lib/rails/application.rb, line 140defnameself.class.name.underscore.dasherize.delete_suffix("/application")endrake_tasks(&block)LinkIf you try to define a set of Rake tasks on the instance, these will get passed up to the Rake tasks defined on the applicationâs class.Source:show|on GitHub# File railties/lib/rails/application.rb, line 347defrake_tasks(&block)self.class.rake_tasks(&block)endreload_routes!()LinkReload application routes regardless if they changed or not.Source:show|on GitHub# File railties/lib/rails/application.rb, line 159defreload_routes!routes_reloader.reload!endrunner(&blk)LinkSends any runner called in the instance of a new application up to therunnermethod defined inRails::Railtie.Source:show|on GitHub# File railties/lib/rails/application.rb, line 360defrunner(&blk)self.class.runner(&blk)endsecret_key_base()LinkThesecret_key_baseis used as the input secret to the applicationâs key generator, which in turn is used to create allActiveSupport::MessageVerifierandActiveSupport::MessageEncryptorinstances, including the ones that sign and encrypt cookies.In development and test, this is randomly generated and stored in a temporary file intmp/local_secret.txt.You can also setENV["SECRET_KEY_BASE_DUMMY"]to trigger the use of a randomly generatedsecret_key_basethatâs stored in a temporary file. This is useful when precompiling assets for production as part of a build step that otherwise does not need access to the production secrets.Dockerfile example:RUN SECRET_KEY_BASE_DUMMY=1 bundle exec rails assets:precompile.In all other environments, we look for it first inENV["SECRET_KEY_BASE"], thencredentials.secret_key_base. For most applications, the correct place to store it is in the encrypted credentials file.Source:show|on GitHub# File railties/lib/rails/application.rb, line 469defsecret_key_baseconfig.secret_key_baseendserver(&blk)LinkSends any server called in the instance of a new application up to theservermethod defined inRails::Railtie.Source:show|on GitHub# File railties/lib/rails/application.rb, line 378defserver(&blk)self.class.server(&blk)endInstance Protected methodsensure_generator_templates_added()LinkSource:show|on GitHub# File railties/lib/rails/application.rb, line 623defensure_generator_templates_addedconfigured_paths=config.generators.templatesconfigured_paths.unshift(*(paths["lib/templates"].existent-configured_paths))end