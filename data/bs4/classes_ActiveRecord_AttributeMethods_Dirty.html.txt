Active Record Attribute Methods DirtyProvides a way to track changes in your Active Record models. It adds all methods fromActiveModel::Dirtyand adds database-specific methods.A newly createdPersonobject is unchanged:class Person < ActiveRecord::Base
end

person = Person.create(name: "Allison")
person.changed? # => falseChange the name:person.name = 'Alice'
person.name_in_database          # => "Allison"
person.will_save_change_to_name? # => true
person.name_change_to_be_saved   # => ["Allison", "Alice"]
person.changes_to_save           # => {"name"=>["Allison", "Alice"]}Save the changes:person.save
person.name_in_database        # => "Alice"
person.saved_change_to_name?   # => true
person.saved_change_to_name    # => ["Allison", "Alice"]
person.name_before_last_save   # => "Allison"Similar toActiveModel::Dirty, methods can be invoked assaved_change_to_name?or by passing an argument to the generic methodsaved_change_to_attribute?("name").MethodsAattribute_before_last_save,attribute_change_to_be_saved,attribute_in_database,attributes_in_databaseCchanged_attribute_names_to_save,changes_to_saveHhas_changes_to_save?RreloadSsaved_change_to_attribute,saved_change_to_attribute?,saved_changes,saved_changes?Wwill_save_change_to_attribute?Included ModulesActiveModel::DirtyInstance Public methodsattribute_before_last_save(attr_name)LinkReturns the original value of an attribute before the last save.This method is useful in after callbacks to get the original value of an attribute before the save that triggered the callbacks to run. It can be invoked asname_before_last_saveinstead ofattribute_before_last_save("name").Source:show|on GitHub# File activerecord/lib/active_record/attribute_methods/dirty.rb, line 108defattribute_before_last_save(attr_name)mutations_before_last_save.original_value(attr_name.to_s)endattribute_change_to_be_saved(attr_name)LinkReturns the change to an attribute that will be persisted during the next save.This method is useful in validations and before callbacks, to see the change to an attribute that will occur when the record is saved. It can be invoked asname_change_to_be_savedinstead ofattribute_change_to_be_saved("name").If the attribute will change, the result will be an array containing the original value and the new value about to be saved.Source:show|on GitHub# File activerecord/lib/active_record/attribute_methods/dirty.rb, line 152defattribute_change_to_be_saved(attr_name)mutations_from_database.change_to_attribute(attr_name.to_s)endattribute_in_database(attr_name)LinkReturns the value of an attribute in the database, as opposed to the in-memory value that will be persisted the next time the record is saved.This method is useful in validations and before callbacks, to see the original value of an attribute prior to any changes about to be saved. It can be invoked asname_in_databaseinstead ofattribute_in_database("name").Source:show|on GitHub# File activerecord/lib/active_record/attribute_methods/dirty.rb, line 164defattribute_in_database(attr_name)mutations_from_database.original_value(attr_name.to_s)endattributes_in_database()LinkReturns a hash of the attributes that will change when the record is next saved.The hash keys are the attribute names, and the hash values are the original attribute values in the database (as opposed to the in-memory values about to be saved).Source:show|on GitHub# File activerecord/lib/active_record/attribute_methods/dirty.rb, line 191defattributes_in_databasemutations_from_database.changed_valuesendchanged_attribute_names_to_save()LinkReturns an array of the names of any attributes that will change when the record is next saved.Source:show|on GitHub# File activerecord/lib/active_record/attribute_methods/dirty.rb, line 181defchanged_attribute_names_to_savemutations_from_database.changed_attribute_namesendchanges_to_save()LinkReturns a hash containing all the changes that will be persisted during the next save.Source:show|on GitHub# File activerecord/lib/active_record/attribute_methods/dirty.rb, line 175defchanges_to_savemutations_from_database.changesendhas_changes_to_save?()LinkWill the next call tosavehave any changes to persist?Source:show|on GitHub# File activerecord/lib/active_record/attribute_methods/dirty.rb, line 169defhas_changes_to_save?mutations_from_database.any_changes?endreload(*)Linkreloadthe record and clears changed attributes.Source:show|on GitHub# File activerecord/lib/active_record/attribute_methods/dirty.rb, line 63defreload(*)super.tapdo@mutations_before_last_save=nil@mutations_from_database=nilendendsaved_change_to_attribute(attr_name)LinkReturns the change to an attribute during the last save. If the attribute was changed, the result will be an array containing the original value and the saved value.This method is useful in after callbacks, to see the change in an attribute during the save that triggered the callbacks to run. It can be invoked assaved_change_to_nameinstead ofsaved_change_to_attribute("name").Source:show|on GitHub# File activerecord/lib/active_record/attribute_methods/dirty.rb, line 98defsaved_change_to_attribute(attr_name)mutations_before_last_save.change_to_attribute(attr_name.to_s)endsaved_change_to_attribute?(attr_name, **options)LinkDid this attribute change when we last saved?This method is useful in after callbacks to determine if an attribute was changed during the save that triggered the callbacks to run. It can be invoked assaved_change_to_name?instead ofsaved_change_to_attribute?("name").OptionsfromWhen specified, this method will return false unless the original value is equal to the given value.toWhen specified, this method will return false unless the value will be changed to the given value.Source:show|on GitHub# File activerecord/lib/active_record/attribute_methods/dirty.rb, line 86defsaved_change_to_attribute?(attr_name,**options)mutations_before_last_save.changed?(attr_name.to_s,**options)endsaved_changes()LinkReturns a hash containing all the changes that were just saved.Source:show|on GitHub# File activerecord/lib/active_record/attribute_methods/dirty.rb, line 118defsaved_changesmutations_before_last_save.changesendsaved_changes?()LinkDid the last call tosavehave any changes to change?Source:show|on GitHub# File activerecord/lib/active_record/attribute_methods/dirty.rb, line 113defsaved_changes?mutations_before_last_save.any_changes?endwill_save_change_to_attribute?(attr_name, **options)LinkWill this attribute change the next time we save?This method is useful in validations and before callbacks to determine if the next call tosavewill change a particular attribute. It can be invoked aswill_save_change_to_name?instead ofwill_save_change_to_attribute?("name").OptionsfromWhen specified, this method will return false unless the original value is equal to the given value.toWhen specified, this method will return false unless the value will be changed to the given value.Source:show|on GitHub# File activerecord/lib/active_record/attribute_methods/dirty.rb, line 138defwill_save_change_to_attribute?(attr_name,**options)mutations_from_database.changed?(attr_name.to_s,**options)end