Action DispatchDebugLocksThis middleware can be used to diagnose deadlocks in the autoload interlock.To use it, insert it near the top of the middleware stack, usingconfig/application.rb:config.middleware.insert_before Rack::Sendfile, ActionDispatch::DebugLocksAfter restarting the application and re-triggering the deadlock condition, the route/rails/lockswill show a summary of all threads currently known to the interlock, which lock level they are holding or awaiting, and their current backtrace.Generally a deadlock will be caused by the interlock conflicting with some other external lock or blocking I/O call. These cannot be automatically identified, but should be visible in the displayed backtraces.NOTE: The formatting and content of this middlewareâs output is intended for human consumption, and should be expected to change between releases.This middleware exposes operational details of the server, with no access control. It should only be enabled when in use, and removed thereafter.MethodsCcallNnewClass Public methodsnew(app, path = "/rails/locks")LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/middleware/debug_locks.rb, line 30definitialize(app,path="/rails/locks")@app=app@path=pathendInstance Public methodscall(env)LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/middleware/debug_locks.rb, line 35defcall(env)req=ActionDispatch::Request.newenvifreq.get?path=req.path_info.chomp("/")ifpath==@pathreturnrender_details(req)endend@app.call(env)end