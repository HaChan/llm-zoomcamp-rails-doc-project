AKeyProviderserves keys:An encryption keyA list of potential decryption keys. Serving multiple decryption keys supports rotation-schemes where new keys are added but old keys need to continue workingMethodsDdecryption_keysEencryption_keyNnewClass Public methodsnew(keys)LinkSource:show|on GitHub# File activerecord/lib/active_record/encryption/key_provider.rb, line 11definitialize(keys)@keys=Array(keys)endInstance Public methodsdecryption_keys(encrypted_message)LinkReturns the list of decryption keysWhen the message holds a reference to its encryption key, it will return an array with that key. If not, it will return the list of keys.Source:show|on GitHub# File activerecord/lib/active_record/encryption/key_provider.rb, line 32defdecryption_keys(encrypted_message)ifencrypted_message.headers.encrypted_data_key_idkeys_grouped_by_id[encrypted_message.headers.encrypted_data_key_id]else@keysendendencryption_key()LinkReturns the first key in the list as the active key to perform encryptionsWhenActiveRecord::Encryption.config.store_key_referencesis true, the key will include a public tag referencing the key itself. That key will be stored in the public headers of the encrypted messageSource:show|on GitHub# File activerecord/lib/active_record/encryption/key_provider.rb, line 20defencryption_key@encryption_key||=@keys.last.tapdo|key|key.public_tags.encrypted_data_key_id=key.idifActiveRecord::Encryption.config.store_key_referencesend@encryption_keyend