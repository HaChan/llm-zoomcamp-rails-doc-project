MethodsPpreview,previewable?Rrepresentable?,representationVvariable?,variantInstance Public methodspreview(transformations)LinkReturns anActiveStorage::Previewinstance with the set oftransformationsprovided. A preview is an image generated from a non-image blob. Active Storage comes with built-in previewers for videos and PDF documents. The video previewer extracts the first frame from a video and the PDF previewer extracts the first page from a PDF document.blob.preview(resize_to_limit: [100, 100]).processed.urlAvoid processing previews synchronously in views. Instead, link to a controller action that processes them on demand. Active Storage provides one, but you may want to create your own (for example, if you need authentication). Hereâs how to use the built-in version:<%= image_tag video.preview(resize_to_limit: [100, 100]) %>This method raisesActiveStorage::UnpreviewableErrorif no previewer accepts the receiving blob. To determine whether a blob is accepted by any previewer, callActiveStorage::Blob#previewable?.Source:show|on GitHub# File activestorage/app/models/active_storage/blob/representable.rb, line 63defpreview(transformations)ifpreviewable?ActiveStorage::Preview.new(self,transformations)elseraiseActiveStorage::UnpreviewableErrorendendpreviewable?()LinkReturns true if any registered previewer accepts the blob. By default, this will return true for videos and PDF documents.Source:show|on GitHub# File activestorage/app/models/active_storage/blob/representable.rb, line 72defpreviewable?ActiveStorage.previewers.any?{|klass|klass.accept?(self) }endrepresentable?()LinkReturns true if the blob is variable or previewable.Source:show|on GitHub# File activestorage/app/models/active_storage/blob/representable.rb, line 97defrepresentable?variable?||previewable?endrepresentation(transformations)LinkReturns anActiveStorage::Previewfor a previewable blob or anActiveStorage::Variantfor a variable image blob.blob.representation(resize_to_limit: [100, 100]).processed.urlRaisesActiveStorage::UnrepresentableErrorif the receiving blob is neither variable nor previewable. CallActiveStorage::Blob#representable?to determine whether a blob is representable.SeeActiveStorage::Blob#previewandActiveStorage::Blob#variantfor more information.Source:show|on GitHub# File activestorage/app/models/active_storage/blob/representable.rb, line 85defrepresentation(transformations)casewhenpreviewable?previewtransformationswhenvariable?varianttransformationselseraiseActiveStorage::UnrepresentableErrorendendvariable?()LinkReturns true if the variant processor can transform the blob (its content type is inActiveStorage.variable_content_types).Source:show|on GitHub# File activestorage/app/models/active_storage/blob/representable.rb, line 44defvariable?ActiveStorage.variable_content_types.include?(content_type)endvariant(transformations)LinkReturns anActiveStorage::VariantorActiveStorage::VariantWithRecordinstance with the set oftransformationsprovided. This is only relevant for image files, and it allows any image to be transformed for size, colors, and the like. Example:avatar.variant(resize_to_limit: [100, 100]).processed.urlThis will create and process a variant of the avatar blob thatâs constrained to a height and width of 100px. Then itâll upload said variant to the service according to a derivative key of the blob and the transformations.Frequently, though, you donât actually want to transform the variant right away. But rather simply refer to a specific variant that can be created by a controller on-demand. Like so:<%= image_tag Current.user.avatar.variant(resize_to_limit: [100, 100]) %>This will create a URL for that specific blob with that specific variant, which the ActiveStorage::RepresentationsController can then produce on-demand.RaisesActiveStorage::InvariableErrorif the variant processor cannot transform the blob. To determine whether a blob is variable, callActiveStorage::Blob#variable?.Source:show|on GitHub# File activestorage/app/models/active_storage/blob/representable.rb, line 34defvariant(transformations)ifvariable?variant_class.new(self,ActiveStorage::Variation.wrap(transformations).default_to(default_variant_transformations))elseraiseActiveStorage::InvariableErrorendend