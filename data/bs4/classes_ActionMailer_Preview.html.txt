MethodsAallCcallEemail_exists?,emails,exists?FfindNnewPpreview_nameAttributes[R]paramsClass Public methodsall()LinkReturns all mailer preview classes.Source:show|on GitHub# File actionmailer/lib/action_mailer/preview.rb, line 80defallload_previewsifdescendants.empty?descendants.sort_by{|mailer|mailer.name.titleize}endcall(email, params = {})LinkReturns the mail object for the given email name. The registered preview interceptors will be informed so that they can transform the message as they would if the mail was actually being delivered.Source:show|on GitHub# File actionmailer/lib/action_mailer/preview.rb, line 88defcall(email,params= {})preview=new(params)message=preview.public_send(email)inform_preview_interceptors(message)messageendemail_exists?(email)LinkReturnstrueif the email exists.Source:show|on GitHub# File actionmailer/lib/action_mailer/preview.rb, line 101defemail_exists?(email)emails.include?(email)endemails()LinkReturns all of the available email previews.Source:show|on GitHub# File actionmailer/lib/action_mailer/preview.rb, line 96defemailspublic_instance_methods(false).map(&:to_s).sortendexists?(preview)LinkReturnstrueif the preview exists.Source:show|on GitHub# File actionmailer/lib/action_mailer/preview.rb, line 106defexists?(preview)all.any?{|p|p.preview_name==preview}endfind(preview)LinkFind a mailer preview by its underscored class name.Source:show|on GitHub# File actionmailer/lib/action_mailer/preview.rb, line 111deffind(preview)all.find{|p|p.preview_name==preview}endnew(params = {})LinkSource:show|on GitHub# File actionmailer/lib/action_mailer/preview.rb, line 74definitialize(params= {})@params=paramsendpreview_name()LinkReturns the underscored name of the mailer preview without the suffix.Source:show|on GitHub# File actionmailer/lib/action_mailer/preview.rb, line 116defpreview_namename.delete_suffix("Preview").underscoreend