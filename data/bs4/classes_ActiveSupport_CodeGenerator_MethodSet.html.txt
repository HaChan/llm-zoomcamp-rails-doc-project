MethodsAapplyDdefine_cached_methodNnewConstantsMETHOD_CACHES=Hash.new { |h, k| h[k] = Module.new }Class Public methodsnew(namespace)LinkSource:show|on GitHub# File activesupport/lib/active_support/code_generator.rb, line 8definitialize(namespace)@cache=METHOD_CACHES[namespace]@sources= []@methods= {}@canonical_methods= {}endInstance Public methodsapply(owner, path, line)LinkSource:show|on GitHub# File activesupport/lib/active_support/code_generator.rb, line 28defapply(owner,path,line)unless@sources.empty?@cache.module_eval("# frozen_string_literal: true\n"+@sources.join(";"),path,line)end@canonical_methods.clear@methods.eachdo|as,canonical_name|owner.define_method(as,@cache.instance_method(canonical_name))endenddefine_cached_method(canonical_name, as: nil)LinkSource:show|on GitHub# File activesupport/lib/active_support/code_generator.rb, line 15defdefine_cached_method(canonical_name,as:nil)canonical_name=canonical_name.to_symas= (as||canonical_name).to_sym@methods.fetch(as)dounless@cache.method_defined?(canonical_name)||@canonical_methods[canonical_name]yield@sourcesend@canonical_methods[canonical_name] =true@methods[as] =canonical_nameendend