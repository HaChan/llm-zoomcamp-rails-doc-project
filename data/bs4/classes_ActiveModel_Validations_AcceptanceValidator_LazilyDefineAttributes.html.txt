Methods#==Ddefine_onIincludedMmatches?NnewAttributes[R]attributesClass Public methodsnew(attributes)LinkSource:show|on GitHub# File activemodel/lib/active_model/validations/acceptance.rb, line 28definitialize(attributes)@attributes=attributes.map(&:to_s)endInstance Public methods==(other)LinkSource:show|on GitHub# File activemodel/lib/active_model/validations/acceptance.rb, line 73def==(other)self.class==other.class&&attributes==other.attributesenddefine_on(klass)LinkSource:show|on GitHub# File activemodel/lib/active_model/validations/acceptance.rb, line 56defdefine_on(klass)@lock&.synchronizedoreturnunless@lockattr_readers=attributes.reject{|name|klass.attribute_method?(name) }attr_writers=attributes.reject{|name|klass.attribute_method?("#{name}=") }attr_reader(*attr_readers)attr_writer(*attr_writers)remove_method:respond_to_missing?remove_method:method_missing@lock=nilendendincluded(klass)LinkSource:show|on GitHub# File activemodel/lib/active_model/validations/acceptance.rb, line 32defincluded(klass)@lock=Mutex.newmod=selfdefine_method(:respond_to_missing?)do|method_name,include_private=false|mod.define_on(klass)super(method_name,include_private)||mod.matches?(method_name)enddefine_method(:method_missing)do|method_name,*args,&block|mod.define_on(klass)ifmod.matches?(method_name)send(method_name,*args,&block)elsesuper(method_name,*args,&block)endendendmatches?(method_name)LinkSource:show|on GitHub# File activemodel/lib/active_model/validations/acceptance.rb, line 51defmatches?(method_name)attr_name=method_name.to_s.chomp("=")attributes.any?{|name|name==attr_name}end