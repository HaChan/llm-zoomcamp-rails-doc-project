MethodsRrescue_from,rescue_with_handlerInstance Public methodsrescue_from(*klasses, with: nil, &block)LinkRegisters exception classes with a handler to be called byrescue_with_handler.rescue_fromreceives a series of exception classes or class names, and an exception handler specified by a trailing:withoption containing the name of a method or a Proc object. Alternatively, a block can be given as the handler.Handlers that take one argument will be called with the exception, so that the exception can be inspected when dealing with it.Handlers are inherited. They are searched from right to left, from bottom to top, and up the hierarchy. The handler of the first class for whichexception.is_a?(klass)holds true is the one invoked, if any.class ApplicationController < ActionController::Base
  rescue_from User::NotAuthorized, with: :deny_access
  rescue_from ActiveRecord::RecordInvalid, with: :show_record_errors

  rescue_from "MyApp::BaseError" do |exception|
    redirect_to root_url, alert: exception.message
  end

  private
    def deny_access
      head :forbidden
    end

    def show_record_errors(exception)
      redirect_back_or_to root_url, alert: exception.record.errors.full_messages.to_sentence
    end
endExceptions raised inside exception handlers are not propagated up.Source:show|on GitHub# File activesupport/lib/active_support/rescuable.rb, line 53defrescue_from(*klasses,with:nil,&block)unlesswithifblock_given?with=blockelseraiseArgumentError,"Need a handler. Pass the with: keyword argument or provide a block."endendklasses.eachdo|klass|key=ifklass.is_a?(Module)&&klass.respond_to?(:===)klass.nameelsifklass.is_a?(String)klasselseraiseArgumentError,"#{klass.inspect} must be an Exception class or a String referencing an Exception class"end# Put the new handler at the end because the list is read in reverse.self.rescue_handlers+=[[key,with]]endendrescue_with_handler(exception, object: self, visited_exceptions: [])LinkMatches an exception to a handler based on the exception class.If no handler matches the exception, check for a handler matching the (optional)exception.cause. If no handler matches the exception or its cause, this returnsnil, so you can deal with unhandled exceptions. Be sure to re-raise unhandled exceptions if this is what you expect.begin
  # ...
rescue => exception
  rescue_with_handler(exception) || raise
endReturns the exception if it was handled andnilif it was not.Source:show|on GitHub# File activesupport/lib/active_support/rescuable.rb, line 90defrescue_with_handler(exception,object:self,visited_exceptions:[])visited_exceptions<<exceptionifhandler=handler_for_rescue(exception,object:object)handler.callexceptionexceptionelsifexceptionifvisited_exceptions.include?(exception.cause)nilelserescue_with_handler(exception.cause,object:object,visited_exceptions:visited_exceptions)endendend