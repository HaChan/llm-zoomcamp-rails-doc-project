These methods will be included into any Active Job object, adding helpers for de/serialization and creation of job instances.MethodsDdeserializeSsetInstance Public methodsdeserialize(job_data)LinkCreates a new job instance from a hash created withserializeSource:show|on GitHub# File activejob/lib/active_job/core.rb, line 62defdeserialize(job_data)job=job_data["job_class"].constantize.newjob.deserialize(job_data)jobendset(options = {})LinkCreates a job preconfigured with the given options. You can call perform_later with the job arguments to enqueue the job with the preconfigured optionsOptions:wait- Enqueues the job with the specified delay:wait_until- Enqueues the job at the time specified:queue- Enqueues the job on the specified queue:priority- Enqueues the job with the specified priorityExamplesVideoJob.set(queue: :some_queue).perform_later(Video.last)
VideoJob.set(wait: 5.minutes).perform_later(Video.last)
VideoJob.set(wait_until: Time.now.tomorrow).perform_later(Video.last)
VideoJob.set(queue: :some_queue, wait: 5.minutes).perform_later(Video.last)
VideoJob.set(queue: :some_queue, wait_until: Time.now.tomorrow).perform_later(Video.last)
VideoJob.set(queue: :some_queue, wait: 5.minutes, priority: 10).perform_later(Video.last)Source:show|on GitHub# File activejob/lib/active_job/core.rb, line 86defset(options= {})ConfiguredJob.new(self,options)end