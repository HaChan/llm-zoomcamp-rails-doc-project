Active Record CallbacksCallbacks are hooks into the life cycle of an Active Record object that allow you to trigger logic before or after a change in the object state. This can be used to make sure that associated and dependent objects are deleted whenActiveRecord::Base#destroyis called (by overwritingbefore_destroy) or to massage attributes before theyâre validated (by overwritingbefore_validation). As an example of the callbacks initiated, consider theActiveRecord::Base#savecall for a new record:(-)save(-)valid(1)before_validation(-)validate(2)after_validation(3)before_save(4)before_create(-)create(5)after_create(6)after_save(7)after_commitAlso, anafter_rollbackcallback can be configured to be triggered whenever a rollback is issued. Check outActiveRecord::Transactionsfor more details aboutafter_commitandafter_rollback.Additionally, anafter_touchcallback is triggered whenever an object is touched.Lastly anafter_findandafter_initializecallback is triggered for each object that is found and instantiated by a finder, withafter_initializebeing triggered after new objects are instantiated as well.There are nineteen callbacks in total, which give a lot of control over how to react and prepare for each state in the Active Record life cycle. The sequence for callingActiveRecord::Base#savefor an existing record is similar, except that each_createcallback is replaced by the corresponding_updatecallback.Examples:class CreditCard < ActiveRecord::Base
  # Strip everything but digits, so the user can specify "555 234 34" or
  # "5552-3434" and both will mean "55523434"
  before_validation(on: :create) do
    self.number = number.gsub(/[^0-9]/, "") if attribute_present?("number")
  end
end

class Subscription < ActiveRecord::Base
  before_create :record_signup

  private
    def record_signup
      self.signed_up_on = Date.today
    end
end

class Firm < ActiveRecord::Base
  # Disables access to the system, for associated clients and people when the firm is destroyed
  before_destroy { |record| Person.where(firm_id: record.id).update_all(access: 'disabled')   }
  before_destroy { |record| Client.where(client_of: record.id).update_all(access: 'disabled') }
endInheritable callback queuesBesides the overwritable callback methods, itâs also possible to register callbacks through the use of the callback macros. Their main advantage is that the macros add behavior into a callback queue that is kept intact through an inheritance hierarchy.class Topic < ActiveRecord::Base
  before_destroy :destroy_author
end

class Reply < Topic
  before_destroy :destroy_readers
endWhenTopic#destroyis run onlydestroy_authoris called. WhenReply#destroyis run, bothdestroy_authoranddestroy_readersare called.IMPORTANT:In order for inheritance to work for the callback queues, you must specify the callbacks before specifying the associations. Otherwise, you might trigger the loading of a child before the parent has registered the callbacks and they wonât be inherited.Types of callbacksThere are three types of callbacks accepted by the callback macros: method references (symbol), callback objects, inline methods (using a proc). Method references and callback objects are the recommended approaches, inline methods using a proc are sometimes appropriate (such as for creating mix-ins).The method reference callbacks work by specifying a protected or private method available in the object, like this:class Topic < ActiveRecord::Base
  before_destroy :delete_parents

  private
    def delete_parents
      self.class.delete_by(parent_id: id)
    end
endThe callback objects have methods named after the callback called with the record as the only parameter, such as:class BankAccount < ActiveRecord::Base
  before_save      EncryptionWrapper.new
  after_save       EncryptionWrapper.new
  after_initialize EncryptionWrapper.new
end

class EncryptionWrapper
  def before_save(record)
    record.credit_card_number = encrypt(record.credit_card_number)
  end

  def after_save(record)
    record.credit_card_number = decrypt(record.credit_card_number)
  end

  alias_method :after_initialize, :after_save

  private
    def encrypt(value)
      # Secrecy is committed
    end

    def decrypt(value)
      # Secrecy is unveiled
    end
endSo you specify the object you want to be messaged on a given callback. When that callback is triggered, the object has a method by the name of the callback messaged. You can make these callbacks more flexible by passing in other initialization data such as the name of the attribute to work with:class BankAccount < ActiveRecord::Base
  before_save      EncryptionWrapper.new("credit_card_number")
  after_save       EncryptionWrapper.new("credit_card_number")
  after_initialize EncryptionWrapper.new("credit_card_number")
end

class EncryptionWrapper
  def initialize(attribute)
    @attribute = attribute
  end

  def before_save(record)
    record.send("#{@attribute}=", encrypt(record.send("#{@attribute}")))
  end

  def after_save(record)
    record.send("#{@attribute}=", decrypt(record.send("#{@attribute}")))
  end

  alias_method :after_initialize, :after_save

  private
    def encrypt(value)
      # Secrecy is committed
    end

    def decrypt(value)
      # Secrecy is unveiled
    end
endbefore_validation*returning statementsIf thebefore_validationcallback throws:abort, the process will be aborted andActiveRecord::Base#savewill returnfalse. IfActiveRecord::Base#save!is called it will raise anActiveRecord::RecordInvalidexception. Nothing will be appended to the errors object.Canceling callbacksIf abefore_*callback throws:abort, all the later callbacks and the associated action are cancelled. Callbacks are generally run in the order they are defined, with the exception of callbacks defined as methods on the model, which are called last.Ordering callbacksSometimes application code requires that callbacks execute in a specific order. For example, abefore_destroycallback (log_childrenin this case) should be executed before records in thechildrenassociation are destroyed by thedependent: :destroyoption.Letâs look at the code below:class Topic < ActiveRecord::Base
  has_many :children, dependent: :destroy

  before_destroy :log_children

  private
    def log_children
      # Child processing
    end
endIn this case, the problem is that when thebefore_destroycallback is executed, records in thechildrenassociation no longer exist because theActiveRecord::Base#destroycallback was executed first. You can use theprependoption on thebefore_destroycallback to avoid this.class Topic < ActiveRecord::Base
  has_many :children, dependent: :destroy

  before_destroy :log_children, prepend: true

  private
    def log_children
      # Child processing
    end
endThis way, thebefore_destroyis executed before thedependent: :destroyis called, and the data is still available.Also, there are cases when you want several callbacks of the same type to be executed in order.For example:class Topic < ActiveRecord::Base
  has_many :children

  after_save :log_children
  after_save :do_something_else

  private
    def log_children
      # Child processing
    end

    def do_something_else
      # Something else
    end
endIn this case thelog_childrenis executed beforedo_something_else. This applies to all non-transactional callbacks, and tobefore_commit.For transactionalafter_callbacks (after_commit,after_rollback, etc), the order can be set via configuration.config.active_record.run_after_transaction_callbacks_in_order_defined = falseWhen set totrue(the default from Rails 7.1), callbacks are executed in the order they are defined, just like the example above. When set tofalse, the order is reversed, sodo_something_elseis executed beforelog_children.TransactionsThe entire callback chain of a#save,#save!, or#destroycall runs within a transaction. That includesafter_*hooks. If everything goes fine aCOMMITis executed once the chain has been completed.If abefore_*callback cancels the action aROLLBACKis issued. You can also trigger aROLLBACKraising an exception in any of the callbacks, includingafter_*hooks. Note, however, that in that case the client needs to be aware of it because an ordinary#savewill raise such exception instead of quietly returningfalse.Debugging callbacksThe callback chain is accessible via the_*_callbacksmethod on an object. Active Model Callbacks support:before,:afterand:aroundas values for thekindproperty. Thekindproperty defines what part of the chain the callback runs in.To find all callbacks in thebefore_savecallback chain:Topic._save_callbacks.select { |cb| cb.kind.eql?(:before) }Returns an array of callback objects that form thebefore_savechain.To further check if the before_save chain contains a proc defined asrest_when_deaduse thefilterproperty of the callback object:Topic._save_callbacks.select { |cb| cb.kind.eql?(:before) }.collect(&:filter).include?(:rest_when_dead)Returns true or false depending on whether the proc is contained in thebefore_savecallback chain on a Topic model.NamespaceMODULEActiveRecord::Callbacks::ClassMethodsIncluded ModulesActiveModel::Validations::CallbacksConstantsCALLBACKS=[
:after_initialize, :after_find, :after_touch, :before_validation, :after_validation,
:before_save, :around_save, :after_save, :before_create, :around_create,
:after_create, :before_update, :around_update, :after_update,
:before_destroy, :around_destroy, :after_destroy, :after_commit, :after_rollback
]