MethodsLlocking_column=,locking_enabled?Rreset_locking_columnUupdate_countersConstantsDEFAULT_LOCKING_COLUMN="lock_version"Attributes[R]locking_columnThe version column used for optimistic locking. Defaults tolock_version.Instance Public methodslocking_column=(value)LinkSet the column to use for optimistic locking. Defaults tolock_version.Source:show|on GitHub# File activerecord/lib/active_record/locking/optimistic.rb, line 165deflocking_column=(value)reload_schema_from_cache@locking_column=value.to_sendlocking_enabled?()LinkReturns true if thelock_optimisticallyflag is set to true (which it is, by default) and the table includes thelocking_columncolumn (defaults tolock_version).Source:show|on GitHub# File activerecord/lib/active_record/locking/optimistic.rb, line 160deflocking_enabled?lock_optimistically&&columns_hash[locking_column]endreset_locking_column()LinkReset the column used for optimistic locking back to thelock_versiondefault.Source:show|on GitHub# File activerecord/lib/active_record/locking/optimistic.rb, line 174defreset_locking_columnself.locking_column=DEFAULT_LOCKING_COLUMNendupdate_counters(id, counters)LinkMake sure the lock version column gets updated when counters are updated.Source:show|on GitHub# File activerecord/lib/active_record/locking/optimistic.rb, line 180defupdate_counters(id,counters)counters=counters.merge(locking_column=>1)iflocking_enabled?superend