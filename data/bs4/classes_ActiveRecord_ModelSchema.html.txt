NamespaceMODULEActiveRecord::ModelSchema::ClassMethodsMethodsIid_value,immutable_strings_by_default=,implicit_order_column,implicit_order_column=,inheritance_column,inheritance_column=,internal_metadata_table_name,internal_metadata_table_name=Ppluralize_table_names,pluralize_table_names=,primary_key_prefix_type,primary_key_prefix_type=Sschema_migrations_table_name,schema_migrations_table_name=Ttable_name_prefix,table_name_prefix=,table_name_suffix,table_name_suffix=Class Public methodsimmutable_strings_by_default=(bool)LinkDetermines whether columns should infer their type as:stringor:immutable_string. This setting does not affect the behavior ofattribute :foo, :string. Defaults to false.Source:on GitHub# File activerecord/lib/active_record/model_schema.rb, line 129implicit_order_columnLinkThe name of the column records are ordered by if no explicit order clause is used during an ordered finder call. If not set the primary key is used.Source:on GitHub# File activerecord/lib/active_record/model_schema.rb, line 113implicit_order_column=(column_name)LinkSets the column to sort records by when no explicit order clause is used during an ordered finder call. Useful when the primary key is not an auto-incrementing integer, for example when itâs a UUID. Records are subsorted by the primary key if it exists to ensure deterministic results.Source:on GitHub# File activerecord/lib/active_record/model_schema.rb, line 120inheritance_columnLinkThe name of the table column which stores the class name on single-table inheritance situations.The default inheritance column name istype, which means itâs a reserved word inside Active Record. To be able to use single-table inheritance with another column name, or to use the columntypein your own model for something else, you can setinheritance_column:self.inheritance_column = 'zoink'If you wish to disable single-table inheritance altogether you can setinheritance_columntonilself.inheritance_column = nilSource:on GitHub# File activerecord/lib/active_record/model_schema.rb, line 137inheritance_column=(column)LinkDefines the name of the table column which will store the class name on single-table inheritance situations.Source:show|on GitHub# File activerecord/lib/active_record/model_schema.rb, line 162includeddoclass_attribute:primary_key_prefix_type,instance_writer:falseclass_attribute:table_name_prefix,instance_writer:false,default:""class_attribute:table_name_suffix,instance_writer:false,default:""class_attribute:schema_migrations_table_name,instance_accessor:false,default:"schema_migrations"class_attribute:internal_metadata_table_name,instance_accessor:false,default:"ar_internal_metadata"class_attribute:pluralize_table_names,instance_writer:false,default:trueclass_attribute:implicit_order_column,instance_accessor:falseclass_attribute:immutable_strings_by_default,instance_accessor:falseclass_attribute:inheritance_column,instance_accessor:false,default:"type"singleton_class.class_evaldoalias_method:_inheritance_column=,:inheritance_column=private:_inheritance_column=alias_method:inheritance_column=,:real_inheritance_column=endself.protected_environments= ["production"]self.ignored_columns= [].freezedelegate:type_for_attribute,:column_for_attribute,to::classinitialize_load_schema_monitorendinternal_metadata_table_nameLinkThe name of the internal metadata table. By default, the value is"ar_internal_metadata".Source:on GitHub# File activerecord/lib/active_record/model_schema.rb, line 85internal_metadata_table_name=(table_name)LinkSets the name of the internal metadata table.Source:on GitHub# File activerecord/lib/active_record/model_schema.rb, line 91pluralize_table_namesLinkIndicates whether table names should be the pluralized versions of the corresponding class names. If true, the default table name for a Product class will be âproductsâ. If false, it would just be âproductâ. See table_name for the full rules on table/class naming. This is true, by default.Source:on GitHub# File activerecord/lib/active_record/model_schema.rb, line 97pluralize_table_names=(value)LinkSet whether table names should be the pluralized versions of the corresponding class names. If true, the default table name for a Product class will be âproductsâ. If false, it would just be âproductâ. See table_name for the full rules on table/class naming. This is true, by default.Source:on GitHub# File activerecord/lib/active_record/model_schema.rb, line 105primary_key_prefix_typeLinkThe prefix type that will be prepended to every primary key column name. The options are:table_nameand:table_name_with_underscore. If the first is specified, the Product class will look for âproductidâ instead of âidâ as the primary column. If the latter is specified, the Product class will look for âproduct_idâ instead of âidâ. Remember that this is a global setting for all Active Records.Source:on GitHub# File activerecord/lib/active_record/model_schema.rb, line 17primary_key_prefix_type=(prefix_type)LinkSets the prefix type that will be prepended to every primary key column name. The options are:table_nameand:table_name_with_underscore. If the first is specified, the Product class will look for âproductidâ instead of âidâ as the primary column. If the latter is specified, the Product class will look for âproduct_idâ instead of âidâ. Remember that this is a global setting for all Active Records.Source:on GitHub# File activerecord/lib/active_record/model_schema.rb, line 27schema_migrations_table_nameLinkThe name of the schema migrations table. By default, the value is"schema_migrations".Source:on GitHub# File activerecord/lib/active_record/model_schema.rb, line 73schema_migrations_table_name=(table_name)LinkSets the name of the schema migrations table.Source:on GitHub# File activerecord/lib/active_record/model_schema.rb, line 79table_name_prefixLinkThe prefix string to prepend to every table name.Source:on GitHub# File activerecord/lib/active_record/model_schema.rb, line 37table_name_prefix=(prefix)LinkSets the prefix string to prepend to every table name. So if set to âbasecamp_â, all table names will be named like âbasecamp_projectsâ, âbasecamp_peopleâ, etc. This is a convenient way of creating a namespace for tables in a shared database. By default, the prefix is the empty string.If you are organising your models within modules you can add a prefix to the models within a namespace by defining a singleton method in the parent module calledtable_name_prefixwhich returns your chosen prefix.Source:on GitHub# File activerecord/lib/active_record/model_schema.rb, line 43table_name_suffixLinkThe suffix string to append to every table name.Source:on GitHub# File activerecord/lib/active_record/model_schema.rb, line 56table_name_suffix=(suffix)LinkWorks liketable_name_prefix=, but appends instead of prepends (set to â_basecampâ gives âprojects_basecampâ, âpeople_basecampâ). By default, the suffix is the empty string.If you are organising your models within modules, you can add a suffix to the models within a namespace by defining a singleton method in the parent module calledtable_name_suffixwhich returns your chosen suffix.Source:on GitHub# File activerecord/lib/active_record/model_schema.rb, line 62Instance Public methodsid_valueLinkReturns the underlying column value for a column named âidâ. Useful when defining a composite primary key including an âidâ column so that the value is readable.Source:on GitHub# File activerecord/lib/active_record/model_schema.rb, line 10