MethodsAassert_valid_keysCcompact_blank!Ddeep_dup,deep_merge,deep_stringify_keys,deep_stringify_keys!,deep_symbolize_keys,deep_symbolize_keys!,deep_transform_keys,deep_transform_keys!,deep_transform_values,deep_transform_values!Eexcept,except!,extract!,extractable_options?Ffrom_trusted_xml,from_xmlNnested_under_indifferent_accessRreverse_merge,reverse_merge!,reverse_updateSslice!,stringify_keys,stringify_keys!,symbolize_keys,symbolize_keys!Tto_options,to_options!,to_param,to_query,to_xmlWwith_defaults,with_defaults!,with_indifferent_accessClass Public methodsfrom_trusted_xml(xml)LinkBuilds aHashfrom XML just likeHash.from_xml, but also allowsSymboland YAML.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/hash/conversions.rb, line 133deffrom_trusted_xml(xml)from_xmlxml, []endfrom_xml(xml, disallowed_types = nil)LinkReturns aHashcontaining a collection of pairs when the key is the node name and the value is its contentxml = <<-XML
  <?xml version="1.0" encoding="UTF-8"?>
    <hash>
      <foo type="integer">1</foo>
      <bar type="integer">2</bar>
    </hash>
XML

hash = Hash.from_xml(xml)
# => {"hash"=>{"foo"=>1, "bar"=>2}}DisallowedTypeis raised if the XML contains attributes withtype="yaml"ortype="symbol". UseHash.from_trusted_xmlto parse this XML.Customdisallowed_typescan also be passed in the form of an array.xml = <<-XML
  <?xml version="1.0" encoding="UTF-8"?>
    <hash>
      <foo type="integer">1</foo>
      <bar type="string">"David"</bar>
    </hash>
XML

hash = Hash.from_xml(xml, ['integer'])
# => ActiveSupport::XMLConverter::DisallowedType: Disallowed type attribute: "integer"Note that passing custom disallowed types will override the default types, which areSymboland YAML.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/hash/conversions.rb, line 128deffrom_xml(xml,disallowed_types=nil)ActiveSupport::XMLConverter.new(xml,disallowed_types).to_hendInstance Public methodsassert_valid_keys(*valid_keys)LinkValidates all keys in a hash match*valid_keys, raisingArgumentErroron a mismatch.Note that keys are treated differently thanHashWithIndifferentAccess, meaning that string and symbol keys will not match.{ name: 'Rob', years: '28' }.assert_valid_keys(:name, :age) # => raises "ArgumentError: Unknown key: :years. Valid keys are: :name, :age"
{ name: 'Rob', age: '28' }.assert_valid_keys('name', 'age') # => raises "ArgumentError: Unknown key: :name. Valid keys are: 'name', 'age'"
{ name: 'Rob', age: '28' }.assert_valid_keys(:name, :age)   # => passes, raises nothingSource:show|on GitHub# File activesupport/lib/active_support/core_ext/hash/keys.rb, line 48defassert_valid_keys(*valid_keys)valid_keys.flatten!each_keydo|k|unlessvalid_keys.include?(k)raiseArgumentError.new("Unknown key: #{k.inspect}. Valid keys are: #{valid_keys.map(&:inspect).join(', ')}")endendendcompact_blank!()LinkRemoves all blank values from theHashin place and returns self. UsesObject#blank?for determining if a value is blank.h = { a: "", b: 1, c: nil, d: [], e: false, f: true }
h.compact_blank!
# => { b: 1, f: true }Source:show|on GitHub# File activesupport/lib/active_support/core_ext/enumerable.rb, line 227defcompact_blank!# use delete_if rather than reject! because it always returns self even if nothing changeddelete_if{|_k,v|v.blank?}enddeep_dup()LinkReturns a deep copy of hash.hash = { a: { b: 'b' } }
dup  = hash.deep_dup
dup[:a][:c] = 'c'

hash[:a][:c] # => nil
dup[:a][:c]  # => "c"Source:show|on GitHub# File activesupport/lib/active_support/core_ext/object/deep_dup.rb, line 43defdeep_duphash=dupeach_pairdo|key,value|if::String===key||::Symbol===keyhash[key] =value.deep_dupelsehash.delete(key)hash[key.deep_dup] =value.deep_dupendendhashenddeep_merge(other_hash, █)LinkReturns a new hash withselfandother_hashmerged recursively.h1 = { a: true, b: { c: [1, 2, 3] } }
h2 = { a: false, b: { x: [3, 4, 5] } }

h1.deep_merge(h2) # => { a: false, b: { c: [1, 2, 3], x: [3, 4, 5] } }Like with Hash#merge in the standard library, a block can be provided to merge values:h1 = { a: 100, b: 200, c: { c1: 100 } }
h2 = { b: 250, c: { c1: 200 } }
h1.deep_merge(h2) { |key, this_val, other_val| this_val + other_val }
# => { a: 100, b: 450, c: { c1: 300 } }Source:on GitHub# File activesupport/lib/active_support/core_ext/hash/deep_merge.rb, line 9deep_stringify_keys()LinkReturns a new hash with all keys converted to strings. This includes the keys from the root hash and from all nested hashes and arrays.hash = { person: { name: 'Rob', age: '28' } }

hash.deep_stringify_keys
# => {"person"=>{"name"=>"Rob", "age"=>"28"}}Source:show|on GitHub# File activesupport/lib/active_support/core_ext/hash/keys.rb, line 84defdeep_stringify_keysdeep_transform_keys{|k|Symbol===k?k.name:k.to_s}enddeep_stringify_keys!()LinkDestructively converts all keys to strings. This includes the keys from the root hash and from all nested hashes and arrays.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/hash/keys.rb, line 91defdeep_stringify_keys!deep_transform_keys!{|k|Symbol===k?k.name:k.to_s}enddeep_symbolize_keys()LinkReturns a new hash with all keys converted to symbols, as long as they respond toto_sym. This includes the keys from the root hash and from all nested hashes and arrays.hash = { 'person' => { 'name' => 'Rob', 'age' => '28' } }

hash.deep_symbolize_keys
# => {:person=>{:name=>"Rob", :age=>"28"}}Source:show|on GitHub# File activesupport/lib/active_support/core_ext/hash/keys.rb, line 103defdeep_symbolize_keysdeep_transform_keys{|key|key.to_symrescuekey}enddeep_symbolize_keys!()LinkDestructively converts all keys to symbols, as long as they respond toto_sym. This includes the keys from the root hash and from all nested hashes and arrays.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/hash/keys.rb, line 110defdeep_symbolize_keys!deep_transform_keys!{|key|key.to_symrescuekey}enddeep_transform_keys(&block)LinkReturns a new hash with all keys converted by the block operation. This includes the keys from the root hash and from all nested hashes and arrays.hash = { person: { name: 'Rob', age: '28' } }

hash.deep_transform_keys{ |key| key.to_s.upcase }
# => {"PERSON"=>{"NAME"=>"Rob", "AGE"=>"28"}}Source:show|on GitHub# File activesupport/lib/active_support/core_ext/hash/keys.rb, line 65defdeep_transform_keys(&block)_deep_transform_keys_in_object(self,&block)enddeep_transform_keys!(&block)LinkDestructively converts all keys by using the block operation. This includes the keys from the root hash and from all nested hashes and arrays.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/hash/keys.rb, line 72defdeep_transform_keys!(&block)_deep_transform_keys_in_object!(self,&block)enddeep_transform_values(&block)LinkReturns a new hash with all values converted by the block operation. This includes the values from the root hash and from all nested hashes and arrays.hash = { person: { name: 'Rob', age: '28' } }

hash.deep_transform_values{ |value| value.to_s.upcase }
# => {person: {name: "ROB", age: "28"}}Source:show|on GitHub# File activesupport/lib/active_support/core_ext/hash/deep_transform_values.rb, line 12defdeep_transform_values(&block)_deep_transform_values_in_object(self,&block)enddeep_transform_values!(&block)LinkDestructively converts all values by using the block operation. This includes the values from the root hash and from all nested hashes and arrays.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/hash/deep_transform_values.rb, line 19defdeep_transform_values!(&block)_deep_transform_values_in_object!(self,&block)endexcept(*keys)LinkReturns a hash that includes everything except given keys.hash = { a: true, b: false, c: nil }
hash.except(:c)     # => { a: true, b: false }
hash.except(:a, :b) # => { c: nil }
hash                # => { a: true, b: false, c: nil }This is useful for limiting a set of parameters to everything but a few known toggles:@person.update(params[:person].except(:admin))Source:show|on GitHub# File activesupport/lib/active_support/core_ext/hash/except.rb, line 12defexcept(*keys)slice(*self.keys-keys)endexcept!(*keys)LinkRemoves the given keys from hash and returns it.hash = { a: true, b: false, c: nil }
hash.except!(:c) # => { a: true, b: false }
hash             # => { a: true, b: false }Source:show|on GitHub# File activesupport/lib/active_support/core_ext/hash/except.rb, line 20defexcept!(*keys)keys.each{|key|delete(key) }selfendextract!(*keys)LinkRemoves and returns the key/value pairs matching the given keys.hash = { a: 1, b: 2, c: 3, d: 4 }
hash.extract!(:a, :b) # => {:a=>1, :b=>2}
hash                  # => {:c=>3, :d=>4}Source:show|on GitHub# File activesupport/lib/active_support/core_ext/hash/slice.rb, line 24defextract!(*keys)keys.each_with_object(self.class.new) {|key,result|result[key] =delete(key)ifhas_key?(key) }endextractable_options?()LinkBy default, only instances ofHashitself are extractable. Subclasses ofHashmay implement this method and return true to declare themselves as extractable. If aHashis extractable,Array#extract_options!pops it from theArraywhen it is the last element of theArray.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/array/extract_options.rb, line 9defextractable_options?instance_of?(Hash)endnested_under_indifferent_access()LinkCalled when object is nested under an object that receiveswith_indifferent_access. This method will be called on the current object by the enclosing object and is aliased towith_indifferent_accessby default. Subclasses ofHashmay override this method to returnselfif converting to anActiveSupport::HashWithIndifferentAccesswould not be desirable.b = { b: 1 }
{ a: b }.with_indifferent_access['a'] # calls b.nested_under_indifferent_access
# => {"b"=>1}Alias for:with_indifferent_accessreverse_merge(other_hash)LinkMerges the caller intoother_hash. For example,options = options.reverse_merge(size: 25, velocity: 10)is equivalent tooptions = { size: 25, velocity: 10 }.merge(options)This is particularly useful for initializing an options hash with default values.Also aliased as:with_defaultsSource:show|on GitHub# File activesupport/lib/active_support/core_ext/hash/reverse_merge.rb, line 14defreverse_merge(other_hash)other_hash.merge(self)endreverse_merge!(other_hash)LinkDestructivereverse_merge.Also aliased as:reverse_update,with_defaults!Source:show|on GitHub# File activesupport/lib/active_support/core_ext/hash/reverse_merge.rb, line 20defreverse_merge!(other_hash)replace(reverse_merge(other_hash))endreverse_update(other_hash)LinkAlias for:reverse_merge!slice!(*keys)LinkReplaces the hash with only the given keys. Returns a hash containing the removed key/value pairs.hash = { a: 1, b: 2, c: 3, d: 4 }
hash.slice!(:a, :b)  # => {:c=>3, :d=>4}
hash                 # => {:a=>1, :b=>2}Source:show|on GitHub# File activesupport/lib/active_support/core_ext/hash/slice.rb, line 10defslice!(*keys)omit=slice(*self.keys-keys)hash=slice(*keys)hash.default=defaulthash.default_proc=default_procifdefault_procreplace(hash)omitendstringify_keys()LinkReturns a new hash with all keys converted to strings.hash = { name: 'Rob', age: '28' }

hash.stringify_keys
# => {"name"=>"Rob", "age"=>"28"}Source:show|on GitHub# File activesupport/lib/active_support/core_ext/hash/keys.rb, line 10defstringify_keystransform_keys{|k|Symbol===k?k.name:k.to_s}endstringify_keys!()LinkDestructively converts all keys to strings. Same asstringify_keys, but modifiesself.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/hash/keys.rb, line 16defstringify_keys!transform_keys!{|k|Symbol===k?k.name:k.to_s}endsymbolize_keys()LinkReturns a new hash with all keys converted to symbols, as long as they respond toto_sym.hash = { 'name' => 'Rob', 'age' => '28' }

hash.symbolize_keys
# => {:name=>"Rob", :age=>"28"}Also aliased as:to_optionsSource:show|on GitHub# File activesupport/lib/active_support/core_ext/hash/keys.rb, line 27defsymbolize_keystransform_keys{|key|key.to_symrescuekey}endsymbolize_keys!()LinkDestructively converts all keys to symbols, as long as they respond toto_sym. Same assymbolize_keys, but modifiesself.Also aliased as:to_options!Source:show|on GitHub# File activesupport/lib/active_support/core_ext/hash/keys.rb, line 34defsymbolize_keys!transform_keys!{|key|key.to_symrescuekey}endto_options()LinkAlias for:symbolize_keysto_options!()LinkAlias for:symbolize_keys!to_param(namespace = nil)LinkAlias for:to_queryto_query(namespace = nil)LinkReturns a string representation of the receiver suitable for use as a URL query string:{name: 'David', nationality: 'Danish'}.to_query
# => "name=David&nationality=Danish"An optional namespace can be passed to enclose key names:{name: 'David', nationality: 'Danish'}.to_query('user')
# => "user%5Bname%5D=David&user%5Bnationality%5D=Danish"The string pairs âkey=valueâ that conform the query string are sorted lexicographically in ascending order.Also aliased as:to_paramSource:show|on GitHub# File activesupport/lib/active_support/core_ext/object/to_query.rb, line 75defto_query(namespace=nil)query=filter_mapdo|key,value|unless(value.is_a?(Hash)||value.is_a?(Array))&&value.empty?value.to_query(namespace?"#{namespace}[#{key}]":key)endendquery.sort!unlessnamespace.to_s.include?("[]")query.join("&")endto_xml(options = {})LinkReturns a string containing an XML representation of its receiver:{ foo: 1, bar: 2 }.to_xml
# =>
# <?xml version="1.0" encoding="UTF-8"?>
# <hash>
#   <foo type="integer">1</foo>
#   <bar type="integer">2</bar>
# </hash>To do so, the method loops over the pairs and builds nodes that depend on thevalues. Given a pairkey,value:Ifvalueis a hash thereâs a recursive call withkeyas:root.Ifvalueis an array thereâs a recursive call withkeyas:root, andkeysingularized as:children.Ifvalueis a callable object it must expect one or two arguments. Depending on the arity, the callable is invoked with theoptionshash as first argument withkeyas:root, andkeysingularized as second argument. The callable can add nodes by usingoptions[:builder].{foo: lambda { |options, key| options[:builder].b(key) }}.to_xml
# => "<b>foo</b>"Ifvalueresponds toto_xmlthe method is invoked withkeyas:root.class Foo
  def to_xml(options)
    options[:builder].bar 'fooing!'
  end
end

{ foo: Foo.new }.to_xml(skip_instruct: true)
# =>
# <hash>
#   <bar>fooing!</bar>
# </hash>Otherwise, a node withkeyas tag is created with a string representation ofvalueas text node. Ifvalueisnilan attribute ânilâ set to âtrueâ is added. Unless the option:skip_typesexists and is true, an attribute âtypeâ is added as well according to the following mapping:XML_TYPE_NAMES = {
  "Symbol"     => "symbol",
  "Integer"    => "integer",
  "BigDecimal" => "decimal",
  "Float"      => "float",
  "TrueClass"  => "boolean",
  "FalseClass" => "boolean",
  "Date"       => "date",
  "DateTime"   => "dateTime",
  "Time"       => "dateTime"
}By default the root node is âhashâ, but thatâs configurable via the:rootoption.The default XML builder is a fresh instance ofBuilder::XmlMarkup. You can configure your own builder with the:builderoption. The method also accepts options like:dasherizeand friends, they are forwarded to the builder.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/hash/conversions.rb, line 74defto_xml(options= {})require"active_support/builder"unlessdefined?(Builder::XmlMarkup)options=options.dupoptions[:indent]||=2options[:root]||="hash"options[:builder]||=Builder::XmlMarkup.new(indent:options[:indent])builder=options[:builder]builder.instruct!unlessoptions.delete(:skip_instruct)root=ActiveSupport::XmlMini.rename_key(options[:root].to_s,options)builder.tag!(root)doeach{|key,value|ActiveSupport::XmlMini.to_tag(key,value,options) }yieldbuilderifblock_given?endendwith_defaults(other_hash)LinkAlias for:reverse_mergewith_defaults!(other_hash)LinkAlias for:reverse_merge!with_indifferent_access()LinkReturns anActiveSupport::HashWithIndifferentAccessout of its receiver:{ a: 1 }.with_indifferent_access['a'] # => 1Also aliased as:nested_under_indifferent_accessSource:show|on GitHub# File activesupport/lib/active_support/core_ext/hash/indifferent_access.rb, line 9defwith_indifferent_accessActiveSupport::HashWithIndifferentAccess.new(self)end