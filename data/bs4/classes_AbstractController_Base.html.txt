Abstract ControllerBaseAbstractController::Baseis a low-level API. Nobody should be using it directly, and subclasses (likeActionController::Base) are expected to provide their ownrendermethod, since rendering means different things depending on the context.MethodsAabstract!,action_methods,action_methods,action_name,available_action?Cclear_action_methods!,controller_path,controller_pathFformatsIinternal_methodsMmethod_addedPperformed?,processRresponse_bodySsupports_path?Included ModulesActiveSupport::ConfigurableAttributes[R]abstract[R]abstract?Class Public methodsabstract!()LinkDefine a controller as abstract. Seeinternal_methodsfor more details.Source:show|on GitHub# File actionpack/lib/abstract_controller/base.rb, line 58defabstract!@abstract=trueendaction_methods()LinkA list of method names that should be considered actions. This includes all public instance methods on a controller, less any internal methods (seeinternal_methods), adding back in any methods that are internal, but still exist on the class itself.ReturnsSet- A set of all methods that should be considered actions.Source:show|on GitHub# File actionpack/lib/abstract_controller/base.rb, line 97defaction_methods@action_methods||=begin# All public instance methods of this class, including ancestors except for# public instance methods of Base and its ancestors.methods=public_instance_methods(true)-internal_methods# Be sure to include shadowed public instance methods of this class.methods.concat(public_instance_methods(false))methods.map!(&:to_s)methods.to_setendendclear_action_methods!()Linkaction_methodsare cached and there is sometimes a need to refresh them.::clear_action_methods!allows you to do that, so next time you runaction_methods, they will be recalculated.Source:show|on GitHub# File actionpack/lib/abstract_controller/base.rb, line 112defclear_action_methods!@action_methods=nilendcontroller_path()LinkReturns the full controller name, underscored, without the ending Controller.class MyApp::MyPostsController < AbstractController::Base

end

MyApp::MyPostsController.controller_path # => "my_app/my_posts"ReturnsStringSource:show|on GitHub# File actionpack/lib/abstract_controller/base.rb, line 127defcontroller_path@controller_path||=name.delete_suffix("Controller").underscoreunlessanonymous?endinternal_methods()LinkA list of all internal methods for a controller. This finds the first abstract superclass of a controller, and gets a list of all public instance methods on that abstract class. Public instance methods of a controller would normally be considered action methods, so methods declared on abstract classes are being removed. (ActionController::MetalandActionController::Baseare defined as abstract)Source:show|on GitHub# File actionpack/lib/abstract_controller/base.rb, line 77definternal_methodscontroller=selfmethods= []untilcontroller.abstract?methods+=controller.public_instance_methods(false)controller=controller.superclassendcontroller.public_instance_methods(true)-methodsendmethod_added(name)LinkRefresh the cachedaction_methodswhen a new action_method is added.Source:show|on GitHub# File actionpack/lib/abstract_controller/base.rb, line 132defmethod_added(name)superclear_action_methods!endsupports_path?()LinkReturns true if the given controller is capable of rendering a path. A subclass ofAbstractController::Basemay return false. An Email controller for example does not support paths, only full URLs.Source:show|on GitHub# File actionpack/lib/abstract_controller/base.rb, line 200defself.supports_path?trueendInstance Public methodsaction_methods()LinkDelegates to the classâs::action_methods.Source:show|on GitHub# File actionpack/lib/abstract_controller/base.rb, line 172defaction_methodsself.class.action_methodsendaction_nameLinkReturns the name of the action this controller is processing.Source:show|on GitHub# File actionpack/lib/abstract_controller/base.rb, line 44attr_internal:action_nameavailable_action?(action_name)LinkReturns true if a method for the action is available and can be dispatched, false otherwise.Notice thataction_methods.include?("foo")may return false andavailable_action?("foo")returns true because this method considers actions that are also available through other means, for example, implicit render ones.Parametersaction_name- The name of an action to be testedSource:show|on GitHub# File actionpack/lib/abstract_controller/base.rb, line 187defavailable_action?(action_name)_find_action_name(action_name)endcontroller_path()LinkDelegates to the classâs::controller_path.Source:show|on GitHub# File actionpack/lib/abstract_controller/base.rb, line 167defcontroller_pathself.class.controller_pathendformatsLinkReturns the formats that can be processed by the controller.Source:show|on GitHub# File actionpack/lib/abstract_controller/base.rb, line 48attr_internal:formatsperformed?()LinkTests if a response body is set. Used to determine if theprocess_actioncallback needs to be terminated inAbstractController::Callbacks.Source:show|on GitHub# File actionpack/lib/abstract_controller/base.rb, line 193defperformed?response_bodyendprocess(action, ...)LinkCalls the action going through the entire Action Dispatch stack.The actual method that is called is determined by calling method_for_action. If no method can handle the action, then anAbstractController::ActionNotFounderror is raised.ReturnsselfSource:show|on GitHub# File actionpack/lib/abstract_controller/base.rb, line 154defprocess(action,...)@_action_name=action.to_sunlessaction_name=_find_action_name(@_action_name)raiseActionNotFound.new("The action '#{action}' could not be found for #{self.class.name}",self,action)end@_response_body=nilprocess_action(action_name,...)endresponse_bodyLinkReturns the body of the HTTP response sent by the controller.Source:show|on GitHub# File actionpack/lib/abstract_controller/base.rb, line 40attr_internal:response_body