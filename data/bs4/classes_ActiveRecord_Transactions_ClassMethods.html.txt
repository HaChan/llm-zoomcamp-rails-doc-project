Active Record TransactionsTransactions are protective blocks where SQL statements are only permanent if they can all succeed as one atomic action. The classic example is a transfer between two accounts where you can only have a deposit if the withdrawal succeeded and vice versa. Transactions enforce the integrity of the database and guard the data against program errors or database break-downs. So basically you should use transaction blocks whenever you have a number of statements that must be executed together or not at all.For example:ActiveRecord::Base.transaction do
  david.withdrawal(100)
  mary.deposit(100)
endThis example will only take money from David and give it to Mary if neitherwithdrawalnordepositraise an exception. Exceptions will force a ROLLBACK that returns the database to the state before the transaction began. Be aware, though, that the objects willnothave their instance data returned to their pre-transactional state.Different Active Record classes in a single transactionThough thetransactionclass method is called on some Active Record class, the objects within the transaction block need not all be instances of that class. This is because transactions are per-database connection, not per-model.In this example abalancerecord is transactionally saved even thoughtransactionis called on theAccountclass:Account.transaction do
  balance.save!
  account.save!
endThetransactionmethod is also available as a model instance method. For example, you can also do this:balance.transaction do
  balance.save!
  account.save!
endTransactionsare not distributed across database connectionsA transaction acts on a single database connection. If you have multiple class-specific databases, the transaction will not protect interaction among them. One workaround is to begin a transaction on each class whose models you alter:Student.transaction do
  Course.transaction do
    course.enroll(student)
    student.units += course.units
  end
endThis is a poor solution, but fully distributed transactions are beyond the scope of Active Record.saveanddestroyare automatically wrapped in a transactionBoth#saveand#destroycome wrapped in a transaction that ensures that whatever you do in validations or callbacks will happen under its protected cover. So you can use validations to check for values that the transaction depends on or you can raise exceptions in the callbacks to rollback, includingafter_*callbacks.As a consequence changes to the database are not seen outside your connection until the operation is complete. For example, if you try to update the index of a search engine inafter_savethe indexer wonât see the updated record. Theafter_commitcallback is the only one that is triggered once the update is committed. See below.Exceptionhandling and rolling backAlso have in mind that exceptions thrown within a transaction block will be propagated (after triggering the ROLLBACK), so you should be ready to catch those in your application code.One exception is theActiveRecord::Rollbackexception, which will trigger a ROLLBACK when raised, but not be re-raised by the transaction block. Any other exception will be re-raised.Warning: one should not catchActiveRecord::StatementInvalidexceptions inside a transaction block.ActiveRecord::StatementInvalidexceptions indicate that an error occurred at the database level, for example when a unique constraint is violated. On some database systems, such as PostgreSQL, database errors inside a transaction cause the entire transaction to become unusable until itâs restarted from the beginning. Here is an example which demonstrates the problem:# Suppose that we have a Number model with a unique column called 'i'.
Number.transaction do
  Number.create(i: 0)
  begin
    # This will raise a unique constraint error...
    Number.create(i: 0)
  rescue ActiveRecord::StatementInvalid
    # ...which we ignore.
  end

  # On PostgreSQL, the transaction is now unusable. The following
  # statement will cause a PostgreSQL error, even though the unique
  # constraint is no longer violated:
  Number.create(i: 1)
  # => "PG::Error: ERROR:  current transaction is aborted, commands
  #     ignored until end of transaction block"
endOne should restart the entire transaction if anActiveRecord::StatementInvalidoccurred.Nested transactionstransactioncalls can be nested. By default, this makes all database statements in the nested transaction block become part of the parent transaction. For example, the following behavior may be surprising:User.transaction do
  User.create(username: 'Kotori')
  User.transaction do
    User.create(username: 'Nemu')
    raise ActiveRecord::Rollback
  end
endcreates both âKotoriâ and âNemuâ. Reason is theActiveRecord::Rollbackexception in the nested block does not issue a ROLLBACK. Since these exceptions are captured in transaction blocks, the parent block does not see it and the real transaction is committed.In order to get a ROLLBACK for the nested transaction you may ask for a real sub-transaction by passingrequires_new: true. If anything goes wrong, the database rolls back to the beginning of the sub-transaction without rolling back the parent transaction. If we add it to the previous example:User.transaction do
  User.create(username: 'Kotori')
  User.transaction(requires_new: true) do
    User.create(username: 'Nemu')
    raise ActiveRecord::Rollback
  end
endonly âKotoriâ is created.Most databases donât support true nested transactions. At the time of writing, the only database that weâre aware of that supports true nested transactions, is MS-SQL. Because of this, Active Record emulates nested transactions by using savepoints. Seedev.mysql.com/doc/refman/en/savepoint.htmlfor more information about savepoints.CallbacksThere are two types of callbacks associated with committing and rolling back transactions:after_commitandafter_rollback.after_commitcallbacks are called on every record saved or destroyed within a transaction immediately after the transaction is committed.after_rollbackcallbacks are called on every record saved or destroyed within a transaction immediately after the transaction or savepoint is rolled back.These callbacks are useful for interacting with other systems since you will be guaranteed that the callback is only executed when the database is in a permanent state. For example,after_commitis a good spot to put in a hook to clearing a cache since clearing it from within a transaction could trigger the cache to be regenerated before the database is updated.NOTE:Callbacksare deduplicated per callback by filter.Trying to define multiple callbacks with the same filter will result in a single callback being run.For example:after_commit :do_something
after_commit :do_something # only the last one will be calledThis applies to all variations ofafter_*_commitcallbacks as well.after_commit :do_something
after_create_commit :do_something
after_save_commit :do_somethingIt is recommended to use theon:option to specify when the callback should be run.after_commit :do_something, on: [:create, :update]This is equivalent to usingafter_create_commitandafter_update_commit, but will not be deduplicated.CaveatsIf youâre on MySQL, then do not use Data Definition Language (DDL) operations in nested transactions blocks that are emulated with savepoints. That is, do not execute statements like âCREATE TABLEâ inside such blocks. This is because MySQL automatically releases all savepoints upon executing a DDL operation. Whentransactionis finished and tries to release the savepoint it created earlier, a database error will occur because the savepoint has already been automatically released. The following example demonstrates the problem:Model.lease_connection.transaction do                           # BEGIN
  Model.lease_connection.transaction(requires_new: true) do     # CREATE SAVEPOINT active_record_1
    Model.lease_connection.create_table(...)                    # active_record_1 now automatically released
  end                                                     # RELEASE SAVEPOINT active_record_1
                                                          # ^^^^ BOOM! database error!
endNote that âTRUNCATEâ is also a MySQL DDL statement!MethodsAafter_commit,after_create_commit,after_destroy_commit,after_rollback,after_save_commit,after_update_commitCcurrent_transactionSset_callbackTtransactionInstance Public methodsafter_commit(*args, &block)LinkThis callback is called after a record has been created, updated, or destroyed.You can specify that the callback should only be fired by a certain action with the:onoption:after_commit :do_foo, on: :create
after_commit :do_bar, on: :update
after_commit :do_baz, on: :destroy

after_commit :do_foo_bar, on: [:create, :update]
after_commit :do_bar_baz, on: [:update, :destroy]Source:show|on GitHub# File activerecord/lib/active_record/transactions.rb, line 266defafter_commit(*args,&block)set_options_for_callbacks!(args,prepend_option)set_callback(:commit,:after,*args,&block)endafter_create_commit(*args, &block)LinkShortcut forafter_commit :hook, on: :create.Source:show|on GitHub# File activerecord/lib/active_record/transactions.rb, line 278defafter_create_commit(*args,&block)set_options_for_callbacks!(args,on::create,**prepend_option)set_callback(:commit,:after,*args,&block)endafter_destroy_commit(*args, &block)LinkShortcut forafter_commit :hook, on: :destroy.Source:show|on GitHub# File activerecord/lib/active_record/transactions.rb, line 290defafter_destroy_commit(*args,&block)set_options_for_callbacks!(args,on::destroy,**prepend_option)set_callback(:commit,:after,*args,&block)endafter_rollback(*args, &block)LinkThis callback is called after a create, update, or destroy are rolled back.Please check the documentation ofafter_commitfor options.Source:show|on GitHub# File activerecord/lib/active_record/transactions.rb, line 298defafter_rollback(*args,&block)set_options_for_callbacks!(args,prepend_option)set_callback(:rollback,:after,*args,&block)endafter_save_commit(*args, &block)LinkShortcut forafter_commit :hook, on: [ :create, :update ].Source:show|on GitHub# File activerecord/lib/active_record/transactions.rb, line 272defafter_save_commit(*args,&block)set_options_for_callbacks!(args,on:[:create,:update],**prepend_option)set_callback(:commit,:after,*args,&block)endafter_update_commit(*args, &block)LinkShortcut forafter_commit :hook, on: :update.Source:show|on GitHub# File activerecord/lib/active_record/transactions.rb, line 284defafter_update_commit(*args,&block)set_options_for_callbacks!(args,on::update,**prepend_option)set_callback(:commit,:after,*args,&block)endcurrent_transaction()LinkReturns a representation of the current transaction state, which can be a top level transaction, a savepoint, or the absence of a transaction.An object is always returned, whether or not a transaction is currently active. To check if a transaction was opened, usecurrent_transaction.open?.See theActiveRecord::Transactiondocumentation for detailed behavior.Source:show|on GitHub# File activerecord/lib/active_record/transactions.rb, line 245defcurrent_transactionconnection_pool.active_connection&.current_transaction&.user_transaction||Transaction::NULL_TRANSACTIONendset_callback(name, *filter_list, &block)LinkSimilar toActiveSupport::Callbacks::ClassMethods#set_callback, but with support for options available onafter_commitandafter_rollbackcallbacks.Source:show|on GitHub# File activerecord/lib/active_record/transactions.rb, line 305defset_callback(name,*filter_list,&block)options=filter_list.extract_options!filter_list<<optionsifname.in?([:commit,:rollback])&&options[:on]fire_on=Array(options[:on])assert_valid_transaction_action(fire_on)options[:if] = [->{transaction_include_any_action?(fire_on) },*options[:if]
    ]endsuper(name,*filter_list,&block)endtransaction(**options, &block)LinkSee theConnectionAdapters::DatabaseStatements#transactionAPI docs.Source:show|on GitHub# File activerecord/lib/active_record/transactions.rb, line 232deftransaction(**options,&block)with_connectiondo|connection|connection.transaction(**options,&block)endend