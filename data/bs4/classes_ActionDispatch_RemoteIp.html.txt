Action DispatchRemoteIpThis middleware calculates the IP address of the remote client that is making the request. It does this by checking various headers that could contain the address, and then picking the last-set address that is not on the list of trusted IPs. This follows the precedent set by e.g.the Tomcat server. A more detailed explanation of the algorithm is given atGetIp#calculate_ip.Some Rack servers concatenate repeated headers, likeHTTP RFC 2616requires. Some Rack servers simply drop preceding headers, and only report the value that was [given in the last header](andre.arko.net/2011/12/26/repeated-headers-and-ruby-web-servers). If you are behind multiple proxy servers (like NGINX to HAProxy to Unicorn) then you should test your Rack server to make sure your data is good.IF YOU DONâT USE A PROXY, THIS MAKES YOU VULNERABLE TO IP SPOOFING. This middleware assumes that there is at least one proxy sitting around and setting headers with the clientâs remote IP address. If you donât use a proxy, because you are hosted on e.g. Heroku withoutSSL, any client can claim to have any IP address by setting theX-Forwarded-Forheader. If you care about that, then you need to explicitly drop or ignore those headers sometime before this middleware runs. Alternatively, remove this middleware to avoid inadvertently relying on it.NamespaceCLASSActionDispatch::RemoteIp::GetIpCLASSActionDispatch::RemoteIp::IpSpoofAttackErrorMethodsCcallNnewConstantsTRUSTED_PROXIES=[
"127.0.0.0/8",    # localhost IPv4 range, per RFC-3330
"::1",            # localhost IPv6
"fc00::/7",       # private IPv6 range fc00::/7
"10.0.0.0/8",     # private IPv4 range 10.x.x.x
"172.16.0.0/12",  # private IPv4 range 172.16.0.0 .. 172.31.255.255
"192.168.0.0/16", # private IPv4 range 192.168.x.x
].map { |proxy| IPAddr.new(proxy) }The default trusted IPs list simply includes IP addresses that are guaranteed by the IP specification to be private addresses. Those will not be the ultimate client IP in production, and so are discarded. Seeen.wikipedia.org/wiki/Private_networkfor details.Attributes[R]check_ip[R]proxiesClass Public methodsnew(app, ip_spoofing_check = true, custom_proxies = nil)LinkCreate a newRemoteIpmiddleware instance.Theip_spoofing_checkoption is on by default. When on, an exception is raised if it looks like the client is trying to lie about its own IP address. It makes sense to turn off this check on sites aimed at non-IP clients (like WAP devices), or behind proxies that set headers in an incorrect or confusing way (like AWS ELB).Thecustom_proxiesargument can take an enumerable which will be used instead ofTRUSTED_PROXIES. Any proxy setup will put the value you want in the middle (or at the beginning) of theX-Forwarded-Forlist, with your proxy servers after it. If your proxies arenât removed, pass them in via thecustom_proxiesparameter. That way, the middleware will ignore those IP addresses, and return the one that you want.Source:show|on GitHub# File actionpack/lib/action_dispatch/middleware/remote_ip.rb, line 65definitialize(app,ip_spoofing_check=true,custom_proxies=nil)@app=app@check_ip=ip_spoofing_check@proxies=ifcustom_proxies.blank?TRUSTED_PROXIESelsifcustom_proxies.respond_to?(:any?)custom_proxieselseraise(ArgumentError,<<~EOM)Setting config.action_dispatch.trusted_proxies to a single value isn't
          supported. Please set this to an enumerable instead. For
          example, instead of:

          config.action_dispatch.trusted_proxies = IPAddr.new("10.0.0.0/8")

          Wrap the value in an Array:

          config.action_dispatch.trusted_proxies = [IPAddr.new("10.0.0.0/8")]

          Note that passing an enumerable will *replace* the default set of trusted proxies.EOMendendInstance Public methodscall(env)LinkSince the IP address may not be needed, we store the object here without calculating the IP to keep from slowing down the majority of requests. For those requests that do need to know the IP, theGetIp#calculate_ipmethod will calculate the memoized client IP address.Source:show|on GitHub# File actionpack/lib/action_dispatch/middleware/remote_ip.rb, line 93defcall(env)req=ActionDispatch::Request.newenvreq.remote_ip=GetIp.new(req,check_ip,proxies)@app.call(req.env)end