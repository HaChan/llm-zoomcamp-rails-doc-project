MethodsDdeprecate_methodsInstance Public methodsdeprecate_methods(target_module, *method_names)LinkDeclare that a method has been deprecated.class Fred
  def aaa; end
  def bbb; end
  def ccc; end
  def ddd; end
  def eee; end
end

deprecator = ActiveSupport::Deprecation.new('next-release', 'MyGem')

deprecator.deprecate_methods(Fred, :aaa, bbb: :zzz, ccc: 'use Bar#ccc instead')
# => Fred

Fred.new.aaa
# DEPRECATION WARNING: aaa is deprecated and will be removed from MyGem next-release. (called from irb_binding at (irb):10)
# => nil

Fred.new.bbb
# DEPRECATION WARNING: bbb is deprecated and will be removed from MyGem next-release (use zzz instead). (called from irb_binding at (irb):11)
# => nil

Fred.new.ccc
# DEPRECATION WARNING: ccc is deprecated and will be removed from MyGem next-release (use Bar#ccc instead). (called from irb_binding at (irb):12)
# => nilSource:show|on GitHub# File activesupport/lib/active_support/deprecation/method_wrappers.rb, line 35defdeprecate_methods(target_module,*method_names)options=method_names.extract_options!deprecator=options.delete(:deprecator)||selfmethod_names+=options.keysmod=nilmethod_names.eachdo|method_name|message=options[method_name]iftarget_module.method_defined?(method_name)||target_module.private_method_defined?(method_name)method=target_module.instance_method(method_name)target_module.module_evaldoredefine_method(method_name)do|*args,&block|deprecator.deprecation_warning(method_name,message)method.bind_call(self,*args,&block)endruby2_keywords(method_name)endelsemod||=Module.newmod.module_evaldodefine_method(method_name)do|*args,&block|deprecator.deprecation_warning(method_name,message)super(*args,&block)endruby2_keywords(method_name)endendendtarget_module.prepend(mod)ifmodend