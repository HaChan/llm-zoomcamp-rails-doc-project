Range With FormatMethodsTto_formatted_s,to_fsConstantsRANGE_FORMATS={
db: -> (start, stop) do
if start && stop
case start
when String then "BETWEEN '#{start}' AND '#{stop}'"
else
"BETWEEN '#{start.to_fs(:db)}' AND '#{stop.to_fs(:db)}'"
end
elsif start
case start
when String then ">= '#{start}'"
else
">= '#{start.to_fs(:db)}'"
end
elsif stop
case stop
when String then "<= '#{stop}'"
else
"<= '#{stop.to_fs(:db)}'"
end
end
end
}Instance Public methodsto_formatted_s(format = :default)LinkAlias for:to_fsto_fs(format = :default)LinkConvert range to a formatted string. SeeRANGE_FORMATSfor predefined formats.This method is aliased toto_formatted_s.range = (1..100)           # => 1..100

range.to_s                 # => "1..100"
range.to_fs(:db)           # => "BETWEEN '1' AND '100'"

range = (1..)              # => 1..
range.to_fs(:db)           # => ">= '1'"

range = (..100)            # => ..100
range.to_fs(:db)           # => "<= '100'"Adding your own range formats toto_fsYou can add your own formats to the Range::RANGE_FORMATS hash. Use the format name as the hash key and a Proc instance.# config/initializers/range_formats.rb
Range::RANGE_FORMATS[:short] = ->(start, stop) { "Between #{start.to_fs(:db)} and #{stop.to_fs(:db)}" }Also aliased as:to_formatted_sSource:show|on GitHub# File activesupport/lib/active_support/core_ext/range/conversions.rb, line 51defto_fs(format=:default)ifformatter=RANGE_FORMATS[format]formatter.call(self.begin,self.end)elseto_sendend