Encapsulates the notion of a MIME type. Can be used at render time, for example, with:class PostsController < ActionController::Base
  def show
    @post = Post.find(params[:id])

    respond_to do |format|
      format.html
      format.ics { render body: @post.to_ics, mime_type: Mime::Type.lookup("text/calendar")  }
      format.xml { render xml: @post }
    end
  end
endNamespaceCLASSMime::Type::InvalidMimeTypeMethods#==,===,=~Aall?Eeql?Hhtml?Llookup,lookup_by_extensionMmatch?NnewPparse,parse_data_with_trailing_star,parse_trailing_starRref,register,register_alias,register_callbackTto_s,to_str,to_symUunregisterConstantsACCEPT_HEADER_REGEXP=/[^,\s"](?:[^,"]|"[^"]*")*/MIME_NAME="[a-zA-Z0-9][a-zA-Z0-9#{Regexp.escape('!#$&-^_.+')}]{0,126}"MIME_PARAMETER="\s*;\s*#{MIME_NAME}(?:=#{MIME_PARAMETER_VALUE})?"MIME_PARAMETER_VALUE="(?:#{MIME_NAME}|\"[^\"\r\\\\]*\")"MIME_REGEXP=/\A(?:\*\/\*|#{MIME_NAME}\/(?:\*|#{MIME_NAME})(?>#{MIME_PARAMETER})*\s*)\z/PARAMETER_SEPARATOR_REGEXP=/;\s*q="?/all media-type parameters need to be before the q-parameterwww.rfc-editor.org/rfc/rfc7231#section-5.3.2TRAILING_STAR_REGEXP=/^(text|application)\/\*/Attributes[R]hash[R]string[R]symbol[R]synonymsClass Public methodslookup(string)LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/mime_type.rb, line 167deflookup(string)returnLOOKUP[string]ifLOOKUP.key?(string)# fallback to the media-type without parameters if it was not foundstring=string.split(";",2)[0]&.rstripLOOKUP[string]||Type.new(string)endlookup_by_extension(extension)LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/mime_type.rb, line 175deflookup_by_extension(extension)EXTENSION_LOOKUP[extension.to_s]endnew(string, symbol = nil, synonyms = [])LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/mime_type.rb, line 264definitialize(string,symbol=nil,synonyms= [])unlessMIME_REGEXP.match?(string)raiseInvalidMimeType,"#{string.inspect} is not a valid MIME type"end@symbol,@synonyms=symbol,synonyms@string=string@hash= [@string,@synonyms,@symbol].hashendparse(accept_header)LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/mime_type.rb, line 200defparse(accept_header)if!accept_header.include?(",")if(index=accept_header.index(PARAMETER_SEPARATOR_REGEXP))accept_header=accept_header[0,index].stripendreturn[]ifaccept_header.blank?parse_trailing_star(accept_header)||Array(Mime::Type.lookup(accept_header))elselist,index= [],0accept_header.scan(ACCEPT_HEADER_REGEXP).eachdo|header|params,q=header.split(PARAMETER_SEPARATOR_REGEXP)nextunlessparamsparams.strip!nextifparams.empty?params=parse_trailing_star(params)||[params]params.eachdo|m|list<<AcceptItem.new(index,m.to_s,q)index+=1endendAcceptList.sort!listendendparse_data_with_trailing_star(type)LinkFor an input of'text', returns[Mime[:json], Mime[:xml], Mime[:ics], Mime[:html], Mime[:css], Mime[:csv], Mime[:js], Mime[:yaml], Mime[:text]].For an input of'application', returns[Mime[:html], Mime[:js], Mime[:xml], Mime[:yaml], Mime[:atom], Mime[:json], Mime[:rss], Mime[:url_encoded_form]].Source:show|on GitHub# File actionpack/lib/action_dispatch/http/mime_type.rb, line 236defparse_data_with_trailing_star(type)Mime::SET.select{|m|m.match?(type) }endparse_trailing_star(accept_header)LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/mime_type.rb, line 227defparse_trailing_star(accept_header)parse_data_with_trailing_star($1)ifaccept_header=~TRAILING_STAR_REGEXPendregister(string, symbol, mime_type_synonyms = [], extension_synonyms = [], skip_lookup = false)LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/mime_type.rb, line 186defregister(string,symbol,mime_type_synonyms= [],extension_synonyms= [],skip_lookup=false)new_mime=Type.new(string,symbol,mime_type_synonyms)SET<<new_mime([string]+mime_type_synonyms).each{|str|LOOKUP[str] =new_mime}unlessskip_lookup([symbol]+extension_synonyms).each{|ext|EXTENSION_LOOKUP[ext.to_s] =new_mime}@register_callbacks.eachdo|callback|callback.call(new_mime)endnew_mimeendregister_alias(string, symbol, extension_synonyms = [])LinkRegisters an alias thatâs not used on MIME type lookup, but can be referenced directly. Especially useful for rendering different HTML versions depending on the user agent, like an iPhone.Source:show|on GitHub# File actionpack/lib/action_dispatch/http/mime_type.rb, line 182defregister_alias(string,symbol,extension_synonyms= [])register(string,symbol, [],extension_synonyms,true)endregister_callback(&block)LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/mime_type.rb, line 163defregister_callback(&block)@register_callbacks<<blockendunregister(symbol)LinkThis method is opposite of register method.To unregister a MIME type:Mime::Type.unregister(:mobile)Source:show|on GitHub# File actionpack/lib/action_dispatch/http/mime_type.rb, line 245defunregister(symbol)symbol=symbol.downcaseifmime=Mime[symbol]SET.delete_if{|v|v.eql?(mime) }LOOKUP.delete_if{|_,v|v.eql?(mime) }EXTENSION_LOOKUP.delete_if{|_,v|v.eql?(mime) }endendInstance Public methods==(mime_type)LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/mime_type.rb, line 297def==(mime_type)returnfalseunlessmime_type(@synonyms+[self]).any?do|synonym|synonym.to_s==mime_type.to_s||synonym.to_sym==mime_type.to_symendend===(list)LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/mime_type.rb, line 289def===(list)iflist.is_a?(Array)
    (@synonyms+[self]).any?{|synonym|list.include?(synonym) }elsesuperendend=~(mime_type)LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/mime_type.rb, line 311def=~(mime_type)returnfalseunlessmime_typeregexp=Regexp.new(Regexp.quote(mime_type.to_s))@synonyms.any?{|synonym|synonym.to_s=~regexp}||@string=~regexpendall?()LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/mime_type.rb, line 327defall?;false;endeql?(other)LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/mime_type.rb, line 304defeql?(other)super||(self.class==other.class&&@string==other.string&&@synonyms==other.synonyms&&@symbol==other.symbol)endhtml?()LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/mime_type.rb, line 323defhtml?(symbol==:html)||@string.include?("html")endmatch?(mime_type)LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/mime_type.rb, line 317defmatch?(mime_type)returnfalseunlessmime_typeregexp=Regexp.new(Regexp.quote(mime_type.to_s))@synonyms.any?{|synonym|synonym.to_s.match?(regexp) }||@string.match?(regexp)endref()LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/mime_type.rb, line 285defrefsymbol||to_sendto_s()LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/mime_type.rb, line 273defto_s@stringendto_str()LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/mime_type.rb, line 277defto_strto_sendto_sym()LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/mime_type.rb, line 281defto_sym@symbolend