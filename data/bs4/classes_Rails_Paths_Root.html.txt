This object is an extended hash that behaves as root of theRails::Pathssystem. It allows you to collect information about how you want to structure your application paths through a Hash-like API. It requires you to give a physical path on initialization.root = Root.new "/rails"
root.add "app/controllers", eager_load: trueThe above command creates a new root object and adds âapp/controllersâ as a path. This means we can get aRails::Paths::Pathobject back like below:path = root["app/controllers"]
path.eager_load?               # => true
path.is_a?(Rails::Paths::Path) # => trueThePathobject is simply an enumerable and allows you to easily add extra paths:path.is_a?(Enumerable) # => true
path.to_ary.inspect    # => ["app/controllers"]

path << "lib/controllers"
path.to_ary.inspect    # => ["app/controllers", "lib/controllers"]Notice that when you add a path usingadd, thePathobject created already contains the path with the same path value given toadd. In some situations, you may not want this behavior, so you can give:withas option.root.add "config/routes", with: "config/routes.rb"
root["config/routes"].inspect # => ["config/routes.rb"]Theaddmethod accepts the following options as arguments:eager_load,autoload,autoload_once, andglob.Finally, thePathobject also provides a few helpers:root = Root.new "/rails"
root.add "app/controllers"

root["app/controllers"].expanded # => ["/rails/app/controllers"]
root["app/controllers"].existent # => ["/rails/app/controllers"]Check theRails::Paths::Pathdocumentation for more information.Methods#[],[]=Aadd,all_paths,autoload_once,autoload_pathsEeager_loadKkeysLload_pathsNnewVvalues,values_atAttributes[RW]pathClass Public methodsnew(path)LinkSource:show|on GitHub# File railties/lib/rails/paths.rb, line 54definitialize(path)@path=path@root= {}endInstance Public methods[](path)LinkSource:show|on GitHub# File railties/lib/rails/paths.rb, line 69def[](path)@root[path]end[]=(path, value)LinkSource:show|on GitHub# File railties/lib/rails/paths.rb, line 59def[]=(path,value)glob=self[path]?self[path].glob:niladd(path,with:value,glob:glob)endadd(path, options = {})LinkSource:show|on GitHub# File railties/lib/rails/paths.rb, line 64defadd(path,options= {})with=Array(options.fetch(:with,path))@root[path] =Path.new(self,path,with,options)endall_paths()LinkSource:show|on GitHub# File railties/lib/rails/paths.rb, line 85defall_pathsvalues.tap(&:uniq!)endautoload_once()LinkSource:show|on GitHub# File railties/lib/rails/paths.rb, line 89defautoload_oncefilter_by(&:autoload_once?)endautoload_paths()LinkSource:show|on GitHub# File railties/lib/rails/paths.rb, line 97defautoload_pathsfilter_by(&:autoload?)endeager_load()LinkSource:show|on GitHub# File railties/lib/rails/paths.rb, line 93defeager_loadfilter_by(&:eager_load?)endkeys()LinkSource:show|on GitHub# File railties/lib/rails/paths.rb, line 77defkeys@root.keysendload_paths()LinkSource:show|on GitHub# File railties/lib/rails/paths.rb, line 101defload_pathsfilter_by(&:load_path?)endvalues()LinkSource:show|on GitHub# File railties/lib/rails/paths.rb, line 73defvalues@root.valuesendvalues_at(*list)LinkSource:show|on GitHub# File railties/lib/rails/paths.rb, line 81defvalues_at(*list)@root.values_at(*list)end