MethodsAadd_channel,add_subscriberBbroadcastIinvoke_callbackNnewRremove_channel,remove_subscriberClass Public methodsnew()LinkSource:show|on GitHub# File actioncable/lib/action_cable/subscription_adapter/subscriber_map.rb, line 8definitialize@subscribers=Hash.new{|h,k|h[k] = [] }@sync=Mutex.newendInstance Public methodsadd_channel(channel, on_success)LinkSource:show|on GitHub# File actioncable/lib/action_cable/subscription_adapter/subscriber_map.rb, line 49defadd_channel(channel,on_success)on_success.callifon_successendadd_subscriber(channel, subscriber, on_success)LinkSource:show|on GitHub# File actioncable/lib/action_cable/subscription_adapter/subscriber_map.rb, line 13defadd_subscriber(channel,subscriber,on_success)@sync.synchronizedonew_channel=!@subscribers.key?(channel)@subscribers[channel]<<subscriberifnew_channeladd_channelchannel,on_successelsifon_successon_success.callendendendbroadcast(channel, message)LinkSource:show|on GitHub# File actioncable/lib/action_cable/subscription_adapter/subscriber_map.rb, line 38defbroadcast(channel,message)list=@sync.synchronizedoreturnif!@subscribers.key?(channel)@subscribers[channel].dupendlist.eachdo|subscriber|invoke_callback(subscriber,message)endendinvoke_callback(callback, message)LinkSource:show|on GitHub# File actioncable/lib/action_cable/subscription_adapter/subscriber_map.rb, line 56definvoke_callback(callback,message)callback.callmessageendremove_channel(channel)LinkSource:show|on GitHub# File actioncable/lib/action_cable/subscription_adapter/subscriber_map.rb, line 53defremove_channel(channel)endremove_subscriber(channel, subscriber)LinkSource:show|on GitHub# File actioncable/lib/action_cable/subscription_adapter/subscriber_map.rb, line 27defremove_subscriber(channel,subscriber)@sync.synchronizedo@subscribers[channel].delete(subscriber)if@subscribers[channel].empty?@subscribers.deletechannelremove_channelchannelendendend