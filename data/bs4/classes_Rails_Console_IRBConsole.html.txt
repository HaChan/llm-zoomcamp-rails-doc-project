MethodsCcolorized_envNname,newSstartIncluded ModulesRails::ConsoleMethodsClass Public methodsnew(app)LinkSource:show|on GitHub# File railties/lib/rails/commands/console/irb_console.rb, line 73definitialize(app)@app=apprequire"irb"require"irb/completion"endInstance Public methodscolorized_env()LinkSource:show|on GitHub# File railties/lib/rails/commands/console/irb_console.rb, line 122defcolorized_envcaseRails.envwhen"development"IRB::Color.colorize("dev", [:BLUE])when"test"IRB::Color.colorize("test", [:BLUE])when"production"IRB::Color.colorize("prod", [:RED])elseRails.envendendname()LinkSource:show|on GitHub# File railties/lib/rails/commands/console/irb_console.rb, line 80defname"IRB"endstart()LinkSource:show|on GitHub# File railties/lib/rails/commands/console/irb_console.rb, line 84defstartIRB.setup(nil)if!Rails.env.local?&&!ENV.key?("IRB_USE_AUTOCOMPLETE")IRB.conf[:USE_AUTOCOMPLETE] =falseendenv=colorized_envprompt_prefix="%N(#{env})"IRB.conf[:IRB_NAME] =@app.nameIRB.conf[:PROMPT][:RAILS_PROMPT] = {PROMPT_I:"#{prompt_prefix}> ",PROMPT_S:"#{prompt_prefix}%l ",PROMPT_C:"#{prompt_prefix}* ",RETURN:"=> %s\n"}ifcurrent_filter=IRB.conf[:BACKTRACE_FILTER]IRB.conf[:BACKTRACE_FILTER] =->(backtrace)dobacktrace=current_filter.call(backtrace)Rails.backtrace_cleaner.filter(backtrace)endelseIRB.conf[:BACKTRACE_FILTER] =->(backtrace)doRails.backtrace_cleaner.filter(backtrace)endend# Because some users/libs use Rails::ConsoleMethods to extend Rails console,# we still include it for backward compatibility.IRB::ExtendCommandBundle.includeConsoleMethods# Respect user's choice of prompt mode.IRB.conf[:PROMPT_MODE] =:RAILS_PROMPTifIRB.conf[:PROMPT_MODE]==:DEFAULTIRB::Irb.new.run(IRB.conf)end