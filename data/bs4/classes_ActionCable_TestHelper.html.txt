Provides helper methods for testing Action Cable broadcastingMethodsAassert_broadcast_on,assert_broadcasts,assert_no_broadcastsCcapture_broadcastsInstance Public methodsassert_broadcast_on(stream, data, &block)LinkAsserts that the specified message has been sent to the stream.def test_assert_transmitted_message
  ActionCable.server.broadcast 'messages', text: 'hello'
  assert_broadcast_on('messages', text: 'hello')
endIf a block is passed, that block should cause a message with the specified data to be sent.def test_assert_broadcast_on_again
  assert_broadcast_on('messages', text: 'hello') do
    ActionCable.server.broadcast 'messages', text: 'hello'
  end
endSource:show|on GitHub# File actioncable/lib/action_cable/test_helper.rb, line 116defassert_broadcast_on(stream,data,&block)# Encode to JSON and backâwe want to use this value to compare with decoded# JSON. Comparing JSON strings doesn't work due to the order if the keys.serialized_msg=ActiveSupport::JSON.decode(ActiveSupport::JSON.encode(data))new_messages=broadcasts(stream)ifblock_given?new_messages=new_broadcasts_from(new_messages,stream,"assert_broadcast_on",&block)endmessage=new_messages.find{|msg|ActiveSupport::JSON.decode(msg)==serialized_msg}error_message="No messages sent with #{data} to #{stream}"ifnew_messages.any?error_message=new_messages.inject("#{error_message}\nMessage(s) found:\n")do|error_message,new_message|error_message+"#{ActiveSupport::JSON.decode(new_message)}\n"endelseerror_message="#{error_message}\nNo message found for #{stream}"endassertmessage,error_messageendassert_broadcasts(stream, number, &block)LinkAsserts that the number of broadcasted messages to the stream matches the given number.def test_broadcasts
  assert_broadcasts 'messages', 0
  ActionCable.server.broadcast 'messages', { text: 'hello' }
  assert_broadcasts 'messages', 1
  ActionCable.server.broadcast 'messages', { text: 'world' }
  assert_broadcasts 'messages', 2
endIf a block is passed, that block should cause the specified number of messages to be broadcasted.def test_broadcasts_again
  assert_broadcasts('messages', 1) do
    ActionCable.server.broadcast 'messages', { text: 'hello' }
  end

  assert_broadcasts('messages', 2) do
    ActionCable.server.broadcast 'messages', { text: 'hi' }
    ActionCable.server.broadcast 'messages', { text: 'how are you?' }
  end
endSource:show|on GitHub# File actioncable/lib/action_cable/test_helper.rb, line 48defassert_broadcasts(stream,number,&block)ifblock_given?new_messages=new_broadcasts_from(broadcasts(stream),stream,"assert_broadcasts",&block)actual_count=new_messages.sizeassert_equalnumber,actual_count,"#{number} broadcasts to #{stream} expected, but #{actual_count} were sent"elseactual_count=broadcasts(stream).sizeassert_equalnumber,actual_count,"#{number} broadcasts to #{stream} expected, but #{actual_count} were sent"endendassert_no_broadcasts(stream, &block)LinkAsserts that no messages have been sent to the stream.def test_no_broadcasts
  assert_no_broadcasts 'messages'
  ActionCable.server.broadcast 'messages', { text: 'hi' }
  assert_broadcasts 'messages', 1
endIf a block is passed, that block should not cause any message to be sent.def test_broadcasts_again
  assert_no_broadcasts 'messages' do
    # No job messages should be sent from this block
  end
endNote: This assertion is simply a shortcut for:assert_broadcasts 'messages', 0, &blockSource:show|on GitHub# File actioncable/lib/action_cable/test_helper.rb, line 80defassert_no_broadcasts(stream,&block)assert_broadcastsstream,0,&blockendcapture_broadcasts(stream, &block)LinkReturns the messages that are broadcasted in the block.def test_broadcasts
  messages = capture_broadcasts('messages') do
    ActionCable.server.broadcast 'messages', { text: 'hi' }
    ActionCable.server.broadcast 'messages', { text: 'how are you?' }
  end
  assert_equal 2, messages.length
  assert_equal({ text: 'hi' }, messages.first)
  assert_equal({ text: 'how are you?' }, messages.last)
endSource:show|on GitHub# File actioncable/lib/action_cable/test_helper.rb, line 96defcapture_broadcasts(stream,&block)new_broadcasts_from(broadcasts(stream),stream,"capture_broadcasts",&block).map{|m|ActiveSupport::JSON.decode(m) }end