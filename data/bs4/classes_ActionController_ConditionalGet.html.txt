NamespaceMODULEActionController::ConditionalGet::ClassMethodsMethodsEexpires_in,expires_nowFfresh_whenHhttp_cache_foreverNno_storeSstale?Included ModulesActionController::HeadInstance Public methodsexpires_in(seconds, options = {})LinkSets theCache-Controlheader, overwriting existing directives. This method will also ensure an HTTPDateheader for client compatibility.Defaults to issuing theprivatedirective, so that intermediate caches must not cache the response.Options:publicIf true, replaces the defaultprivatedirective with thepublicdirective.:must_revalidateIf true, adds themust-revalidatedirective.:stale_while_revalidateSets the value of thestale-while-revalidatedirective.:stale_if_errorSets the value of thestale-if-errordirective.Any additional key-value pairs are concatenated as directives. For a list of supportedCache-Controldirectives, see thearticle on MDN.Examplesexpires_in 10.minutes
# => Cache-Control: max-age=600, private

expires_in 10.minutes, public: true
# => Cache-Control: max-age=600, public

expires_in 10.minutes, public: true, must_revalidate: true
# => Cache-Control: max-age=600, public, must-revalidate

expires_in 1.hour, stale_while_revalidate: 60.seconds
# => Cache-Control: max-age=3600, private, stale-while-revalidate=60

expires_in 1.hour, stale_if_error: 5.minutes
# => Cache-Control: max-age=3600, private, stale-if-error=300

expires_in 1.hour, public: true, "s-maxage": 3.hours, "no-transform": true
# => Cache-Control: max-age=3600, public, s-maxage=10800, no-transform=trueSource:show|on GitHub# File actionpack/lib/action_controller/metal/conditional_get.rb, line 288defexpires_in(seconds,options= {})response.cache_control.delete(:no_store)response.cache_control.merge!(max_age:seconds,public:options.delete(:public),must_revalidate:options.delete(:must_revalidate),stale_while_revalidate:options.delete(:stale_while_revalidate),stale_if_error:options.delete(:stale_if_error),
  )options.delete(:private)response.cache_control[:extras] =options.map{|k,v|"#{k}=#{v}"}response.date=Time.nowunlessresponse.date?endexpires_now()LinkSets an HTTP 1.1Cache-Controlheader ofno-cache. This means the resource will be marked as stale, so clients must always revalidate. Intermediate/browser caches may still store the asset.Source:show|on GitHub# File actionpack/lib/action_controller/metal/conditional_get.rb, line 306defexpires_nowresponse.cache_control.replace(no_cache:true)endfresh_when(object = nil, etag: nil, weak_etag: nil, strong_etag: nil, last_modified: nil, public: false, cache_control: {}, template: nil)LinkSets theetag,last_modified, or both on the response, and renders a304 Not Modifiedresponse if the request is already fresh.Options:etagSets a âweakâ ETag validator on the response. See the:weak_etagoption.:weak_etagSets a âweakâ ETag validator on the response. Requests that specify anIf-None-Matchheader may receive a304 Not Modifiedresponse if the ETag matches exactly.A weak ETag indicates semantic equivalence, not byte-for-byte equality, so theyâre good for caching HTML pages in browser caches. They canât be used for responses that must be byte-identical, like servingRangerequests within a PDF file.:strong_etagSets a âstrongâ ETag validator on the response. Requests that specify anIf-None-Matchheader may receive a304 Not Modifiedresponse if the ETag matches exactly.A strong ETag implies exact equality â the response must match byte for byte. This is necessary for servingRangerequests within a large video or PDF file, for example, or for compatibility with some CDNs that donât support weak ETags.:last_modifiedSets a âweakâ last-update validator on the response. Subsequent requests that specify anIf-Modified-Sinceheader may receive a304 Not    Modifiedresponse iflast_modified<=If-Modified-Since.:publicBy default theCache-Controlheader is private. Set this option totrueif you want your application to be cacheable by other devices, such as proxy caches.:cache_controlWhen given, will overwrite an existingCache-Controlheader. For a list ofCache-Controldirectives, see the [article on MDN](developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control).:templateBy default, the template digest for the current controller/action is included in ETags. If the action renders a different template, you can include its digest instead. If the action doesnât render a template at all, you can passtemplate: falseto skip any attempt to check for a template digest.Examplesdef show
  @article = Article.find(params[:id])
  fresh_when(etag: @article, last_modified: @article.updated_at, public: true)
endThis will send a304 Not Modifiedresponse if the request specifies a matching ETag andIf-Modified-Sinceheader. Otherwise, it will render theshowtemplate.You can also just pass a record:def show
  @article = Article.find(params[:id])
  fresh_when(@article)
endetagwill be set to the record, andlast_modifiedwill be set to the recordâsupdated_at.You can also pass an object that responds tomaximum, such as a collection of records:def index
  @articles = Article.all
  fresh_when(@articles)
endIn this case,etagwill be set to the collection, andlast_modifiedwill be set tomaximum(:updated_at)(the timestamp of the most recently updated record).When passing a record or a collection, you can still specify other options, such as:publicand:cache_control:def show
  @article = Article.find(params[:id])
  fresh_when(@article, public: true, cache_control: { no_cache: true })
endThe above will setCache-Control: public, no-cachein the response.When rendering a different template than the controller/actionâs default template, you can indicate which digest to include in the ETag:before_action { fresh_when @article, template: "widgets/show" }Source:show|on GitHub# File actionpack/lib/action_controller/metal/conditional_get.rb, line 138deffresh_when(object=nil,etag:nil,weak_etag:nil,strong_etag:nil,last_modified:nil,public:false,cache_control:{},template:nil)response.cache_control.delete(:no_store)weak_etag||=etag||objectunlessstrong_etaglast_modified||=object.try(:updated_at)||object.try(:maximum,:updated_at)ifstrong_etagresponse.strong_etag=combine_etagsstrong_etag,last_modified:last_modified,public:public,template:templateelsifweak_etag||templateresponse.weak_etag=combine_etagsweak_etag,last_modified:last_modified,public:public,template:templateendresponse.last_modified=last_modifiediflast_modifiedresponse.cache_control[:public] =trueifpublicresponse.cache_control.merge!(cache_control)head:not_modifiedifrequest.fresh?(response)endhttp_cache_forever(public: false)LinkCache or yield the block. The cache is supposed to never expire.You can use this method when you have an HTTP response that never changes, and the browser and proxies should cache it indefinitely.public: By default, HTTP responses are private, cached only on the userâs web browser. To allow proxies to cache the response, settrueto indicate that they can serve the cached response to all users.Source:show|on GitHub# File actionpack/lib/action_controller/metal/conditional_get.rb, line 318defhttp_cache_forever(public:false)expires_in100.years,public:publicyieldifstale?(etag:request.fullpath,last_modified:Time.new(2011,1,1).utc,public:public)endno_store()LinkSets an HTTP 1.1Cache-Controlheader ofno-store. This means the resource may not be stored in any cache.Source:show|on GitHub# File actionpack/lib/action_controller/metal/conditional_get.rb, line 328defno_storeresponse.cache_control.replace(no_store:true)endstale?(object = nil, **freshness_kwargs)LinkSets theetagand/orlast_modifiedon the response and checks them against the request. If the request doesnât match the provided options, it is considered stale, and the response should be rendered from scratch. Otherwise, it is fresh, and a304 Not Modifiedis sent.OptionsSeefresh_whenfor supported options.Examplesdef show
  @article = Article.find(params[:id])

  if stale?(etag: @article, last_modified: @article.updated_at)
    @statistics = @article.really_expensive_call
    respond_to do |format|
      # all the supported formats
    end
  end
endYou can also just pass a record:def show
  @article = Article.find(params[:id])

  if stale?(@article)
    @statistics = @article.really_expensive_call
    respond_to do |format|
      # all the supported formats
    end
  end
endetagwill be set to the record, andlast_modifiedwill be set to the recordâsupdated_at.You can also pass an object that responds tomaximum, such as a collection of records:def index
  @articles = Article.all

  if stale?(@articles)
    @statistics = @articles.really_expensive_call
    respond_to do |format|
      # all the supported formats
    end
  end
endIn this case,etagwill be set to the collection, andlast_modifiedwill be set tomaximum(:updated_at)(the timestamp of the most recently updated record).When passing a record or a collection, you can still specify other options, such as:publicand:cache_control:def show
  @article = Article.find(params[:id])

  if stale?(@article, public: true, cache_control: { no_cache: true })
    @statistics = @articles.really_expensive_call
    respond_to do |format|
      # all the supported formats
    end
  end
endThe above will setCache-Control: public, no-cachein the response.When rendering a different template than the controller/actionâs default template, you can indicate which digest to include in the ETag:def show
  super if stale?(@article, template: "widgets/show")
endSource:show|on GitHub# File actionpack/lib/action_controller/metal/conditional_get.rb, line 237defstale?(object=nil,**freshness_kwargs)fresh_when(object,**freshness_kwargs)!request.fresh?(response)end