Attribute AccessorsExtends the module object with class/module and instance accessors for class/module attributes, just like the native attr* accessors for instance attributes.Attribute Accessors per ThreadExtends the module object with class/module and instance accessors for class/module attributes, just like the native attr* accessors for instance attributes, but does so on a per-thread basis.So the values are scoped within the Thread.current space under the class name of the module.Note that it can also be scoped per-fiber ifRails.application.config.active_support.isolation_levelis set to:fiber.NamespaceMODULEModule::ConcerningMethodsAalias_attribute,anonymous?,attr_internal,attr_internal_accessor,attr_internal_naming_format=,attr_internal_reader,attr_internal_writerCcattr_accessor,cattr_reader,cattr_writerDdeep_dup,delegate,delegate_missing_to,deprecateMmattr_accessor,mattr_reader,mattr_writer,module_parent,module_parent_name,module_parentsRredefine_method,redefine_singleton_method,remove_possible_method,remove_possible_singleton_methodSsilence_redefinition_of_methodTthread_cattr_accessor,thread_mattr_accessorIncluded ModulesModule::ConcerningAttributes[R]attr_internal_naming_formatClass Public methodsattr_internal_naming_format=(format)LinkSource:show|on GitHub# File activesupport/lib/active_support/core_ext/module/attr_internal.rb, line 25defattr_internal_naming_format=(format)ifformat.start_with?("@")ActiveSupport.deprecator.warn<<~MESSAGESetting `attr_internal_naming_format` with a `@` prefix is deprecated and will be removed in Rails 8.0.

          You can simply replace #{format.inspect} by #{format.delete_prefix("@").inspect}.MESSAGEformat=format.delete_prefix("@")end@attr_internal_naming_format=formatendInstance Public methodsalias_attribute(new_name, old_name)LinkAllows you to make aliases for attributes, which includes getter, setter, and a predicate.class Content < ActiveRecord::Base
  # has a title attribute
end

class Email < Content
  alias_attribute :subject, :title
end

e = Email.find(1)
e.title    # => "Superstars"
e.subject  # => "Superstars"
e.subject? # => true
e.subject = "Megastars"
e.title    # => "Megastars"Source:show|on GitHub# File activesupport/lib/active_support/core_ext/module/aliasing.rb, line 21defalias_attribute(new_name,old_name)# The following reader methods use an explicit `self` receiver in order to# support aliases that start with an uppercase letter. Otherwise, they would# be resolved as constants instead.module_eval<<-STR,__FILE__,__LINE__+1def #{new_name}; self.#{old_name}; end          # def subject; self.title; end
      def #{new_name}?; self.#{old_name}?; end        # def subject?; self.title?; end
      def #{new_name}=(v); self.#{old_name} = v; end  # def subject=(v); self.title = v; endSTRendanonymous?()LinkA module may or may not have a name.module M; end
M.name # => "M"

m = Module.new
m.name # => nilanonymous?method returns true if module does not have a name, false otherwise:Module.new.anonymous? # => true

module M; end
M.anonymous?          # => falseA module gets a name when it is first assigned to a constant. Either via themoduleorclasskeyword or by an explicit assignment:m = Module.new # creates an anonymous module
m.anonymous?   # => true
M = m          # m gets a name here as a side-effect
m.name         # => "M"
m.anonymous?   # => falseSource:show|on GitHub# File activesupport/lib/active_support/core_ext/module/anonymous.rb, line 27defanonymous?name.nil?endattr_internal(*attrs)LinkAlias for:attr_internal_accessorattr_internal_accessor(*attrs)LinkDeclares an attribute reader and writer backed by an internally-named instance variable.Also aliased as:attr_internalSource:show|on GitHub# File activesupport/lib/active_support/core_ext/module/attr_internal.rb, line 16defattr_internal_accessor(*attrs)attr_internal_reader(*attrs)attr_internal_writer(*attrs)endattr_internal_reader(*attrs)LinkDeclares an attribute reader backed by an internally-named instance variable.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/module/attr_internal.rb, line 5defattr_internal_reader(*attrs)attrs.each{|attr_name|attr_internal_define(attr_name,:reader) }endattr_internal_writer(*attrs)LinkDeclares an attribute writer backed by an internally-named instance variable.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/module/attr_internal.rb, line 10defattr_internal_writer(*attrs)attrs.each{|attr_name|attr_internal_define(attr_name,:writer) }endcattr_accessor(*syms, instance_reader: true, instance_writer: true, instance_accessor: true, default: nil, &blk)LinkAlias for:mattr_accessorcattr_reader(*syms, instance_reader: true, instance_accessor: true, default: nil, location: nil)LinkAlias for:mattr_readercattr_writer(*syms, instance_writer: true, instance_accessor: true, default: nil, location: nil)LinkAlias for:mattr_writerdeep_dup()LinkReturns a copy of module or class if itâs anonymous. If itâs named, returnsself.Object.deep_dup == Object # => true
klass = Class.new
klass.deep_dup == klass # => falseSource:show|on GitHub# File activesupport/lib/active_support/core_ext/object/deep_dup.rb, line 64defdeep_dupifname.nil?superelseselfendenddelegate(*methods, to: nil, prefix: nil, allow_nil: nil, private: nil)LinkProvides adelegateclass method to easily expose contained objectsâ public methods as your own.Options:to- Specifies the target object name as a symbol or string:prefix- Prefixes the new method with the target name or a custom prefix:allow_nil- If set to true, prevents aActiveSupport::DelegationErrorfrom being raised:private- If set to true, changes method visibility to privateThe macro receives one or more method names (specified as symbols or strings) and the name of the target object via the:tooption (also a symbol or string).Delegation is particularly useful with Active Record associations:class Greeter < ActiveRecord::Base
  def hello
    'hello'
  end

  def goodbye
    'goodbye'
  end
end

class Foo < ActiveRecord::Base
  belongs_to :greeter
  delegate :hello, to: :greeter
end

Foo.new.hello   # => "hello"
Foo.new.goodbye # => NoMethodError: undefined method `goodbye' for #<Foo:0x1af30c>Multiple delegates to the same target are allowed:class Foo < ActiveRecord::Base
  belongs_to :greeter
  delegate :hello, :goodbye, to: :greeter
end

Foo.new.goodbye # => "goodbye"Methods can be delegated to instance variables, class variables, or constants by providing them as a symbols:class Foo
  CONSTANT_ARRAY = [0,1,2,3]
  @@class_array  = [4,5,6,7]

  def initialize
    @instance_array = [8,9,10,11]
  end
  delegate :sum, to: :CONSTANT_ARRAY
  delegate :min, to: :@@class_array
  delegate :max, to: :@instance_array
end

Foo.new.sum # => 6
Foo.new.min # => 4
Foo.new.max # => 11Itâs also possible to delegate a method to the class by using:class:class Foo
  def self.hello
    "world"
  end

  delegate :hello, to: :class
end

Foo.new.hello # => "world"Delegates can optionally be prefixed using the:prefixoption. If the value istrue, the delegate methods are prefixed with the name of the object being delegated to.Person = Struct.new(:name, :address)

class Invoice < Struct.new(:client)
  delegate :name, :address, to: :client, prefix: true
end

john_doe = Person.new('John Doe', 'Vimmersvej 13')
invoice = Invoice.new(john_doe)
invoice.client_name    # => "John Doe"
invoice.client_address # => "Vimmersvej 13"It is also possible to supply a custom prefix.class Invoice < Struct.new(:client)
  delegate :name, :address, to: :client, prefix: :customer
end

invoice = Invoice.new(john_doe)
invoice.customer_name    # => 'John Doe'
invoice.customer_address # => 'Vimmersvej 13'The delegated methods are public by default. Passprivate: trueto change that.class User < ActiveRecord::Base
  has_one :profile
  delegate :first_name, to: :profile
  delegate :date_of_birth, to: :profile, private: true

  def age
    Date.today.year - date_of_birth.year
  end
end

User.new.first_name # => "Tomas"
User.new.date_of_birth # => NoMethodError: private method `date_of_birth' called for #<User:0x00000008221340>
User.new.age # => 2If the target isniland does not respond to the delegated method aActiveSupport::DelegationErroris raised. If you wish to instead returnnil, use the:allow_niloption.class User < ActiveRecord::Base
  has_one :profile
  delegate :age, to: :profile
end

User.new.age
# => ActiveSupport::DelegationError: User#age delegated to profile.age, but profile is nilBut if not having a profile yet is fine and should not be an error condition:class User < ActiveRecord::Base
  has_one :profile
  delegate :age, to: :profile, allow_nil: true
end

User.new.age # nilNote that if the target is notnilthen the call is attempted regardless of the:allow_niloption, and thus an exception is still raised if said object does not respond to the method:class Foo
  def initialize(bar)
    @bar = bar
  end

  delegate :name, to: :@bar, allow_nil: true
end

Foo.new("Bar").name # raises NoMethodError: undefined method `name'The target method must be public, otherwise it will raiseNoMethodError.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/module/delegation.rb, line 160defdelegate(*methods,to:nil,prefix:nil,allow_nil:nil,private:nil)::ActiveSupport::Delegation.generate(self,methods,location:caller_locations(1,1).first,to:to,prefix:prefix,allow_nil:allow_nil,private:private,
  )enddelegate_missing_to(target, allow_nil: nil)LinkWhen building decorators, a common pattern may emerge:class Partition
  def initialize(event)
    @event = event
  end

  def person
    detail.person || creator
  end

  private
    def respond_to_missing?(name, include_private = false)
      @event.respond_to?(name, include_private)
    end

    def method_missing(method, *args, &block)
      @event.send(method, *args, &block)
    end
endWithModule#delegate_missing_to, the above is condensed to:class Partition
  delegate_missing_to :@event

  def initialize(event)
    @event = event
  end

  def person
    detail.person || creator
  end
endThe target can be anything callable within the object, e.g. instance variables, methods, constants, etc.The delegated method must be public on the target, otherwise it will raiseActiveSupport::DelegationError. If you wish to instead returnnil, use the:allow_niloption.Themarshal_dumpand_dumpmethods are exempt from delegation due to possible interference when callingMarshal.dump(object), should the delegation target method ofobjectadd or remove instance variables.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/module/delegation.rb, line 218defdelegate_missing_to(target,allow_nil:nil)::ActiveSupport::Delegation.generate_method_missing(self,target,allow_nil:allow_nil,
  )enddeprecate(*method_names, deprecator:, **options)Linkdeprecate :foo, deprecator: MyLib.deprecator
deprecate :foo, bar: "warning!", deprecator: MyLib.deprecatorA deprecator is typically an instance ofActiveSupport::Deprecation, but you can also pass any object that responds todeprecation_warning(deprecated_method_name, message, caller_backtrace)where you can implement your custom warning behavior.class MyLib::Deprecator
  def deprecation_warning(deprecated_method_name, message, caller_backtrace = nil)
    message = "#{deprecated_method_name} is deprecated and will be removed from MyLibrary | #{message}"
    Kernel.warn message
  end
endSource:show|on GitHub# File activesupport/lib/active_support/core_ext/module/deprecation.rb, line 17defdeprecate(*method_names,deprecator:,**options)ifdeprecator.is_a?(ActiveSupport::Deprecation)deprecator.deprecate_methods(self,*method_names,**options)elsifdeprecator# we just need any instance to call deprecate_methods, but the deprecation will be emitted by deprecatorActiveSupport.deprecator.deprecate_methods(self,*method_names,**options,deprecator:deprecator)endendmattr_accessor(*syms, instance_reader: true, instance_writer: true, instance_accessor: true, default: nil, &blk)LinkDefines both class and instance accessors for class attributes. All class and instance methods created will be public, even if this method is called with a private or protected access modifier.module HairColors
  mattr_accessor :hair_colors
end

class Person
  include HairColors
end

HairColors.hair_colors = [:brown, :black, :blonde, :red]
HairColors.hair_colors # => [:brown, :black, :blonde, :red]
Person.new.hair_colors # => [:brown, :black, :blonde, :red]If a subclass changes the value then that would also change the value for parent class. Similarly if parent class changes the value then that would change the value of subclasses too.class Citizen < Person
end

Citizen.new.hair_colors << :blue
Person.new.hair_colors # => [:brown, :black, :blonde, :red, :blue]To omit the instance writer method, passinstance_writer: false. To omit the instance reader method, passinstance_reader: false.module HairColors
  mattr_accessor :hair_colors, instance_writer: false, instance_reader: false
end

class Person
  include HairColors
end

Person.new.hair_colors = [:brown]  # => NoMethodError
Person.new.hair_colors             # => NoMethodErrorOr passinstance_accessor: false, to omit both instance methods.module HairColors
  mattr_accessor :hair_colors, instance_accessor: false
end

class Person
  include HairColors
end

Person.new.hair_colors = [:brown]  # => NoMethodError
Person.new.hair_colors             # => NoMethodErrorYou can set a default value for the attribute.module HairColors
  mattr_accessor :hair_colors, default: [:brown, :black, :blonde, :red]
  mattr_accessor(:hair_styles) { [:long, :short] }
end

class Person
  include HairColors
end

Person.class_variable_get("@@hair_colors") # => [:brown, :black, :blonde, :red]
Person.class_variable_get("@@hair_styles") # => [:long, :short]Also aliased as:cattr_accessorSource:show|on GitHub# File activesupport/lib/active_support/core_ext/module/attribute_accessors.rb, line 208defmattr_accessor(*syms,instance_reader:true,instance_writer:true,instance_accessor:true,default:nil,&blk)location=caller_locations(1,1).firstmattr_reader(*syms,instance_reader:instance_reader,instance_accessor:instance_accessor,default:default,location:location,&blk)mattr_writer(*syms,instance_writer:instance_writer,instance_accessor:instance_accessor,default:default,location:location)endmattr_reader(*syms, instance_reader: true, instance_accessor: true, default: nil, location: nil)LinkDefines a class attribute and creates a class and instance reader methods. The underlying class variable is set tonil, if it is not previously defined. All class and instance methods created will be public, even if this method is called with a private or protected access modifier.module HairColors
  mattr_reader :hair_colors
end

HairColors.hair_colors # => nil
HairColors.class_variable_set("@@hair_colors", [:brown, :black])
HairColors.hair_colors # => [:brown, :black]The attribute name must be a valid method name in Ruby.module Foo
  mattr_reader :"1_Badname"
end
# => NameError: invalid attribute name: 1_BadnameTo omit the instance reader method, passinstance_reader: falseorinstance_accessor: false.module HairColors
  mattr_reader :hair_colors, instance_reader: false
end

class Person
  include HairColors
end

Person.new.hair_colors # => NoMethodErrorYou can set a default value for the attribute.module HairColors
  mattr_reader :hair_colors, default: [:brown, :black, :blonde, :red]
  mattr_reader(:hair_styles) { [:long, :short] }
end

class Person
  include HairColors
end

Person.new.hair_colors # => [:brown, :black, :blonde, :red]
Person.new.hair_styles # => [:long, :short]Also aliased as:cattr_readerSource:show|on GitHub# File activesupport/lib/active_support/core_ext/module/attribute_accessors.rb, line 55defmattr_reader(*syms,instance_reader:true,instance_accessor:true,default:nil,location:nil)raiseTypeError,"module attributes should be defined directly on class, not singleton"ifsingleton_class?location||=caller_locations(1,1).firstdefinition= []syms.eachdo|sym|raiseNameError.new("invalid attribute name: #{sym}")unless/\A[_A-Za-z]\w*\z/.match?(sym)definition<<"def self.#{sym}; @@#{sym}; end"ifinstance_reader&&instance_accessordefinition<<"def #{sym}; @@#{sym}; end"endsym_default_value= (block_given?&&default.nil?)?yield:defaultclass_variable_set("@@#{sym}",sym_default_value)unlesssym_default_value.nil?&&class_variable_defined?("@@#{sym}")endmodule_eval(definition.join(";"),location.path,location.lineno)endmattr_writer(*syms, instance_writer: true, instance_accessor: true, default: nil, location: nil)LinkDefines a class attribute and creates a class and instance writer methods to allow assignment to the attribute. All class and instance methods created will be public, even if this method is called with a private or protected access modifier.module HairColors
  mattr_writer :hair_colors
end

class Person
  include HairColors
end

HairColors.hair_colors = [:brown, :black]
Person.class_variable_get("@@hair_colors") # => [:brown, :black]
Person.new.hair_colors = [:blonde, :red]
HairColors.class_variable_get("@@hair_colors") # => [:blonde, :red]To omit the instance writer method, passinstance_writer: falseorinstance_accessor: false.module HairColors
  mattr_writer :hair_colors, instance_writer: false
end

class Person
  include HairColors
end

Person.new.hair_colors = [:blonde, :red] # => NoMethodErrorYou can set a default value for the attribute.module HairColors
  mattr_writer :hair_colors, default: [:brown, :black, :blonde, :red]
  mattr_writer(:hair_styles) { [:long, :short] }
end

class Person
  include HairColors
end

Person.class_variable_get("@@hair_colors") # => [:brown, :black, :blonde, :red]
Person.class_variable_get("@@hair_styles") # => [:long, :short]Also aliased as:cattr_writerSource:show|on GitHub# File activesupport/lib/active_support/core_ext/module/attribute_accessors.rb, line 121defmattr_writer(*syms,instance_writer:true,instance_accessor:true,default:nil,location:nil)raiseTypeError,"module attributes should be defined directly on class, not singleton"ifsingleton_class?location||=caller_locations(1,1).firstdefinition= []syms.eachdo|sym|raiseNameError.new("invalid attribute name: #{sym}")unless/\A[_A-Za-z]\w*\z/.match?(sym)definition<<"def self.#{sym}=(val); @@#{sym} = val; end"ifinstance_writer&&instance_accessordefinition<<"def #{sym}=(val); @@#{sym} = val; end"endsym_default_value= (block_given?&&default.nil?)?yield:defaultclass_variable_set("@@#{sym}",sym_default_value)unlesssym_default_value.nil?&&class_variable_defined?("@@#{sym}")endmodule_eval(definition.join(";"),location.path,location.lineno)endmodule_parent()LinkReturns the module which contains this one according to its name.module M
  module N
  end
end
X = M::N

M::N.module_parent # => M
X.module_parent    # => MThe parent of top-level and anonymous modules isObject.M.module_parent          # => Object
Module.new.module_parent # => ObjectSource:show|on GitHub# File activesupport/lib/active_support/core_ext/module/introspection.rb, line 34defmodule_parentmodule_parent_name?ActiveSupport::Inflector.constantize(module_parent_name):Objectendmodule_parent_name()LinkReturns the name of the module containing this one.M::N.module_parent_name # => "M"Source:show|on GitHub# File activesupport/lib/active_support/core_ext/module/introspection.rb, line 9defmodule_parent_nameifdefined?(@parent_name)@parent_nameelseparent_name=name=~/::[^:]+\z/?-$`:nil@parent_name=parent_nameunlessfrozen?parent_nameendendmodule_parents()LinkReturns all the parents of this module according to its name, ordered from nested outwards. The receiver is not contained within the result.module M
  module N
  end
end
X = M::N

M.module_parents    # => [Object]
M::N.module_parents # => [M, Object]
X.module_parents    # => [M, Object]Source:show|on GitHub# File activesupport/lib/active_support/core_ext/module/introspection.rb, line 50defmodule_parentsparents= []ifmodule_parent_nameparts=module_parent_name.split("::")untilparts.empty?parents<<ActiveSupport::Inflector.constantize(parts*"::")parts.popendendparents<<Objectunlessparents.include?Objectparentsendredefine_method(method, &block)LinkReplaces the existing method definition, if there is one, with the passed block as its body.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/module/redefine_method.rb, line 17defredefine_method(method,&block)visibility=method_visibility(method)silence_redefinition_of_method(method)define_method(method,&block)send(visibility,method)endredefine_singleton_method(method, &block)LinkReplaces the existing singleton method definition, if there is one, with the passed block as its body.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/module/redefine_method.rb, line 26defredefine_singleton_method(method,&block)singleton_class.redefine_method(method,&block)endremove_possible_method(method)LinkRemoves the named method, if it exists.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/module/remove_method.rb, line 7defremove_possible_method(method)ifmethod_defined?(method)||private_method_defined?(method)undef_method(method)endendremove_possible_singleton_method(method)LinkRemoves the named singleton method, if it exists.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/module/remove_method.rb, line 14defremove_possible_singleton_method(method)singleton_class.remove_possible_method(method)endsilence_redefinition_of_method(method)LinkMarks the named method as intended to be redefined, if it exists. Suppresses the Ruby method redefinition warning. Preferredefine_methodwhere possible.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/module/redefine_method.rb, line 7defsilence_redefinition_of_method(method)ifmethod_defined?(method)||private_method_defined?(method)# This suppresses the "method redefined" warning; the self-alias# looks odd, but means we don't need to generate a unique namealias_methodmethod,methodendendthread_cattr_accessor(*syms, instance_reader: true, instance_writer: true, instance_accessor: true, default: nil)LinkAlias for:thread_mattr_accessorthread_mattr_accessor(*syms, instance_reader: true, instance_writer: true, instance_accessor: true, default: nil)LinkDefines both class and instance accessors for class attributes.class Account
  thread_mattr_accessor :user
end

Account.user = "DHH"
Account.user     # => "DHH"
Account.new.user # => "DHH"Unlikemattr_accessor, values arenotshared with subclasses or parent classes. If a subclass changes the value, the parent classâ value is not changed. If the parent class changes the value, the value of subclasses is not changed.class Customer < Account
end

Account.user   # => "DHH"
Customer.user  # => nil
Customer.user  = "Rafael"
Customer.user  # => "Rafael"
Account.user   # => "DHH"To omit the instance writer method, passinstance_writer: false. To omit the instance reader method, passinstance_reader: false.class Current
  thread_mattr_accessor :user, instance_writer: false, instance_reader: false
end

Current.new.user = "DHH"  # => NoMethodError
Current.new.user          # => NoMethodErrorOr passinstance_accessor: false, to omit both instance methods.class Current
  thread_mattr_accessor :user, instance_accessor: false
end

Current.new.user = "DHH"  # => NoMethodError
Current.new.user          # => NoMethodErrorA default value may be specified using the:defaultoption. Because multiple threads can access the default value, non-frozen default values will beduped and frozen.Also aliased as:thread_cattr_accessorSource:show|on GitHub# File activesupport/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb, line 170defthread_mattr_accessor(*syms,instance_reader:true,instance_writer:true,instance_accessor:true,default:nil)thread_mattr_reader(*syms,instance_reader:instance_reader,instance_accessor:instance_accessor,default:default)thread_mattr_writer(*syms,instance_writer:instance_writer,instance_accessor:instance_accessor)end