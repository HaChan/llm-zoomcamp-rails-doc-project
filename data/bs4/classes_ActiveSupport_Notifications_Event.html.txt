MethodsAallocationsCcpu_timeDdurationEendFfinish!Ggc_timeIidle_timeNnewSstart!TtimeAttributes[R]name[RW]payload[R]transaction_idClass Public methodsnew(name, start, ending, transaction_id, payload)LinkSource:show|on GitHub# File activesupport/lib/active_support/notifications/instrumenter.rb, line 110definitialize(name,start,ending,transaction_id,payload)@name=name@payload=payload.dup@time=start?start.to_f*1_000.0:start@transaction_id=transaction_id@end=ending?ending.to_f*1_000.0:ending@cpu_time_start=0.0@cpu_time_finish=0.0@allocation_count_start=0@allocation_count_finish=0@gc_time_start=0@gc_time_finish=0endInstance Public methodsallocations()LinkReturns the number of allocations made between the call tostart!and the call tofinish!.Source:show|on GitHub# File activesupport/lib/active_support/notifications/instrumenter.rb, line 176defallocations@allocation_count_finish-@allocation_count_startendcpu_time()LinkReturns the CPU time (in milliseconds) passed between the call tostart!and the call tofinish!.Source:show|on GitHub# File activesupport/lib/active_support/notifications/instrumenter.rb, line 163defcpu_time@cpu_time_finish-@cpu_time_startendduration()LinkReturns the difference in milliseconds between when the execution of the event started and when it ended.ActiveSupport::Notifications.subscribe('wait') do |event|
  @event = event
end

ActiveSupport::Notifications.instrument('wait') do
  sleep 1
end

@event.duration # => 1000.138Source:show|on GitHub# File activesupport/lib/active_support/notifications/instrumenter.rb, line 198defduration@end-@timeendend()LinkSource:show|on GitHub# File activesupport/lib/active_support/notifications/instrumenter.rb, line 128defend@end/1000.0if@endendfinish!()LinkRecord information at the time this event finishesSource:show|on GitHub# File activesupport/lib/active_support/notifications/instrumenter.rb, line 154deffinish!@cpu_time_finish=now_cpu@gc_time_finish=now_gc@end=now@allocation_count_finish=now_allocationsendgc_time()LinkReturns the time spent in GC (in milliseconds) between the call tostart!and the call tofinish!Source:show|on GitHub# File activesupport/lib/active_support/notifications/instrumenter.rb, line 182defgc_time(@gc_time_finish-@gc_time_start)/1_000_000.0endidle_time()LinkReturns the idle time time (in milliseconds) passed between the call tostart!and the call tofinish!.Source:show|on GitHub# File activesupport/lib/active_support/notifications/instrumenter.rb, line 169defidle_timediff=duration-cpu_timediff>0.0?diff:0.0endstart!()LinkRecord information at the time this event startsSource:show|on GitHub# File activesupport/lib/active_support/notifications/instrumenter.rb, line 146defstart!@time=now@cpu_time_start=now_cpu@gc_time_start=now_gc@allocation_count_start=now_allocationsendtime()LinkSource:show|on GitHub# File activesupport/lib/active_support/notifications/instrumenter.rb, line 124deftime@time/1000.0if@timeend