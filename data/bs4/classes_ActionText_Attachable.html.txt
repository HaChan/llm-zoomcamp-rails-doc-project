Action TextAttachableInclude this module to make a record attachable to anActionText::Content.class Person < ApplicationRecord
  include ActionText::Attachable
end

person = Person.create! name: "Javan"
html = %Q(<action-text-attachment sgid="#{person.attachable_sgid}"></action-text-attachment>)
content = ActionText::Content.new(html)
content.attachables # => [person]MethodsAattachable_content_type,attachable_filename,attachable_filesize,attachable_metadata,attachable_sgidFfrom_attachable_sgid,from_attachable_sgid,from_nodePpreviewable_attachable?Tto_attachable_partial_path,to_missing_attachable_partial_path,to_rich_text_attributes,to_trix_content_attachment_partial_pathConstantsLOCATOR_NAME="attachable"Class Public methodsfrom_attachable_sgid(sgid, options = {})LinkSource:show|on GitHub# File actiontext/lib/action_text/attachable.rb, line 43deffrom_attachable_sgid(sgid,options= {})method=sgid.is_a?(Array)?:locate_many_signed::locate_signedrecord=GlobalID::Locator.public_send(method,sgid,options.merge(for:LOCATOR_NAME))record||raise(ActiveRecord::RecordNotFound)endfrom_node(node)LinkExtracts theActionText::Attachablefrom the attachment HTML node:person = Person.create! name: "Javan"
html = %Q(<action-text-attachment sgid="#{person.attachable_sgid}"></action-text-attachment>)
fragment = ActionText::Fragment.wrap(html)
attachment_node = fragment.find_all(ActionText::Attachment.tag_name).first
ActionText::Attachable.from_node(attachment_node) # => personSource:show|on GitHub# File actiontext/lib/action_text/attachable.rb, line 31deffrom_node(node)ifattachable=attachable_from_sgid(node["sgid"])attachableelsifattachable=ActionText::Attachables::ContentAttachment.from_node(node)attachableelsifattachable=ActionText::Attachables::RemoteImage.from_node(node)attachableelseActionText::Attachables::MissingAttachable.new(node["sgid"])endendInstance Public methodsattachable_content_type()LinkSource:show|on GitHub# File actiontext/lib/action_text/attachable.rb, line 83defattachable_content_typetry(:content_type)||"application/octet-stream"endattachable_filename()LinkSource:show|on GitHub# File actiontext/lib/action_text/attachable.rb, line 87defattachable_filenamefilename.to_sifrespond_to?(:filename)endattachable_filesize()LinkSource:show|on GitHub# File actiontext/lib/action_text/attachable.rb, line 91defattachable_filesizetry(:byte_size)||try(:filesize)endattachable_metadata()LinkSource:show|on GitHub# File actiontext/lib/action_text/attachable.rb, line 95defattachable_metadatatry(:metadata)||{}endattachable_sgid()LinkReturns the Signed Global ID for the attachable. The purpose of the ID is set to âattachableâ so it canât be reused for other purposes.Source:show|on GitHub# File actiontext/lib/action_text/attachable.rb, line 79defattachable_sgidto_sgid(expires_in:nil,for:LOCATOR_NAME).to_sendfrom_attachable_sgid(sgid)LinkSource:show|on GitHub# File actiontext/lib/action_text/attachable.rb, line 58deffrom_attachable_sgid(sgid)ActionText::Attachable.from_attachable_sgid(sgid,only:self)endpreviewable_attachable?()LinkSource:show|on GitHub# File actiontext/lib/action_text/attachable.rb, line 99defpreviewable_attachable?falseendto_attachable_partial_path()LinkReturns the path to the partial that is used for rendering the attachable. Defaults toto_partial_path.Override to render a different partial:class User < ApplicationRecord
  def to_attachable_partial_path
    "users/attachable"
  end
endSource:show|on GitHub# File actiontext/lib/action_text/attachable.rb, line 127defto_attachable_partial_pathto_partial_pathendto_missing_attachable_partial_path()LinkReturns the path to the partial that is used for rendering missing attachables. Defaults to âaction_text/attachables/missing_attachableâ.Override to render a different partial:class User < ApplicationRecord
  def self.to_missing_attachable_partial_path
    "users/missing_attachable"
  end
endSource:show|on GitHub# File actiontext/lib/action_text/attachable.rb, line 72defto_missing_attachable_partial_pathActionText::Attachables::MissingAttachable::DEFAULT_PARTIAL_PATHendto_rich_text_attributes(attributes = {})LinkSource:show|on GitHub# File actiontext/lib/action_text/attachable.rb, line 131defto_rich_text_attributes(attributes= {})attributes.dup.tapdo|attrs|attrs[:sgid] =attachable_sgidattrs[:content_type] =attachable_content_typeattrs[:previewable] =trueifpreviewable_attachable?attrs[:filename] =attachable_filenameattrs[:filesize] =attachable_filesizeattrs[:width] =attachable_metadata[:width]attrs[:height] =attachable_metadata[:height]end.compactendto_trix_content_attachment_partial_path()LinkReturns the path to the partial that is used for rendering the attachable in Trix. Defaults toto_partial_path.Override to render a different partial:class User < ApplicationRecord
  def to_trix_content_attachment_partial_path
    "users/trix_content_attachment"
  end
endSource:show|on GitHub# File actiontext/lib/action_text/attachable.rb, line 113defto_trix_content_attachment_partial_pathto_partial_pathend