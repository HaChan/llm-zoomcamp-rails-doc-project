MethodsGgenerate_unique_secure_tokenHhas_secure_tokenInstance Public methodsgenerate_unique_secure_token(length: MINIMUM_TOKEN_LENGTH)LinkSource:show|on GitHub# File activerecord/lib/active_record/secure_token.rb, line 61defgenerate_unique_secure_token(length:MINIMUM_TOKEN_LENGTH)SecureRandom.base58(length)endhas_secure_token(attribute = :token, length: MINIMUM_TOKEN_LENGTH, on: ActiveRecord.generate_secure_token_on)LinkExample usinghas_secure_token# Schema: User(token:string, auth_token:string)
class User < ActiveRecord::Base
  has_secure_token
  has_secure_token :auth_token, length: 36
end

user = User.new
user.save
user.token # => "pX27zsMN2ViQKta1bGfLmVJE"
user.auth_token # => "tU9bLuZseefXQ4yQxQo8wjtBvsAfPc78os6R"
user.regenerate_token # => true
user.regenerate_auth_token # => trueSecureRandom::base58is used to generate at minimum a 24-character unique token, so collisions are highly unlikely.Note that itâs still possible to generate a race condition in the database in the same way thatvalidates_uniqueness_ofcan. Youâre encouraged to add a unique index in the database to deal with this even more unlikely scenario.Options:lengthLength of the Secure Random, with a minimum of 24 characters. It will default to 24.:onThe callback when the value is generated. When called withon: :initialize, the value is generated in anafter_initializecallback, otherwise the value will be used in abefore_callback. When not specified,:onwill use the value ofconfig.active_record.generate_secure_token_on, which defaults to:initializestarting in Rails 7.1.Source:show|on GitHub# File activerecord/lib/active_record/secure_token.rb, line 46defhas_secure_token(attribute=:token,length:MINIMUM_TOKEN_LENGTH,on:ActiveRecord.generate_secure_token_on)iflength<MINIMUM_TOKEN_LENGTHraiseMinimumLengthError,"Token requires a minimum length of #{MINIMUM_TOKEN_LENGTH} characters."end# Load securerandom only when has_secure_token is used.require"active_support/core_ext/securerandom"define_method("regenerate_#{attribute}") {update!attribute=>self.class.generate_unique_secure_token(length:length) }set_callbackon,on==:initialize?:after::beforedoifnew_record?&&!query_attribute(attribute)send("#{attribute}=",self.class.generate_unique_secure_token(length:length))endendend