MethodsAattachDdetachNnewPpostSstopTtimerWwrites_pendingClass Public methodsnew()LinkSource:show|on GitHub# File actioncable/lib/action_cable/connection/stream_event_loop.rb, line 10definitialize@nio=@executor=@thread=nil@map= {}@stopping=false@todo=Queue.new@spawn_mutex=Mutex.newendInstance Public methodsattach(io, stream)LinkSource:show|on GitHub# File actioncable/lib/action_cable/connection/stream_event_loop.rb, line 30defattach(io,stream)@todo<<lambdado@map[io] =@nio.register(io,:r)@map[io].value=streamendwakeupenddetach(io, stream)LinkSource:show|on GitHub# File actioncable/lib/action_cable/connection/stream_event_loop.rb, line 38defdetach(io,stream)@todo<<lambdado@nio.deregisterio@map.deleteioio.closeendwakeupendpost(task = nil, &block)LinkSource:show|on GitHub# File actioncable/lib/action_cable/connection/stream_event_loop.rb, line 23defpost(task=nil,&block)task||=blockspawn@executor<<taskendstop()LinkSource:show|on GitHub# File actioncable/lib/action_cable/connection/stream_event_loop.rb, line 56defstop@stopping=truewakeupif@nioendtimer(interval, &block)LinkSource:show|on GitHub# File actioncable/lib/action_cable/connection/stream_event_loop.rb, line 19deftimer(interval,&block)Concurrent::TimerTask.new(execution_interval:interval,&block).tap(&:execute)endwrites_pending(io)LinkSource:show|on GitHub# File actioncable/lib/action_cable/connection/stream_event_loop.rb, line 47defwrites_pending(io)@todo<<lambdadoifmonitor=@map[io]monitor.interests=:rwendendwakeupend