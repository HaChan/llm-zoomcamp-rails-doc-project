WhereChainobjects act as placeholder for queries in whichwheredoes not have any parameter. In this case,wherecan be chained to return a new relation.MethodsAassociatedMmissingNnotInstance Public methodsassociated(*associations)LinkReturns a new relation with joins and where clause to identify associated relations.For example, posts that are associated to a related author:Post.where.associated(:author)
# SELECT "posts".* FROM "posts"
# INNER JOIN "authors" ON "authors"."id" = "posts"."author_id"
# WHERE "authors"."id" IS NOT NULLAdditionally, multiple relations can be combined. This will return posts associated to both an author and any comments:Post.where.associated(:author, :comments)
# SELECT "posts".* FROM "posts"
# INNER JOIN "authors" ON "authors"."id" = "posts"."author_id"
# INNER JOIN "comments" ON "comments"."post_id" = "posts"."id"
# WHERE "authors"."id" IS NOT NULL AND "comments"."id" IS NOT NULLYou can define join type in the scope andassociatedwill not use âJOIN` by default.Post.left_joins(:author).where.associated(:author)
 # SELECT "posts".* FROM "posts"
 # LEFT OUTER JOIN "authors" "authors"."id" = "posts"."author_id"
 # WHERE "authors"."id" IS NOT NULL

 Post.left_joins(:comments).where.associated(:author)
 # SELECT "posts".* FROM "posts"
 # INNER JOIN "authors" ON "authors"."id" = "posts"."author_id"
 # LEFT OUTER JOIN "comments" ON "comments"."post_id" = "posts"."id"
#  WHERE "author"."id" IS NOT NULLSource:show|on GitHub# File activerecord/lib/active_record/relation/query_methods.rb, line 88defassociated(*associations)associations.eachdo|association|reflection=scope_association_reflection(association)unless@scope.joins_values.include?(reflection.name)||@scope.left_outer_joins_values.include?(reflection.name)@scope.joins!(association)endifreflection.options[:class_name]self.not(association=>{reflection.association_primary_key=>nil})elseself.not(reflection.table_name=>{reflection.association_primary_key=>nil})endend@scopeendmissing(*associations)LinkReturns a new relation with left outer joins and where clause to identify missing relations.For example, posts that are missing a related author:Post.where.missing(:author)
# SELECT "posts".* FROM "posts"
# LEFT OUTER JOIN "authors" ON "authors"."id" = "posts"."author_id"
# WHERE "authors"."id" IS NULLAdditionally, multiple relations can be combined. This will return posts that are missing both an author and any comments:Post.where.missing(:author, :comments)
# SELECT "posts".* FROM "posts"
# LEFT OUTER JOIN "authors" ON "authors"."id" = "posts"."author_id"
# LEFT OUTER JOIN "comments" ON "comments"."post_id" = "posts"."id"
# WHERE "authors"."id" IS NULL AND "comments"."id" IS NULLSource:show|on GitHub# File activerecord/lib/active_record/relation/query_methods.rb, line 123defmissing(*associations)associations.eachdo|association|reflection=scope_association_reflection(association)@scope.left_outer_joins!(association)ifreflection.options[:class_name]@scope.where!(association=>{reflection.association_primary_key=>nil})else@scope.where!(reflection.table_name=>{reflection.association_primary_key=>nil})endend@scopeendnot(opts, *rest)LinkReturns a new relation expressing WHERE + NOT condition according to the conditions in the arguments.notaccepts conditions as a string, array, or hash. SeeQueryMethods#wherefor more details on each format.User.where.not("name = 'Jon'")
# SELECT * FROM users WHERE NOT (name = 'Jon')

User.where.not(["name = ?", "Jon"])
# SELECT * FROM users WHERE NOT (name = 'Jon')

User.where.not(name: "Jon")
# SELECT * FROM users WHERE name != 'Jon'

User.where.not(name: nil)
# SELECT * FROM users WHERE name IS NOT NULL

User.where.not(name: %w(Ko1 Nobu))
# SELECT * FROM users WHERE name NOT IN ('Ko1', 'Nobu')

User.where.not(name: "Jon", role: "admin")
# SELECT * FROM users WHERE NOT (name = 'Jon' AND role = 'admin')If there is a non-nil condition on a nullable column in the hash condition, the records that have nil values on the nullable column wonât be returned.User.create!(nullable_country: nil)
User.where.not(nullable_country: "UK")
# SELECT * FROM users WHERE NOT (nullable_country = 'UK')
# => []Source:show|on GitHub# File activerecord/lib/active_record/relation/query_methods.rb, line 49defnot(opts,*rest)where_clause=@scope.send(:build_where_clause,opts,rest)@scope.where_clause+=where_clause.invert@scopeend