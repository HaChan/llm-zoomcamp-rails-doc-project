Rails::Engineallows you to wrap a specific Rails application or subset of functionality and share it with other applications or within a larger packaged application. EveryRails::Applicationis just an engine, which allows for simple feature and application sharing.AnyRails::Engineis also aRails::Railtie, so the same methods (likerake_tasksandgenerators) and configuration options that are available in railties can also be used in engines.Creating anEngineIf you want a gem to behave as an engine, you have to specify anEnginefor it somewhere inside your pluginâslibfolder (similar to how we specify aRailtie):# lib/my_engine.rb
module MyEngine
  class Engine < Rails::Engine
  end
endThen ensure that this file is loaded at the top of yourconfig/application.rb(or in yourGemfile), and it will automatically load models, controllers, and helpers insideapp, load routes atconfig/routes.rb, load locales atconfig/locales/*/, and load tasks atlib/tasks/*/.ConfigurationLike railties, engines can access a config object which contains configuration shared by all railties and the application. Additionally, each engine can accessautoload_paths,eager_load_pathsandautoload_once_pathssettings which are scoped to that engine.class MyEngine < Rails::Engine
  # Add a load path for this specific Engine
  config.autoload_paths << File.expand_path("lib/some/path", __dir__)

  initializer "my_engine.add_middleware" do |app|
    app.middleware.use MyEngine::Middleware
  end
endGeneratorsYou can set up generators for engines withconfig.generatorsmethod:class MyEngine < Rails::Engine
  config.generators do |g|
    g.orm             :active_record
    g.template_engine :erb
    g.test_framework  :test_unit
  end
endYou can also set generators for an application by usingconfig.app_generators:class MyEngine < Rails::Engine
  # note that you can also pass block to app_generators in the same way you
  # can pass it to generators method
  config.app_generators.orm :datamapper
endPathsApplications and engines have flexible path configuration, meaning that you are not required to place your controllers atapp/controllers, but in any place which you find convenient.For example, letâs suppose you want to place your controllers inlib/controllers. You can set that as an option:class MyEngine < Rails::Engine
  paths["app/controllers"] = "lib/controllers"
endYou can also have your controllers loaded from bothapp/controllersandlib/controllers:class MyEngine < Rails::Engine
  paths["app/controllers"] << "lib/controllers"
endThe available paths in an engine are:class MyEngine < Rails::Engine
  paths["app"]                 # => ["app"]
  paths["app/controllers"]     # => ["app/controllers"]
  paths["app/helpers"]         # => ["app/helpers"]
  paths["app/models"]          # => ["app/models"]
  paths["app/views"]           # => ["app/views"]
  paths["lib"]                 # => ["lib"]
  paths["lib/tasks"]           # => ["lib/tasks"]
  paths["config"]              # => ["config"]
  paths["config/initializers"] # => ["config/initializers"]
  paths["config/locales"]      # => ["config/locales"]
  paths["config/routes.rb"]    # => ["config/routes.rb"]
endTheApplicationclass adds a couple more paths to this set. And as in yourApplication, all folders underappare automatically added to the load path. If you have anapp/servicesfolder for example, it will be added by default.EndpointAn engine can also be aRackapplication. It can be useful if you have aRackapplication that you would like to provide with some of theEngineâs features.To do that, use the::endpointmethod:module MyEngine
  class Engine < Rails::Engine
    endpoint MyRackApplication
  end
endNow you can mount your engine in applicationâs routes:Rails.application.routes.draw do
  mount MyEngine::Engine => "/engine"
endMiddleware stackAs an engine can now be aRackendpoint, it can also have a middleware stack. The usage is exactly the same as inApplication:module MyEngine
  class Engine < Rails::Engine
    middleware.use SomeMiddleware
  end
endRoutesIf you donât specify an endpoint, routes will be used as the default endpoint. You can use them just like you use an applicationâs routes:# ENGINE/config/routes.rb
MyEngine::Engine.routes.draw do
  get "/" => "posts#index"
endMount priorityNote that now there can be more than one router in your application, and itâs better to avoid passing requests through many routers. Consider this situation:Rails.application.routes.draw do
  mount MyEngine::Engine => "/blog"
  get "/blog/omg" => "main#omg"
endMyEngineis mounted at/blog, and/blog/omgpoints to applicationâs controller. In such a situation, requests to/blog/omgwill go throughMyEngine, and if there is no such route inEngineâs routes, it will be dispatched tomain#omg. Itâs much better to swap that:Rails.application.routes.draw do
  get "/blog/omg" => "main#omg"
  mount MyEngine::Engine => "/blog"
endNow,Enginewill get only requests that were not handled byApplication.EnginenameThere are some places where an Engineâs name is used:routes: when you mount anEnginewithmount(MyEngine::Engine => '/my_engine'), itâs used as default:asoptionrake task for installing migrationsmy_engine:install:migrationsEnginename is set by default based on class name. ForMyEngine::Engineit will bemy_engine_engine. You can change it manually using theengine_namemethod:module MyEngine
  class Engine < Rails::Engine
    engine_name "my_engine"
  end
endIsolatedEngineNormally when you create controllers, helpers, and models inside an engine, they are treated as if they were created inside the application itself. This means that all helpers and named routes from the application will be available to your engineâs controllers as well.However, sometimes you want to isolate your engine from the application, especially if your engine has its own router. To do that, you simply need to call::isolate_namespace. This method requires you to pass a module where all your controllers, helpers, and models should be nested to:module MyEngine
  class Engine < Rails::Engine
    isolate_namespace MyEngine
  end
endWith such an engine, everything that is inside theMyEnginemodule will be isolated from the application.Consider this controller:module MyEngine
  class FooController < ActionController::Base
  end
endIf theMyEngineengine is marked as isolated,FooControlleronly has access to helpers fromMyEngine, andurl_helpersfromMyEngine::Engine.routes.The next thing that changes in isolated engines is the behavior of routes. Normally, when you namespace your controllers, you also need to namespace the related routes. With an isolated engine, the engineâs namespace is automatically applied, so you donât need to specify it explicitly in your routes:MyEngine::Engine.routes.draw do
  resources :articles
endIfMyEngineis isolated, the routes above will point toMyEngine::ArticlesController. You also donât need to use longer URL helpers likemy_engine_articles_path. Instead, you should simply usearticles_path, like you would do with your main application.To make this behavior consistent with other parts of the framework, isolated engines also have an effect onActiveModel::Naming. In a normal Rails app, when you use a namespaced model such asNamespace::Article,ActiveModel::Namingwill generate names with the prefix ânamespaceâ. In an isolated engine, the prefix will be omitted in URL helpers and form fields, for convenience.polymorphic_url(MyEngine::Article.new)
# => "articles_path" # not "my_engine_articles_path"

form_for(MyEngine::Article.new) do
  text_field :title # => <input type="text" name="article[title]" id="article_title" />
endAdditionally, an isolated engine will set its own name according to its namespace, soMyEngine::Engine.engine_namewill return âmy_engineâ. It will also setMyEngine.table_name_prefixto âmy_engine_â, meaning for example thatMyEngine::Articlewill use themy_engine_articlesdatabase table by default.Using Engineâs routes outsideEngineSince you can now mount an engine inside applicationâs routes, you do not have direct access toEngineâsurl_helpersinsideApplication. When you mount an engine in an applicationâs routes, a special helper is created to allow you to do that. Consider such a scenario:# config/routes.rb
Rails.application.routes.draw do
  mount MyEngine::Engine => "/my_engine", as: "my_engine"
  get "/foo" => "foo#index"
endNow, you can use themy_enginehelper inside your application:class FooController < ApplicationController
  def index
    my_engine.root_url # => /my_engine/
  end
endThere is also amain_apphelper that gives you access to applicationâs routes inside Engine:module MyEngine
  class BarController
    def index
      main_app.foo_path # => /foo
    end
  end
endNote that the:asoption given to mount takes theengine_nameas default, so most of the time you can simply omit it.Finally, if you want to generate a URL to an engineâs route usingpolymorphic_url, you also need to pass the engine helper. Letâs say that you want to create a form pointing to one of the engineâs routes. All you need to do is pass the helper as the first element in array with attributes for URL:form_for([my_engine, @user])This code will usemy_engine.user_path(@user)to generate the proper route.Isolated engineâs helpersSometimes you may want to isolate an engine, but use helpers that are defined for it. If you want to share just a few specific helpers you can add them to applicationâs helpers in ApplicationController:class ApplicationController < ActionController::Base
  helper MyEngine::SharedEngineHelper
endIf you want to include all of the engineâs helpers, you can use the helper method on an engineâs instance:class ApplicationController < ActionController::Base
  helper MyEngine::Engine.helpers
endIt will include all of the helpers from engineâs directory. Take into account this does not include helpers defined in controllers with helper_method or other similar solutions, only helpers defined in the helpers directory will be included.Migrations & seed dataEngines can have their own migrations. The default path for migrations is exactly the same as in application:db/migrateTo use engineâs migrations in application you can use the rake task below, which copies them to applicationâs dir:$ rake ENGINE_NAME:install:migrationsNote that some of the migrations may be skipped if a migration with the same name already exists in application. In such a situation you must decide whether to leave that migration or rename the migration in the application and rerun copying migrations.If your engine has migrations, you may also want to prepare data for the database in thedb/seeds.rbfile. You can load that data using theload_seedmethod, e.g.MyEngine::Engine.load_seedLoading priorityIn order to change engineâs priority you can useconfig.railties_orderin the main application. It will affect the priority of loading views, helpers, assets, and all the other files related to engine or application.# load Blog::Engine with highest priority, followed by application and other railties
config.railties_order = [Blog::Engine, :main_app, :all]NamespaceCLASSRails::Engine::ConfigurationCLASSRails::Engine::RailtiesCLASSRails::Engine::UpdaterMethodsAappCcall,configEeager_load!,endpoint,endpoint,env_configFfind,find_rootHhelpers,helpers_pathsIinherited,isolate_namespaceLload_config_initializer,load_console,load_generators,load_runner,load_seed,load_server,load_tasksNnewRrailties,routesIncluded ModulesActiveSupport::CallbacksAttributes[RW]called_from[RW]isolated[RW]isolated?Class Public methodsendpoint(endpoint = nil)LinkSource:show|on GitHub# File railties/lib/rails/engine.rb, line 379defendpoint(endpoint=nil)@endpoint||=nil@endpoint=endpointifendpoint@endpointendfind(path)LinkFinds engine with given path.Source:show|on GitHub# File railties/lib/rails/engine.rb, line 423deffind(path)expanded_path=File.expand_pathpathRails::Engine.subclasses.eachdo|klass|engine=klass.instancereturnengineifFile.expand_path(engine.root)==expanded_pathendnilendfind_root(from)LinkSource:show|on GitHub# File railties/lib/rails/engine.rb, line 375deffind_root(from)find_root_with_flag"lib",fromendinherited(base)LinkSource:show|on GitHub# File railties/lib/rails/engine.rb, line 361definherited(base)unlessbase.abstract_railtie?Rails::Railtie::Configuration.eager_load_namespaces<<basebase.called_from=begincall_stack=caller_locations.map{|l|l.absolute_path||l.path}File.dirname(call_stack.detect{|p|!p.match?(%r[railties[\w.-]*/lib/rails|rack[\w.-]*/lib/rack]) })endendsuperendisolate_namespace(mod)LinkSource:show|on GitHub# File railties/lib/rails/engine.rb, line 385defisolate_namespace(mod)engine_name(generate_railtie_name(mod.name))routes.default_scope= {module:ActiveSupport::Inflector.underscore(mod.name) }self.isolated=trueunlessmod.respond_to?(:railtie_namespace)name,railtie=engine_name,selfmod.singleton_class.instance_evaldodefine_method(:railtie_namespace) {railtie}unlessmod.respond_to?(:table_name_prefix)define_method(:table_name_prefix) {"#{name}_"}ActiveSupport.on_load(:active_record)domod.singleton_class.redefine_method(:table_name_prefix)do"#{ActiveRecord::Base.table_name_prefix}#{name}_"endendendunlessmod.respond_to?(:use_relative_model_naming?)class_eval"def use_relative_model_naming?; true; end",__FILE__,__LINE__endunlessmod.respond_to?(:railtie_helpers_paths)define_method(:railtie_helpers_paths) {railtie.helpers_paths}endunlessmod.respond_to?(:railtie_routes_url_helpers)define_method(:railtie_routes_url_helpers) {|include_path_helpers=true|railtie.routes.url_helpers(include_path_helpers) }endendendendnew()LinkSource:show|on GitHub# File railties/lib/rails/engine.rb, line 439definitialize@_all_autoload_paths=nil@_all_load_paths=nil@app=nil@config=nil@env_config=nil@helpers=nil@routes=nil@app_build_lock=Mutex.newsuperendInstance Public methodsapp()LinkReturns the underlyingRackapplication for this engine.Source:show|on GitHub# File railties/lib/rails/engine.rb, line 516defapp@app||@app_build_lock.synchronize{@app||=beginstack=default_middleware_stackconfig.middleware=build_middleware.merge_into(stack)config.middleware.build(endpoint)end}endcall(env)LinkDefine theRackAPIfor this engine.Source:show|on GitHub# File railties/lib/rails/engine.rb, line 533defcall(env)req=build_requestenvapp.callreq.envendconfig()LinkDefine the configuration object for the engine.Source:show|on GitHub# File railties/lib/rails/engine.rb, line 552defconfig@config||=Engine::Configuration.new(self.class.find_root(self.class.called_from))endeager_load!()LinkSource:show|on GitHub# File railties/lib/rails/engine.rb, line 490defeager_load!# Already done by Zeitwerk::Loader.eager_load_all. By now, we leave the# method as a no-op for backwards compatibility.endendpoint()LinkReturns the endpoint for this engine. If none is registered, defaults to anActionDispatch::Routing::RouteSet.Source:show|on GitHub# File railties/lib/rails/engine.rb, line 528defendpointself.class.endpoint||routesendenv_config()LinkDefines additionalRackenv configuration that is added on each call.Source:show|on GitHub# File railties/lib/rails/engine.rb, line 539defenv_config@env_config||={}endhelpers()LinkReturns a module with all the helpers defined for the engine.Source:show|on GitHub# File railties/lib/rails/engine.rb, line 500defhelpers@helpers||=beginhelpers=Module.newAbstractController::Helpers.helper_modules_from_paths(helpers_paths).eachdo|mod|helpers.include(mod)endhelpersendendhelpers_paths()LinkReturns all registered helpers paths.Source:show|on GitHub# File railties/lib/rails/engine.rb, line 511defhelpers_pathspaths["app/helpers"].existentendload_console(app = self)LinkLoad console and invoke the registered hooks. CheckRails::Railtie.consolefor more info.Source:show|on GitHub# File railties/lib/rails/engine.rb, line 453defload_console(app=self)require"rails/console/methods"run_console_blocks(app)selfendload_generators(app = self)LinkLoad Rails generators and invoke the registered hooks. CheckRails::Railtie.generatorsfor more info.Source:show|on GitHub# File railties/lib/rails/engine.rb, line 476defload_generators(app=self)require"rails/generators"run_generators_blocks(app)Rails::Generators.configure!(app.config.generators)selfendload_runner(app = self)LinkLoad Rails runner and invoke the registered hooks. CheckRails::Railtie.runnerfor more info.Source:show|on GitHub# File railties/lib/rails/engine.rb, line 461defload_runner(app=self)run_runner_blocks(app)selfendload_seed()LinkLoad data from db/seeds.rb file. It can be used in to load enginesâ seeds, e.g.:Blog::Engine.load_seedSource:show|on GitHub# File railties/lib/rails/engine.rb, line 560defload_seedseed_file=paths["db/seeds.rb"].existent.firstrun_callbacks(:load_seed) {load(seed_file) }ifseed_fileendload_server(app = self)LinkInvoke the server registered hooks. CheckRails::Railtie.serverfor more info.Source:show|on GitHub# File railties/lib/rails/engine.rb, line 485defload_server(app=self)run_server_blocks(app)selfendload_tasks(app = self)LinkLoad Rake and railties tasks, and invoke the registered hooks. CheckRails::Railtie.rake_tasksfor more info.Source:show|on GitHub# File railties/lib/rails/engine.rb, line 468defload_tasks(app=self)require"rake"run_tasks_blocks(app)selfendrailties()LinkSource:show|on GitHub# File railties/lib/rails/engine.rb, line 495defrailties@railties||=Railties.newendroutes(&block)LinkDefines the routes for this engine. If a block is given to routes, it is appended to the engine.Source:show|on GitHub# File railties/lib/rails/engine.rb, line 545defroutes(&block)@routes||=ActionDispatch::Routing::RouteSet.new_with_config(config)@routes.append(&block)ifblock_given?@routesendInstance Private methodsload_config_initializer(initializer)LinkSource:show|on GitHub# File railties/lib/rails/engine.rb, line 687defload_config_initializer(initializer)# :doc:ActiveSupport::Notifications.instrument("load_config_initializer.railties",initializer:initializer)doload(initializer)endend