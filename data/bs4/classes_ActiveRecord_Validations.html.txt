Active Record ValidationsActive Record includes the majority of its validations fromActiveModel::Validations.In Active Record, all validations are performed on save by default.Validationsaccept the:onargument to define the context where the validations are active. Active Record will pass either the context of:createor:updatedepending on whether the model is anew_record?.NamespaceMODULEActiveRecord::Validations::ClassMethodsMethodsSsave,save!Vvalid?,validateInstance Public methodssave(**options)LinkThe validation process on save can be skipped by passingvalidate: false. The validation context can be changed by passingcontext: context. The regularActiveRecord::Base#savemethod is replaced with this when the validations module is mixed in, which it is by default.Source:show|on GitHub# File activerecord/lib/active_record/validations.rb, line 47defsave(**options)perform_validations(options)?super:falseendsave!(**options)LinkAttempts to save the record just likeActiveRecord::Base#savebut will raise anActiveRecord::RecordInvalidexception instead of returningfalseif the record is not valid.Source:show|on GitHub# File activerecord/lib/active_record/validations.rb, line 53defsave!(**options)perform_validations(options)?super:raise_validation_errorendvalid?(context = nil)LinkRuns all the validations within the specified context. Returnstrueif no errors are found,falseotherwise.Aliased asvalidate.If the argument isfalse(default isnil), the context is set to:createifnew_record?istrue, and to:updateif it is not. If the argument is an array of contexts,post.valid?([:create, :update]), the validations are run within multiple contexts.Validations with no:onoption will run no matter the context. Validations with some:onoption will only run in the specified context.Also aliased as:validateSource:show|on GitHub# File activerecord/lib/active_record/validations.rb, line 69defvalid?(context=nil)context||=default_validation_contextoutput=super(context)errors.empty?&&outputendvalidate(context = nil)LinkAlias for:valid?