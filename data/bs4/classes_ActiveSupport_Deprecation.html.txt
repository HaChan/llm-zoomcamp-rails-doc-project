Active Support DeprecationDeprecation specifies the API used by Rails to deprecate methods, instance variables, objects, and constants. Itâs also available for gems or applications.For a gem, useDeprecation.newto create aDeprecationobject and store it in your module or class (in order for users to be able to configure it).module MyLibrary
  def self.deprecator
    @deprecator ||= ActiveSupport::Deprecation.new("2.0", "MyLibrary")
  end
endFor a Railtie or Engine, you may also want to add it to the applicationâs deprecators, so that the applicationâs configuration can be applied to it.module MyLibrary
  class Railtie < Rails::Railtie
    initializer "my_library.deprecator" do |app|
      app.deprecators[:my_library] = MyLibrary.deprecator
    end
  end
endWith the above initializer, configuration settings like the following will affectMyLibrary.deprecator:# in config/environments/test.rb
config.active_support.deprecation = :raiseNamespaceMODULEActiveSupport::Deprecation::BehaviorMODULEActiveSupport::Deprecation::DeprecatedConstantAccessorMODULEActiveSupport::Deprecation::DisallowedMODULEActiveSupport::Deprecation::MethodWrapperMODULEActiveSupport::Deprecation::ReportingCLASSActiveSupport::Deprecation::DeprecatedConstantProxyCLASSActiveSupport::Deprecation::DeprecatedInstanceVariableProxyCLASSActiveSupport::Deprecation::DeprecatedObjectProxyCLASSActiveSupport::Deprecation::DeprecatorsMethodsNnewIncluded ModulesActiveSupport::Deprecation::BehaviorActiveSupport::Deprecation::ReportingActiveSupport::Deprecation::DisallowedActiveSupport::Deprecation::MethodWrapperConstantsDEFAULT_BEHAVIORS={
raise: ->(message, callstack, deprecator) do
e = DeprecationException.new(message)
e.set_backtrace(callstack.map(&:to_s))
raise e
end,

stderr: ->(message, callstack, deprecator) do
$stderr.puts(message)
$stderr.puts callstack.join("\n  ") if deprecator.debug
end,

log: ->(message, callstack, deprecator) do
logger =
if defined?(Rails.logger) && Rails.logger
Rails.logger
else
require "active_support/logger"
ActiveSupport::Logger.new($stderr)
end
logger.warn message
logger.debug callstack.join("\n  ") if deprecator.debug
end,

notify: ->(message, callstack, deprecator) do
ActiveSupport::Notifications.instrument(
"deprecation.#{deprecator.gem_name.underscore.tr("/", "_")}",
message: message,
callstack: callstack,
gem_name: deprecator.gem_name,
deprecation_horizon: deprecator.deprecation_horizon,
)
end,

silence: ->(message, callstack, deprecator) { },

report: ->(message, callstack, deprecator) do
error = DeprecationException.new(message)
error.set_backtrace(callstack.map(&:to_s))
ActiveSupport.error_reporter.report(error)
end
}Default warning behaviors perRails.env.Attributes[RW]deprecation_horizonThe version number in which the deprecated behavior will be removed, by default.Class Public methodsnew(deprecation_horizon = "8.0", gem_name = "Rails")LinkIt accepts two parameters on initialization. The first is a version of library and the second is a library name.ActiveSupport::Deprecation.new('2.0', 'MyLibrary')Source:show|on GitHub# File activesupport/lib/active_support/deprecation.rb, line 71definitialize(deprecation_horizon="8.0",gem_name="Rails")self.gem_name=gem_nameself.deprecation_horizon=deprecation_horizon# By default, warnings are not silenced and debugging is off.self.silenced=falseself.debug=false@silence_counter=Concurrent::ThreadLocalVar.new(0)@explicitly_allowed_warnings=Concurrent::ThreadLocalVar.new(nil)end