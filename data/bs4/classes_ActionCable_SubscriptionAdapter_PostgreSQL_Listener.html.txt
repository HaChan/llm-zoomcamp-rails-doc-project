MethodsAadd_channelIinvoke_callbackLlistenNnewRremove_channelSshutdownClass Public methodsnew(adapter, event_loop)LinkSource:show|on GitHub# File actioncable/lib/action_cable/subscription_adapter/postgresql.rb, line 76definitialize(adapter,event_loop)super()@adapter=adapter@event_loop=event_loop@queue=Queue.new@thread=Thread.newdoThread.current.abort_on_exception=truelistenendendInstance Public methodsadd_channel(channel, on_success)LinkSource:show|on GitHub# File actioncable/lib/action_cable/subscription_adapter/postgresql.rb, line 120defadd_channel(channel,on_success)@queue.push([:listen,channel,on_success])endinvoke_callback(*)LinkSource:show|on GitHub# File actioncable/lib/action_cable/subscription_adapter/postgresql.rb, line 128definvoke_callback(*)@event_loop.post{super}endlisten()LinkSource:show|on GitHub# File actioncable/lib/action_cable/subscription_adapter/postgresql.rb, line 89deflisten@adapter.with_subscriptions_connectiondo|pg_conn|catch:shutdowndoloopdountil@queue.empty?action,channel,callback=@queue.pop(true)caseactionwhen:listenpg_conn.exec("LISTEN #{pg_conn.escape_identifier channel}")@event_loop.post(&callback)ifcallbackwhen:unlistenpg_conn.exec("UNLISTEN #{pg_conn.escape_identifier channel}")when:shutdownthrow:shutdownendendpg_conn.wait_for_notify(1)do|chan,pid,message|broadcast(chan,message)endendendendendremove_channel(channel)LinkSource:show|on GitHub# File actioncable/lib/action_cable/subscription_adapter/postgresql.rb, line 124defremove_channel(channel)@queue.push([:unlisten,channel])endshutdown()LinkSource:show|on GitHub# File actioncable/lib/action_cable/subscription_adapter/postgresql.rb, line 115defshutdown@queue.push([:shutdown])Thread.passwhile@thread.alive?end