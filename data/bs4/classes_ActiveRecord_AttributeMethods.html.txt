Active Record Attribute MethodsNamespaceMODULEActiveRecord::AttributeMethods::BeforeTypeCastMODULEActiveRecord::AttributeMethods::ClassMethodsMODULEActiveRecord::AttributeMethods::DirtyMODULEActiveRecord::AttributeMethods::PrimaryKeyMODULEActiveRecord::AttributeMethods::QueryMODULEActiveRecord::AttributeMethods::ReadMODULEActiveRecord::AttributeMethods::SerializationMODULEActiveRecord::AttributeMethods::TimeZoneConversionMODULEActiveRecord::AttributeMethods::WriteMethods#[],[]=Aaccessed_fields,attribute_for_inspect,attribute_names,attribute_present?,attributesHhas_attribute?Rrespond_to?Included ModulesActiveModel::AttributeMethodsActiveRecord::AttributeMethods::ReadActiveRecord::AttributeMethods::WriteActiveRecord::AttributeMethods::BeforeTypeCastActiveRecord::AttributeMethods::QueryActiveRecord::AttributeMethods::PrimaryKeyActiveRecord::AttributeMethods::TimeZoneConversionActiveRecord::AttributeMethods::DirtyActiveRecord::AttributeMethods::SerializationConstantsRESTRICTED_CLASS_METHODS=%w(private public protected allocate new name superclass)Instance Public methods[](attr_name)LinkReturns the value of the attribute identified byattr_nameafter it has been type cast. (For information about specific type casting behavior, see the types underActiveModel::Type.)class Person < ActiveRecord::Base
  belongs_to :organization
end

person = Person.new(name: "Francesco", date_of_birth: "2004-12-12")
person[:name]            # => "Francesco"
person[:date_of_birth]   # => Date.new(2004, 12, 12)
person[:organization_id] # => nilRaisesActiveModel::MissingAttributeErrorif the attribute is missing. Note, however, that theidattribute will never be considered missing.person = Person.select(:name).first
person[:name]            # => "Francesco"
person[:date_of_birth]   # => ActiveModel::MissingAttributeError: missing attribute 'date_of_birth' for Person
person[:organization_id] # => ActiveModel::MissingAttributeError: missing attribute 'organization_id' for Person
person[:id]              # => nilSource:show|on GitHub# File activerecord/lib/active_record/attribute_methods.rb, line 414def[](attr_name)read_attribute(attr_name) {|n|missing_attribute(n,caller) }end[]=(attr_name, value)LinkUpdates the attribute identified byattr_nameusing the specifiedvalue. The attribute value will be type cast upon being read.class Person < ActiveRecord::Base
end

person = Person.new
person[:date_of_birth] = "2004-12-12"
person[:date_of_birth] # => Date.new(2004, 12, 12)Source:show|on GitHub# File activerecord/lib/active_record/attribute_methods.rb, line 427def[]=(attr_name,value)write_attribute(attr_name,value)endaccessed_fields()LinkReturns the name of all database fields which have been read from this model. This can be useful in development mode to determine which fields need to be selected. For performance critical pages, selecting only the required fields can be an easy performance win (assuming you arenât using all of the fields on the model).For example:class PostsController < ActionController::Base
  after_action :print_accessed_fields, only: :index

  def index
    @posts = Post.all
  end

  private
    def print_accessed_fields
      p @posts.first.accessed_fields
    end
endWhich allows you to quickly change your code to:class PostsController < ActionController::Base
  def index
    @posts = Post.select(:id, :title, :author_id, :updated_at)
  end
endSource:show|on GitHub# File activerecord/lib/active_record/attribute_methods.rb, line 459defaccessed_fields@attributes.accessedendattribute_for_inspect(attr_name)LinkReturns an#inspect-like string for the value of the attributeattr_name.Stringattributes are truncated up to 50 characters. Other attributes return the value of#inspectwithout modification.person = Person.create!(name: 'David Heinemeier Hansson ' * 3)

person.attribute_for_inspect(:name)
# => "\"David Heinemeier Hansson David Heinemeier Hansson ...\""

person.attribute_for_inspect(:created_at)
# => "\"2012-10-22 00:15:07.000000000 +0000\""

person.attribute_for_inspect(:tag_ids)
# => "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]"Source:show|on GitHub# File activerecord/lib/active_record/attribute_methods.rb, line 364defattribute_for_inspect(attr_name)attr_name=attr_name.to_sattr_name=self.class.attribute_aliases[attr_name]||attr_namevalue=_read_attribute(attr_name)format_for_inspect(attr_name,value)endattribute_names()LinkReturns an array of names for the attributes available on this object.class Person < ActiveRecord::Base
end

person = Person.new
person.attribute_names
# => ["id", "created_at", "updated_at", "name", "age"]Source:show|on GitHub# File activerecord/lib/active_record/attribute_methods.rb, line 333defattribute_names@attributes.keysendattribute_present?(attr_name)LinkReturnstrueif the specifiedattributehas been set by the user or by a database load and is neithernilnorempty?(the latter only applies to objects that respond toempty?, most notably Strings). Otherwise,false. Note that it always returnstruewith boolean attributes.class Task < ActiveRecord::Base
end

task = Task.new(title: '', is_done: false)
task.attribute_present?(:title)   # => false
task.attribute_present?(:is_done) # => true
task.title = 'Buy milk'
task.is_done = true
task.attribute_present?(:title)   # => true
task.attribute_present?(:is_done) # => trueSource:show|on GitHub# File activerecord/lib/active_record/attribute_methods.rb, line 386defattribute_present?(attr_name)attr_name=attr_name.to_sattr_name=self.class.attribute_aliases[attr_name]||attr_namevalue=_read_attribute(attr_name)!value.nil?&&!(value.respond_to?(:empty?)&&value.empty?)endattributes()LinkReturns a hash of all the attributes with their names as keys and the values of the attributes as values.class Person < ActiveRecord::Base
end

person = Person.create(name: 'Francesco', age: 22)
person.attributes
# => {"id"=>3, "created_at"=>Sun, 21 Oct 2012 04:53:04, "updated_at"=>Sun, 21 Oct 2012 04:53:04, "name"=>"Francesco", "age"=>22}Source:show|on GitHub# File activerecord/lib/active_record/attribute_methods.rb, line 345defattributes@attributes.to_hashendhas_attribute?(attr_name)LinkReturnstrueif the given attribute is in the attributes hash, otherwisefalse.class Person < ActiveRecord::Base
  alias_attribute :new_name, :name
end

person = Person.new
person.has_attribute?(:name)     # => true
person.has_attribute?(:new_name) # => true
person.has_attribute?('age')     # => true
person.has_attribute?(:nothing)  # => falseSource:show|on GitHub# File activerecord/lib/active_record/attribute_methods.rb, line 315defhas_attribute?(attr_name)attr_name=attr_name.to_sattr_name=self.class.attribute_aliases[attr_name]||attr_name@attributes.key?(attr_name)endrespond_to?(name, include_private = false)LinkA Person object with a name attribute can askperson.respond_to?(:name),person.respond_to?(:name=), andperson.respond_to?(:name?)which will all returntrue. It also defines the attribute methods if they have not been generated.class Person < ActiveRecord::Base
end

person = Person.new
person.respond_to?(:name)    # => true
person.respond_to?(:name=)   # => true
person.respond_to?(:name?)   # => true
person.respond_to?('age')    # => true
person.respond_to?('age=')   # => true
person.respond_to?('age?')   # => true
person.respond_to?(:nothing) # => falseSource:show|on GitHub# File activerecord/lib/active_record/attribute_methods.rb, line 290defrespond_to?(name,include_private=false)returnfalseunlesssuper# If the result is true then check for the select case.# For queries selecting a subset of columns, return false for unselected columns.if@attributesifname=self.class.symbol_column_to_string(name.to_sym)return_has_attribute?(name)endendtrueend