RoutingConcernsallow you to declare common routes that can be reused inside others resources and routes.concern :commentable do
  resources :comments
end

concern :image_attachable do
  resources :images, only: :index
endThese concerns are used inResourcesrouting:resources :messages, concerns: [:commentable, :image_attachable]or in a scope or namespace:namespace :posts do
  concerns :commentable
endMethodsCconcern,concernsInstance Public methodsconcern(name, callable = nil, &block)LinkDefine a routing concern using a name.Concernsmay be defined inline, using a block, or handled by another object, by passing that object as the second parameter.The concern object, if supplied, should respond tocall, which will receive two parameters:* The current mapper
* A hash of options which the concern object may useOptions may also be used by concerns defined in a block by accepting a block parameter. So, using a block, you might do something as simple as limit the actions available on certain resources, passing standard resource options through the concern:concern :commentable do |options|
  resources :comments, options
end

resources :posts, concerns: :commentable
resources :archived_posts do
  # Don't allow comments on archived posts
  concerns :commentable, only: [:index, :show]
endOr, using a callable object, you might implement something more specific to your application, which would be out of place in your routes file.# purchasable.rb
class Purchasable
  def initialize(defaults = {})
    @defaults = defaults
  end

  def call(mapper, options = {})
    options = @defaults.merge(options)
    mapper.resources :purchases
    mapper.resources :receipts
    mapper.resources :returns if options[:returnable]
  end
end

# routes.rb
concern :purchasable, Purchasable.new(returnable: true)

resources :toys, concerns: :purchasable
resources :electronics, concerns: :purchasable
resources :pets do
  concerns :purchasable, returnable: false
endAny routing helpers can be used inside a concern. If using a callable, theyâre accessible from theMapperthatâs passed tocall.Source:show|on GitHub# File actionpack/lib/action_dispatch/routing/mapper.rb, line 2115defconcern(name,callable=nil,&block)callable||=lambda{|mapper,options|mapper.instance_exec(options,&block) }@concerns[name] =callableendconcerns(*args)LinkUse the named concernsresources :posts do
  concerns :commentable
endConcernsalso work in any routes helper that you want to use:namespace :posts do
  concerns :commentable
endSource:show|on GitHub# File actionpack/lib/action_dispatch/routing/mapper.rb, line 2131defconcerns(*args)options=args.extract_options!args.flatten.eachdo|name|ifconcern=@concerns[name]concern.call(self,options)elseraiseArgumentError,"No concern named #{name} was found!"endendend