NamespaceCLASSActionCable::SubscriptionAdapter::Redis::Listener::SubscribedClientMethodsAadd_channelIinvoke_callbackLlistenNnewRremove_channelSshutdownConstantsConnectionError=::Redis::BaseConnectionErrorClass Public methodsnew(adapter, config_options, event_loop)LinkSource:show|on GitHub# File actioncable/lib/action_cable/subscription_adapter/redis.rb, line 68definitialize(adapter,config_options,event_loop)super()@adapter=adapter@event_loop=event_loop@subscribe_callbacks=Hash.new{|h,k|h[k] = [] }@subscription_lock=Mutex.new@reconnect_attempt=0# Use the same config as used by Redis conn@reconnect_attempts=config_options.fetch(:reconnect_attempts,1)@reconnect_attempts=Array.new(@reconnect_attempts,0)if@reconnect_attempts.is_a?(Integer)@subscribed_client=nil@when_connected= []@thread=nilendInstance Public methodsadd_channel(channel, on_success)LinkSource:show|on GitHub# File actioncable/lib/action_cable/subscription_adapter/redis.rb, line 141defadd_channel(channel,on_success)@subscription_lock.synchronizedoensure_listener_running@subscribe_callbacks[channel]<<on_successwhen_connected{@subscribed_client.subscribe(channel) }endendinvoke_callback(*)LinkSource:show|on GitHub# File actioncable/lib/action_cable/subscription_adapter/redis.rb, line 155definvoke_callback(*)@event_loop.post{super}endlisten(conn)LinkSource:show|on GitHub# File actioncable/lib/action_cable/subscription_adapter/redis.rb, line 89deflisten(conn)conn.without_reconnectdooriginal_client=extract_subscribed_client(conn)conn.subscribe("_action_cable_internal")do|on|on.subscribedo|chan,count|@subscription_lock.synchronizedoifcount==1@reconnect_attempt=0@subscribed_client=original_clientuntil@when_connected.empty?@when_connected.shift.callendendifcallbacks=@subscribe_callbacks[chan]next_callback=callbacks.shift@event_loop.post(&next_callback)ifnext_callback@subscribe_callbacks.delete(chan)ifcallbacks.empty?endendendon.messagedo|chan,message|broadcast(chan,message)endon.unsubscribedo|chan,count|ifcount==0@subscription_lock.synchronizedo@subscribed_client=nilendendendendendendremove_channel(channel)LinkSource:show|on GitHub# File actioncable/lib/action_cable/subscription_adapter/redis.rb, line 149defremove_channel(channel)@subscription_lock.synchronizedowhen_connected{@subscribed_client.unsubscribe(channel) }endendshutdown()LinkSource:show|on GitHub# File actioncable/lib/action_cable/subscription_adapter/redis.rb, line 128defshutdown@subscription_lock.synchronizedoreturnif@thread.nil?when_connecteddo@subscribed_client.unsubscribe@subscribed_client=nilendendThread.passwhile@thread.alive?end