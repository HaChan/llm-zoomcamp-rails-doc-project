Shard Selector MiddlewareTheShardSelectorMiddlewareprovides a framework for automatically swapping shards. Rails provides a basic framework to determine which shard to switch to and allows for applications to write custom strategies for swapping if needed.TheShardSelectortakes a set of options (currently onlylockis supported) that can be used by the middleware to alter behavior.lockis true by default and will prohibit the request from switching shards once inside the block. Iflockis false, then shard swapping will be allowed. For tenant based sharding,lockshould always be true to prevent application code from mistakenly switching between tenants.Options can be set in the config:config.active_record.shard_selector = { lock: true }Applications must also provide the code for the resolver as it depends on application specific models. An example resolver would look like this:config.active_record.shard_resolver = ->(request) {
  subdomain = request.subdomain
  tenant = Tenant.find_by_subdomain!(subdomain)
  tenant.shard
}MethodsCcallNnewAttributes[R]options[R]resolverClass Public methodsnew(app, resolver, options = {})LinkSource:show|on GitHub# File activerecord/lib/active_record/middleware/shard_selector.rb, line 32definitialize(app,resolver,options= {})@app=app@resolver=resolver@options=optionsendInstance Public methodscall(env)LinkSource:show|on GitHub# File activerecord/lib/active_record/middleware/shard_selector.rb, line 40defcall(env)request=ActionDispatch::Request.new(env)shard=selected_shard(request)set_shard(shard)do@app.call(env)endend