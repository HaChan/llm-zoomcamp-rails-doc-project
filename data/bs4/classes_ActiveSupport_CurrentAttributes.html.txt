Current AttributesAbstract super class that provides a thread-isolated attributes singleton, which resets automatically before and after each request. This allows you to keep all the per-request attributes easily available to the whole system.The following full app-like example demonstrates how to use a Current class to facilitate easy access to the global, per-request attributes without passing them deeply around everywhere:# app/models/current.rb
class Current < ActiveSupport::CurrentAttributes
  attribute :account, :user
  attribute :request_id, :user_agent, :ip_address

  resets { Time.zone = nil }

  def user=(user)
    super
    self.account = user.account
    Time.zone    = user.time_zone
  end
end

# app/controllers/concerns/authentication.rb
module Authentication
  extend ActiveSupport::Concern

  included do
    before_action :authenticate
  end

  private
    def authenticate
      if authenticated_user = User.find_by(id: cookies.encrypted[:user_id])
        Current.user = authenticated_user
      else
        redirect_to new_session_url
      end
    end
end

# app/controllers/concerns/set_current_request_details.rb
module SetCurrentRequestDetails
  extend ActiveSupport::Concern

  included do
    before_action do
      Current.request_id = request.uuid
      Current.user_agent = request.user_agent
      Current.ip_address = request.ip
    end
  end
end

class ApplicationController < ActionController::Base
  include Authentication
  include SetCurrentRequestDetails
end

class MessagesController < ApplicationController
  def create
    Current.account.messages.create(message_params)
  end
end

class Message < ApplicationRecord
  belongs_to :creator, default: -> { Current.user }
  after_create { |message| Event.create(record: message) }
end

class Event < ApplicationRecord
  before_create do
    self.request_id = Current.request_id
    self.user_agent = Current.user_agent
    self.ip_address = Current.ip_address
  end
endA word of caution: Itâs easy to overdo a global singleton like Current and tangle your model as a result. Current should only be used for a few, top-level globals, like account, user, and request details. The attributes stuck in Current should be used by more or less all actions on all requests. If you start sticking controller-specific attributes in there, youâre going to create a mess.MethodsAafter_reset,attributeBbefore_resetIinstanceNnewRreset,resetsSsetIncluded ModulesActiveSupport::CallbacksAttributes[RW]attributesClass Public methodsafter_reset(*methods, &block)LinkAlias for:resetsattribute(*names, default: nil)LinkDeclares one or more attributes that will be given both class and instance accessor methods.Options:default- The default value for the attributes. If the valueis a proc or lambda, it will be called whenever an instance is constructed. Otherwise, the value will be duplicated with#dup. Default values are re-assigned when the attributes are reset.Source:show|on GitHub# File activesupport/lib/active_support/current_attributes.rb, line 112defattribute(*names,default:nil)invalid_attribute_names=names.map(&:to_sym)&INVALID_ATTRIBUTE_NAMESifinvalid_attribute_names.any?raiseArgumentError,"Restricted attribute names: #{invalid_attribute_names.join(", ")}"endActiveSupport::CodeGenerator.batch(generated_attribute_methods,__FILE__,__LINE__)do|owner|names.eachdo|name|owner.define_cached_method(name,namespace::current_attributes)do|batch|batch<<"def #{name}"<<"attributes[:#{name}]"<<"end"endowner.define_cached_method("#{name}=",namespace::current_attributes)do|batch|batch<<"def #{name}=(value)"<<"attributes[:#{name}] = value"<<"end"endendendDelegation.generate(singleton_class,names,to::instance,nilable:false,signature:"")Delegation.generate(singleton_class,names.map{|n|"#{n}="},to::instance,nilable:false,signature:"value")self.defaults=defaults.merge(names.index_with{default})endbefore_reset(*methods, &block)LinkCalls this callback beforeresetis called on the instance. Used for resetting external collaborators that depend on current values.Source:show|on GitHub# File activesupport/lib/active_support/current_attributes.rb, line 142defbefore_reset(*methods,&block)set_callback:reset,:before,*methods,&blockendinstance()LinkReturns singleton instance for this class in this thread. If none exists, one is created.Source:show|on GitHub# File activesupport/lib/active_support/current_attributes.rb, line 100definstancecurrent_instances[current_instances_key]||=newendnew()LinkSource:show|on GitHub# File activesupport/lib/active_support/current_attributes.rb, line 197definitialize@attributes=resolve_defaultsendresets(*methods, &block)LinkCalls this callback afterresetis called on the instance. Used for resetting external collaborators, likeTime.zone.Also aliased as:after_resetSource:show|on GitHub# File activesupport/lib/active_support/current_attributes.rb, line 147defresets(*methods,&block)set_callback:reset,:after,*methods,&blockendInstance Public methodsreset()LinkReset all attributes. Should be called before and after actions, when used as a per-request singleton.Source:show|on GitHub# File activesupport/lib/active_support/current_attributes.rb, line 216defresetrun_callbacks:resetdoself.attributes=resolve_defaultsendendset(attributes, &block)LinkExpose one or more attributes within a block. Old values are returned after the block concludes. Example demonstrating the common use of needing to set Current attributes outside the request-cycle:class Chat::PublicationJob < ApplicationJob
  def perform(attributes, room_number, creator)
    Current.set(person: creator) do
      Chat::Publisher.publish(attributes: attributes, room_number: room_number)
    end
  end
endSource:show|on GitHub# File activesupport/lib/active_support/current_attributes.rb, line 211defset(attributes,&block)with(**attributes,&block)end