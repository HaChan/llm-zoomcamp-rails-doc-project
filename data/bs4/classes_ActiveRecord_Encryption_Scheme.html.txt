A container of attribute encryption options.It validates and serves attribute encryption options.SeeEncryptedAttributeType,ContextMethodsCcompatible_with?Ddeterministic?,downcase?Ffixed?Iignore_case?Kkey_providerMmergeNnewSsupport_unencrypted_data?Tto_hWwith_contextAttributes[RW]previous_schemesClass Public methodsnew(key_provider: nil, key: nil, deterministic: nil, support_unencrypted_data: nil, downcase: nil, ignore_case: nil, previous_schemes: nil, **context_properties)LinkSource:show|on GitHub# File activerecord/lib/active_record/encryption/scheme.rb, line 13definitialize(key_provider:nil,key:nil,deterministic:nil,support_unencrypted_data:nil,downcase:nil,ignore_case:nil,previous_schemes:nil,**context_properties)# Initializing all attributes to +nil+ as we want to allow a "not set" semantics so that we# can merge schemes without overriding values with defaults. See +#merge+@key_provider_param=key_provider@key=key@deterministic=deterministic@support_unencrypted_data=support_unencrypted_data@downcase=downcase||ignore_case@ignore_case=ignore_case@previous_schemes_param=previous_schemes@previous_schemes=Array.wrap(previous_schemes)@context_properties=context_propertiesvalidate_config!endInstance Public methodscompatible_with?(other_scheme)LinkSource:show|on GitHub# File activerecord/lib/active_record/encryption/scheme.rb, line 73defcompatible_with?(other_scheme)deterministic?==other_scheme.deterministic?enddeterministic?()LinkSource:show|on GitHub# File activerecord/lib/active_record/encryption/scheme.rb, line 39defdeterministic?!!@deterministicenddowncase?()LinkSource:show|on GitHub# File activerecord/lib/active_record/encryption/scheme.rb, line 35defdowncase?@downcaseendfixed?()LinkSource:show|on GitHub# File activerecord/lib/active_record/encryption/scheme.rb, line 47deffixed?# by default deterministic encryption is fixed@fixed||=@deterministic&&(!@deterministic.is_a?(Hash)||@deterministic[:fixed])endignore_case?()LinkSource:show|on GitHub# File activerecord/lib/active_record/encryption/scheme.rb, line 31defignore_case?@ignore_caseendkey_provider()LinkSource:show|on GitHub# File activerecord/lib/active_record/encryption/scheme.rb, line 52defkey_provider@key_provider_param||key_provider_from_key||deterministic_key_provider||default_key_providerendmerge(other_scheme)LinkSource:show|on GitHub# File activerecord/lib/active_record/encryption/scheme.rb, line 56defmerge(other_scheme)self.class.new(**to_h.merge(other_scheme.to_h))endsupport_unencrypted_data?()LinkSource:show|on GitHub# File activerecord/lib/active_record/encryption/scheme.rb, line 43defsupport_unencrypted_data?@support_unencrypted_data.nil??ActiveRecord::Encryption.config.support_unencrypted_data:@support_unencrypted_dataendto_h()LinkSource:show|on GitHub# File activerecord/lib/active_record/encryption/scheme.rb, line 60defto_h{key_provider:@key_provider_param,deterministic:@deterministic,downcase:@downcase,ignore_case:@ignore_case,previous_schemes:@previous_schemes_param,**@context_properties}.compactendwith_context(&block)LinkSource:show|on GitHub# File activerecord/lib/active_record/encryption/scheme.rb, line 65defwith_context(&block)if@context_properties.present?ActiveRecord::Encryption.with_encryption_context(**@context_properties,&block)elseblock.callendend