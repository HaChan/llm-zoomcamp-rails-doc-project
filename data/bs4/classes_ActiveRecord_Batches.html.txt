Active Record BatchesNamespaceCLASSActiveRecord::Batches::BatchEnumeratorMethodsFfind_each,find_in_batchesIin_batchesConstantsDEFAULT_ORDER=:ascORDER_IGNORE_MESSAGE="Scoped order is ignored, it's forced to be batch order."Instance Public methodsfind_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: DEFAULT_ORDER, &block)LinkLooping through a collection of records from the database (using theScoping::Named::ClassMethods.allmethod, for example) is very inefficient since it will try to instantiate all the objects at once.In that case, batch processing methods allow you to work with the records in batches, thereby greatly reducing memory consumption.Thefind_eachmethod usesfind_in_batcheswith a batch size of 1000 (or as specified by the:batch_sizeoption).Person.find_each do |person|
  person.do_awesome_stuff
end

Person.where("age > 21").find_each do |person|
  person.party_all_night!
endIf you do not provide a block tofind_each, it will return an Enumerator for chaining with other methods:Person.find_each.with_index do |person, index|
  person.award_trophy(index + 1)
endOptions:batch_size- Specifies the size of the batch. Defaults to 1000.:start- Specifies the primary key value to start from, inclusive of the value.:finish- Specifies the primary key value to end at, inclusive of the value.:error_on_ignore- Overrides the application config to specify if an error should be raised when an order is present in the relation.:order- Specifies the primary key order (can be:ascor:descor an array consisting of :asc or :desc). Defaults to:asc.class Order < ActiveRecord::Base
  self.primary_key = [:id_1, :id_2]
end

Order.find_each(order: [:asc, :desc])In the above code,id_1is sorted in ascending order andid_2in descending order.Limits are honored, and if present there is no requirement for the batch size: it can be less than, equal to, or greater than the limit.The optionsstartandfinishare especially useful if you want multiple workers dealing with the same processing queue. You can make worker 1 handle all the records between id 1 and 9999 and worker 2 handle from 10000 and beyond by setting the:startand:finishoption on each worker.# In worker 1, let's process until 9999 records.
Person.find_each(finish: 9_999) do |person|
  person.party_all_night!
end

# In worker 2, let's process from record 10_000 and onwards.
Person.find_each(start: 10_000) do |person|
  person.party_all_night!
endNOTE: Order can be ascending (:asc) or descending (:desc). It is automatically set to ascending on the primary key (âid ASCâ). This also means that this method only works when the primary key is orderable (e.g. an integer or string).NOTE: By its nature, batch processing is subject to race conditions if other processes are modifying the database.Source:show|on GitHub# File activerecord/lib/active_record/relation/batches.rb, line 79deffind_each(start:nil,finish:nil,batch_size:1000,error_on_ignore:nil,order:DEFAULT_ORDER,&block)ifblock_given?find_in_batches(start:start,finish:finish,batch_size:batch_size,error_on_ignore:error_on_ignore,order:order)do|records|records.each(&block)endelseenum_for(:find_each,start:start,finish:finish,batch_size:batch_size,error_on_ignore:error_on_ignore,order:order)dorelation=selfapply_limits(relation,start,finish,build_batch_orders(order)).sizeendendendfind_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: DEFAULT_ORDER)LinkYields each batch of records that was found by the find options as an array.Person.where("age > 21").find_in_batches do |group|
  sleep(50) # Make sure it doesn't get too crowded in there!
  group.each { |person| person.party_all_night! }
endIf you do not provide a block tofind_in_batches, it will return an Enumerator for chaining with other methods:Person.find_in_batches.with_index do |group, batch|
  puts "Processing group ##{batch}"
  group.each(&:recover_from_last_night!)
endTo be yielded each record one by one, usefind_eachinstead.Options:batch_size- Specifies the size of the batch. Defaults to 1000.:start- Specifies the primary key value to start from, inclusive of the value.:finish- Specifies the primary key value to end at, inclusive of the value.:error_on_ignore- Overrides the application config to specify if an error should be raised when an order is present in the relation.:order- Specifies the primary key order (can be:ascor:descor an array consisting of :asc or :desc). Defaults to:asc.class Order < ActiveRecord::Base
  self.primary_key = [:id_1, :id_2]
end

Order.find_in_batches(order: [:asc, :desc])In the above code,id_1is sorted in ascending order andid_2in descending order.Limits are honored, and if present there is no requirement for the batch size: it can be less than, equal to, or greater than the limit.The optionsstartandfinishare especially useful if you want multiple workers dealing with the same processing queue. You can make worker 1 handle all the records between id 1 and 9999 and worker 2 handle from 10000 and beyond by setting the:startand:finishoption on each worker.# Let's process from record 10_000 on.
Person.find_in_batches(start: 10_000) do |group|
  group.each { |person| person.party_all_night! }
endNOTE: Order can be ascending (:asc) or descending (:desc). It is automatically set to ascending on the primary key (âid ASCâ). This also means that this method only works when the primary key is orderable (e.g. an integer or string).NOTE: By its nature, batch processing is subject to race conditions if other processes are modifying the database.Source:show|on GitHub# File activerecord/lib/active_record/relation/batches.rb, line 148deffind_in_batches(start:nil,finish:nil,batch_size:1000,error_on_ignore:nil,order:DEFAULT_ORDER)relation=selfunlessblock_given?returnto_enum(:find_in_batches,start:start,finish:finish,batch_size:batch_size,error_on_ignore:error_on_ignore,order:order)dototal=apply_limits(relation,start,finish,build_batch_orders(order)).size(total-1).div(batch_size)+1endendin_batches(of:batch_size,start:start,finish:finish,load:true,error_on_ignore:error_on_ignore,order:order)do|batch|yieldbatch.to_aendendin_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: DEFAULT_ORDER, use_ranges: nil, &block)LinkYieldsActiveRecord::Relationobjects to work with a batch of records.Person.where("age > 21").in_batches do |relation|
  relation.delete_all
  sleep(10) # Throttle the delete queries
endIf you do not provide a block toin_batches, it will return aBatchEnumeratorwhich is enumerable.Person.in_batches.each_with_index do |relation, batch_index|
  puts "Processing relation ##{batch_index}"
  relation.delete_all
endExamples of calling methods on the returnedBatchEnumeratorobject:Person.in_batches.delete_all
Person.in_batches.update_all(awesome: true)
Person.in_batches.each_record(&:party_all_night!)Options:of- Specifies the size of the batch. Defaults to 1000.:load- Specifies if the relation should be loaded. Defaults to false.:start- Specifies the primary key value to start from, inclusive of the value.:finish- Specifies the primary key value to end at, inclusive of the value.:error_on_ignore- Overrides the application config to specify if an error should be raised when an order is present in the relation.:order- Specifies the primary key order (can be:ascor:descor an array consisting of :asc or :desc). Defaults to:asc.class Order < ActiveRecord::Base
  self.primary_key = [:id_1, :id_2]
end

Order.in_batches(order: [:asc, :desc])In the above code,id_1is sorted in ascending order andid_2in descending order.:use_ranges- Specifies whether to use range iteration (id >= x AND id <= y). It can make iterating over the whole or almost whole tables several times faster. Only whole table iterations use this style of iteration by default. You can disable this behavior by passingfalse. If you iterate over the table and the only condition is, e.g.,archived_at: nil(and only a tiny fraction of the records are archived), it makes sense to opt in to this approach.Limits are honored, and if present there is no requirement for the batch size, it can be less than, equal, or greater than the limit.The optionsstartandfinishare especially useful if you want multiple workers dealing with the same processing queue. You can make worker 1 handle all the records between id 1 and 9999 and worker 2 handle from 10000 and beyond by setting the:startand:finishoption on each worker.# Let's process from record 10_000 on.
Person.in_batches(start: 10_000).update_all(awesome: true)An example of calling where query method on the relation:Person.in_batches.each do |relation|
  relation.update_all('age = age + 1')
  relation.where('age > 21').update_all(should_party: true)
  relation.where('age <= 21').delete_all
endNOTE: If you are going to iterate through each record, you should call each_record on the yielded BatchEnumerator:Person.in_batches.each_record(&:party_all_night!)NOTE: Order can be ascending (:asc) or descending (:desc). It is automatically set to ascending on the primary key (âid ASCâ). This also means that this method only works when the primary key is orderable (e.g. an integer or string).NOTE: By its nature, batch processing is subject to race conditions if other processes are modifying the database.Source:show|on GitHub# File activerecord/lib/active_record/relation/batches.rb, line 239defin_batches(of:1000,start:nil,finish:nil,load:false,error_on_ignore:nil,order:DEFAULT_ORDER,use_ranges:nil,&block)unlessArray(order).all?{|ord|[:asc,:desc].include?(ord) }raiseArgumentError,":order must be :asc or :desc or an array consisting of :asc or :desc, got #{order.inspect}"endifarel.orders.present?act_on_ignored_order(error_on_ignore)endunlessblockreturnBatchEnumerator.new(of:of,start:start,finish:finish,relation:self,order:order,use_ranges:use_ranges)endbatch_limit=ofiflimit_valueremaining=limit_valuebatch_limit=remainingifremaining<batch_limitendifself.loaded?batch_on_loaded_relation(relation:self,start:start,finish:finish,order:order,batch_limit:batch_limit,&block)elsebatch_on_unloaded_relation(relation:self,start:start,finish:finish,load:load,order:order,use_ranges:use_ranges,remaining:remaining,batch_limit:batch_limit,&block)endend