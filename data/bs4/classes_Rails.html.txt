Railties â Gluing theEngineto the RailsRailties is responsible for gluing all frameworks together. Overall, it:handles the bootstrapping process for a Rails application;manages therailscommand line interface;and provides the Rails generators core.DownloadThe latest version of Railties can be installed with RubyGems:gem install railtiesSource code can be downloaded as part of the Rails project on GitHubgithub.com/rails/rails/tree/main/railtiesLicenseRailties is released under the MIT license:opensource.org/licenses/MITSupportAPIdocumentation is atapi.rubyonrails.orgBug reports can be filed for the Ruby on Rails project here:github.com/rails/rails/issuesFeature requests should be discussed on the rails-core mailing list here:discuss.rubyonrails.org/c/rubyonrails-coreNamespaceMODULERails::APIMODULERails::CommandMODULERails::ConfigurationMODULERails::ConsoleMethodsMODULERails::GeneratorsMODULERails::InfoMODULERails::InitializableMODULERails::PathsMODULERails::RackMODULERails::VERSIONCLASSRails::AppBuilderCLASSRails::ApplicationCLASSRails::ConsoleCLASSRails::DBConsoleCLASSRails::EngineCLASSRails::HealthControllerCLASSRails::PluginBuilderCLASSRails::RailtieCLASSRails::ServerCLASSRails::SourceAnnotationExtractorMethodsAapplication,autoloadersBbacktrace_cleanerCconfigurationEenv,env=,errorGgem_version,groupsPpublic_pathRrootVversionAttributes[RW]app_class[W]application[RW]cache[RW]loggerClass Public methodsapplication()LinkSource:show|on GitHub# File railties/lib/rails.rb, line 45defapplication@application||=(app_class.instanceifapp_class)endautoloaders()LinkSource:show|on GitHub# File railties/lib/rails.rb, line 126defautoloadersapplication.autoloadersendbacktrace_cleaner()LinkSource:show|on GitHub# File railties/lib/rails.rb, line 56defbacktrace_cleaner@backtrace_cleaner||=Rails::BacktraceCleaner.newendconfiguration()LinkTheConfigurationinstance used to configure the Rails environmentSource:show|on GitHub# File railties/lib/rails.rb, line 52defconfigurationapplication.configendenv()LinkReturns the current Rails environment.Rails.env # => "development"
Rails.env.development? # => true
Rails.env.production? # => false
Rails.env.local? # => true              true for "development" and "test", false for anything elseSource:show|on GitHub# File railties/lib/rails.rb, line 75defenv@_env||=ActiveSupport::EnvironmentInquirer.new(ENV["RAILS_ENV"].presence||ENV["RACK_ENV"].presence||"development")endenv=(environment)LinkSets the Rails environment.Rails.env = "staging" # => "staging"Source:show|on GitHub# File railties/lib/rails.rb, line 82defenv=(environment)@_env=ActiveSupport::EnvironmentInquirer.new(environment)enderror()LinkReturns theActiveSupport::ErrorReporterof the current Rails project, otherwise it returnsnilif there is no project.Rails.error.handle(IOError) do
  # ...
end
Rails.error.report(error)Source:show|on GitHub# File railties/lib/rails.rb, line 93deferrorActiveSupport.error_reporterendgem_version()LinkReturns the currently loaded version of Rails as aGem::Version.Source:show|on GitHub# File railties/lib/rails/gem_version.rb, line 5defself.gem_versionGem::Version.newVERSION::STRINGendgroups(*groups)LinkReturns all Rails groups for loading based on:The Rails environment;The environment variable RAILS_GROUPS;The optional envs given as argument and the hash with group dependencies;Rails.groups assets: [:development, :test]
# => [:default, "development", :assets] for Rails.env == "development"
# => [:default, "production"]           for Rails.env == "production"Source:show|on GitHub# File railties/lib/rails.rb, line 106defgroups(*groups)hash=groups.extract_options!env=Rails.envgroups.unshift(:default,env)groups.concatENV["RAILS_GROUPS"].to_s.split(",")groups.concathash.map{|k,v|kifv.map(&:to_s).include?(env) }groups.compact!groups.uniq!groupsendpublic_path()LinkReturns aPathnameobject of the public folder of the current Rails project, otherwise it returnsnilif there is no project:Rails.public_path
  # => #<Pathname:/Users/someuser/some/path/project/public>Source:show|on GitHub# File railties/lib/rails.rb, line 122defpublic_pathapplication&&Pathname.new(application.paths["public"].first)endroot()LinkReturns aPathnameobject of the current Rails project, otherwise it returnsnilif there is no project:Rails.root
  # => #<Pathname:/Users/someuser/some/path/project>Source:show|on GitHub# File railties/lib/rails.rb, line 65defrootapplication&&application.config.rootendversion()LinkReturns the currently loaded version of Rails as a string.Source:show|on GitHub# File railties/lib/rails/version.rb, line 7defself.versionVERSION::STRINGend