Active Record â Object-relational mapping in RailsActive Record connects classes to relational database tables to establish an almost zero-configuration persistence layer for applications. The library provides a base class that, when subclassed, sets up a mapping between the new class and an existing table in the database. In the context of an application, these classes are commonly referred to asmodels. Models can also be connected to other models; this is done by definingassociations.Active Record relies heavily on naming in that it uses class and association names to establish mappings between respective database tables and foreign key columns. Although these mappings can be defined explicitly, itâs recommended to follow naming conventions, especially when getting started with the library.You can read more about Active Record in theActive Record Basicsguide.A short rundown of some of the major features:Automated mapping between classes and tables, attributes and columns.class Product < ActiveRecord::Base
endThe Product class is automatically mapped to the table named âproductsâ, which might look like this:CREATE TABLE products (
  id bigint NOT NULL auto_increment,
  name varchar(255),
  PRIMARY KEY  (id)
);This would also define the following accessors:Product#nameandProduct#name=(new_name).Learn moreAssociationsbetween objects defined by simple class methods.class Firm < ActiveRecord::Base
  has_many   :clients
  has_one    :account
  belongs_to :conglomerate
endLearn moreAggregationsof value objects.class Account < ActiveRecord::Base
  composed_of :balance, class_name: 'Money',
              mapping: %w(balance amount)
  composed_of :address,
              mapping: [%w(address_street street), %w(address_city city)]
endLearn moreValidation rules that can differ for new or existing objects.class Account < ActiveRecord::Base
  validates :subdomain, :name, :email_address, :password, presence: true
  validates :subdomain, uniqueness: true
  validates :terms_of_service, acceptance: true, on: :create
  validates :password, :email_address, confirmation: true, on: :create
endLearn moreCallbacksavailable for the entire life cycle (instantiation, saving, destroying, validating, etc.).class Person < ActiveRecord::Base
  before_destroy :invalidate_payment_plan
  # the `invalidate_payment_plan` method gets called just before Person#destroy
endLearn moreInheritancehierarchies.class Company < ActiveRecord::Base; end
class Firm < Company; end
class Client < Company; end
class PriorityClient < Client; endLearn moreTransactions.# Database transaction
Account.transaction do
  david.withdrawal(100)
  mary.deposit(100)
endLearn moreReflections on columns, associations, and aggregations.reflection = Firm.reflect_on_association(:clients)
reflection.klass # => Client (class)
Firm.columns # Returns an array of column descriptors for the firms tableLearn moreDatabase abstraction through simple adapters.# connect to SQLite3
ActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: 'dbfile.sqlite3')

# connect to MySQL with authentication
ActiveRecord::Base.establish_connection(
  adapter:  'mysql2',
  host:     'localhost',
  username: 'me',
  password: 'secret',
  database: 'activerecord'
)Learn moreand read about the built-in support forMySQL,PostgreSQL, andSQLite3.Logging support forLog4randLogger.ActiveRecord::Base.logger = ActiveSupport::Logger.new(STDOUT)
ActiveRecord::Base.logger = Log4r::Logger.new('Application Log')Database agnostic schema management with Migrations.class AddSystemSettings < ActiveRecord::Migration[7.2]
  def up
    create_table :system_settings do |t|
      t.string  :name
      t.string  :label
      t.text    :value
      t.string  :type
      t.integer :position
    end

    SystemSetting.create name: 'notice', label: 'Use notice?', value: 1
  end

  def down
    drop_table :system_settings
  end
endLearn morePhilosophyActive Record is an implementation of the object-relational mapping (ORM)patternby the same name described by Martin Fowler:âAn object that wraps a row in a database table or view, encapsulates the database access, and adds domain logic on that data.âActive Record attempts to provide a coherent wrapper as a solution for the inconvenience that is object-relational mapping. The prime directive for this mapping has been to minimize the amount of code needed to build a real-world domain model. This is made possible by relying on a number of conventions that make it easy for Active Record to infer complex relations and structures from a minimal amount of explicit direction.Convention over Configuration:No XML files!Lots of reflection and run-time extensionMagic is not inherently a bad wordAdmit the Database:Lets you drop down to SQL for odd cases and performanceDoesnât attempt to duplicate or replace data definitionsDownload and installationThe latest version of Active Record can be installed with RubyGems:$ gem install activerecordSource code can be downloaded as part of the Rails project on GitHub:github.com/rails/rails/tree/main/activerecordLicenseActive Record is released under the MIT license:opensource.org/licenses/MITSupportAPI documentation is at:api.rubyonrails.orgBug reports for the Ruby on Rails project can be filed here:github.com/rails/rails/issuesFeature requests should be discussed on the rails-core mailing list here:discuss.rubyonrails.org/c/rubyonrails-coreValidation error class to wrap association recordsâ errors, with index_errors support.NamespaceMODULEActiveRecord::AggregationsMODULEActiveRecord::AssertionsMODULEActiveRecord::AssociationsMODULEActiveRecord::AttributeAssignmentMODULEActiveRecord::AttributeMethodsMODULEActiveRecord::AttributesMODULEActiveRecord::AutosaveAssociationMODULEActiveRecord::BatchesMODULEActiveRecord::CalculationsMODULEActiveRecord::CallbacksMODULEActiveRecord::CodersMODULEActiveRecord::ConnectionAdaptersMODULEActiveRecord::ConnectionHandlingMODULEActiveRecord::CoreMODULEActiveRecord::CounterCacheMODULEActiveRecord::DelegatedTypeMODULEActiveRecord::DynamicMatchersMODULEActiveRecord::EncryptionMODULEActiveRecord::EnumMODULEActiveRecord::ExplainMODULEActiveRecord::FinderMethodsMODULEActiveRecord::InheritanceMODULEActiveRecord::IntegrationMODULEActiveRecord::LockingMODULEActiveRecord::MarshallingMODULEActiveRecord::MessagePackMODULEActiveRecord::MiddlewareMODULEActiveRecord::ModelSchemaMODULEActiveRecord::NestedAttributesMODULEActiveRecord::NoTouchingMODULEActiveRecord::NormalizationMODULEActiveRecord::PersistenceMODULEActiveRecord::QueryLogsMODULEActiveRecord::QueryMethodsMODULEActiveRecord::QueryingMODULEActiveRecord::ReadonlyAttributesMODULEActiveRecord::ReflectionMODULEActiveRecord::SanitizationMODULEActiveRecord::ScopingMODULEActiveRecord::SecurePasswordMODULEActiveRecord::SecureTokenMODULEActiveRecord::SerializationMODULEActiveRecord::SignedIdMODULEActiveRecord::SpawnMethodsMODULEActiveRecord::StoreMODULEActiveRecord::SuppressorMODULEActiveRecord::TasksMODULEActiveRecord::TestFixturesMODULEActiveRecord::TimestampMODULEActiveRecord::TokenForMODULEActiveRecord::TransactionsMODULEActiveRecord::TranslationMODULEActiveRecord::TypeMODULEActiveRecord::VERSIONMODULEActiveRecord::ValidationsCLASSActiveRecord::ActiveRecordErrorCLASSActiveRecord::AdapterErrorCLASSActiveRecord::AdapterNotFoundCLASSActiveRecord::AdapterNotSpecifiedCLASSActiveRecord::AdapterTimeoutCLASSActiveRecord::AssociationTypeMismatchCLASSActiveRecord::AsynchronousQueryInsideTransactionErrorCLASSActiveRecord::AttributeAssignmentErrorCLASSActiveRecord::BaseCLASSActiveRecord::ConfigurationErrorCLASSActiveRecord::ConnectionFailedCLASSActiveRecord::ConnectionNotEstablishedCLASSActiveRecord::ConnectionTimeoutErrorCLASSActiveRecord::DangerousAttributeErrorCLASSActiveRecord::DatabaseAlreadyExistsCLASSActiveRecord::DatabaseConfigurationsCLASSActiveRecord::DatabaseConnectionErrorCLASSActiveRecord::DatabaseVersionErrorCLASSActiveRecord::DeadlockedCLASSActiveRecord::DestroyAssociationAsyncErrorCLASSActiveRecord::DestroyAssociationAsyncJobCLASSActiveRecord::EagerLoadPolymorphicErrorCLASSActiveRecord::EnvironmentMismatchErrorCLASSActiveRecord::ExclusiveConnectionTimeoutErrorCLASSActiveRecord::FixtureSetCLASSActiveRecord::FutureResultCLASSActiveRecord::InvalidForeignKeyCLASSActiveRecord::IrreversibleMigrationCLASSActiveRecord::IrreversibleOrderErrorCLASSActiveRecord::LockWaitTimeoutCLASSActiveRecord::LogSubscriberCLASSActiveRecord::MigrationCLASSActiveRecord::MigrationContextCLASSActiveRecord::MismatchedForeignKeyCLASSActiveRecord::MultiparameterAssignmentErrorsCLASSActiveRecord::NoDatabaseErrorCLASSActiveRecord::NotNullViolationCLASSActiveRecord::PreparedStatementCacheExpiredCLASSActiveRecord::PreparedStatementInvalidCLASSActiveRecord::PromiseCLASSActiveRecord::QueryAbortedCLASSActiveRecord::QueryCacheCLASSActiveRecord::QueryCanceledCLASSActiveRecord::RangeErrorCLASSActiveRecord::ReadOnlyErrorCLASSActiveRecord::ReadOnlyRecordCLASSActiveRecord::ReadonlyAttributeErrorCLASSActiveRecord::RecordInvalidCLASSActiveRecord::RecordNotDestroyedCLASSActiveRecord::RecordNotFoundCLASSActiveRecord::RecordNotSavedCLASSActiveRecord::RecordNotUniqueCLASSActiveRecord::RelationCLASSActiveRecord::ResultCLASSActiveRecord::RollbackCLASSActiveRecord::SQLWarningCLASSActiveRecord::SchemaCLASSActiveRecord::SerializationFailureCLASSActiveRecord::SerializationTypeMismatchCLASSActiveRecord::SoleRecordExceededCLASSActiveRecord::StaleObjectErrorCLASSActiveRecord::StatementCacheCLASSActiveRecord::StatementInvalidCLASSActiveRecord::StatementTimeoutCLASSActiveRecord::StrictLoadingViolationErrorCLASSActiveRecord::SubclassNotFoundCLASSActiveRecord::TableNotSpecifiedCLASSActiveRecord::TransactionCLASSActiveRecord::TransactionIsolationErrorCLASSActiveRecord::TransactionRollbackErrorCLASSActiveRecord::UnknownAttributeErrorCLASSActiveRecord::UnknownAttributeReferenceCLASSActiveRecord::UnknownPrimaryKeyCLASSActiveRecord::UnmodifiableRelationCLASSActiveRecord::ValueTooLongCLASSActiveRecord::WrappedDatabaseExceptionMethodsAaction_on_strict_loading_violation,after_all_transactions_commit,allow_deprecated_singular_associations_name,allow_deprecated_singular_associations_name=,async_query_executorCcommit_transaction_on_non_local_return,commit_transaction_on_non_local_return=Ddb_warnings_action,db_warnings_action=,db_warnings_ignore,default_timezone=,disconnect_all!,dump_schema_after_migration,dump_schemasEeager_load!,error_on_ignored_orderGgem_version,generate_secure_token_on,global_executor_concurrency=Llazily_load_schema_cache,legacy_connection_handling=Mmarshalling_format_version,marshalling_format_version=,migration_strategyPpermanent_connection_checkout=,protocol_adaptersQqueuesRraise_int_wider_than_64bitSschema_cache_ignored_tables,schema_formatTtimestamped_migrationsUuse_yaml_unsafe_loadVvalidate_migration_timestamps,verbose_query_logs,verify_foreign_keys_for_fixtures,versionWwarn_on_records_fetched_greater_thanYyaml_column_permitted_classesIncluded ModulesActiveSupport::Deprecation::DeprecatedConstantAccessorConstantsMigrationProxy=Struct.new(:name, :version, :filename, :scope) do
def initialize(name, version, filename, scope)
super
@migration = nil
end

def basename
File.basename(filename)
end

delegate :migrate, :announce, :write, :disable_ddl_transaction, to: :migration

private
def migration
@migration ||= load_migration
end

def load_migration
Object.send(:remove_const, name) rescue nil

load(File.expand_path(filename))
name.constantize.new(name, version)
end
endMigrationProxyis used to defer loading of the actual migration classes until they are neededPoint=Struct.new(:x, :y)UnknownAttributeError=ActiveModel::UnknownAttributeErrorActive Model UnknownAttributeErrorRaised when unknown attributes are supplied via mass assignment.class Person
  include ActiveModel::AttributeAssignment
  include ActiveModel::Validations
end

person = Person.new
person.assign_attributes(name: 'Gorby')
# => ActiveModel::UnknownAttributeError: unknown attribute 'name' for Person.Attributes[RW]application_record_class[RW]before_committed_on_all_records[RW]belongs_to_required_validates_foreign_key[R]default_timezone[RW]disable_prepared_statements[RW]index_nested_attribute_errors[RW]maintain_test_schema[R]permanent_connection_checkout[RW]query_transformers[RW]raise_on_assign_to_attr_readonly[RW]reading_role[RW]run_after_transaction_callbacks_in_order_defined[RW]writing_roleClass Public methodsaction_on_strict_loading_violationLinkSet the application to log or raise when an association violates strict loading. Defaults to :raise.Source:show|on GitHub# File activerecord/lib/active_record.rb, line 377singleton_class.attr_accessor:action_on_strict_loading_violationafter_all_transactions_commit(&block)LinkRegisters a block to be called after all the current transactions have been committed.If there is no currently open transaction, the block is called immediately.If there are multiple nested transactions, the block is called after the outermost one has been committed,If any of the currently open transactions is rolled back, the block is never called.If multiple transactions are open across multiple databases, the block will be invoked if and once all of them have been committed. But note that nesting transactions across two distinct databases is a sharding anti-pattern that comes with a world of hurts.Source:show|on GitHub# File activerecord/lib/active_record.rb, line 557defself.after_all_transactions_commit(&block)open_transactions=all_open_transactionsifopen_transactions.empty?yieldelsifopen_transactions.size==1open_transactions.first.after_commit(&block)elsecount=open_transactions.sizecallback=->docount-=1block.callifcount.zero?endopen_transactions.eachdo|t|t.after_commit(&callback)endopen_transactions=nil# rubocop:disable Lint/UselessAssignment avoid holding it in the closureendendallow_deprecated_singular_associations_name()LinkSource:show|on GitHub# File activerecord/lib/active_record.rb, line 447defself.allow_deprecated_singular_associations_nameActiveRecord.deprecator.warn<<-WARNING.squish`Rails.application.config.active_record.allow_deprecated_singular_associations_name`
      is deprecated and will be removed in Rails 8.0.WARNINGendallow_deprecated_singular_associations_name=(value)LinkSource:show|on GitHub# File activerecord/lib/active_record.rb, line 454defself.allow_deprecated_singular_associations_name=(value)ActiveRecord.deprecator.warn<<-WARNING.squish`Rails.application.config.active_record.allow_deprecated_singular_associations_name`
      is deprecated and will be removed in Rails 8.0.WARNINGendasync_query_executorLinkSets theasync_query_executorfor an application. By default the thread pool executor set tonilwhich will not run queries in the background. Applications must configure a thread pool executor to use this feature. Options are:* nil - Does not initialize a thread pool executor. Any async calls will be
run in the foreground.
* :global_thread_pool - Initializes a single +Concurrent::ThreadPoolExecutor+
that uses the +async_query_concurrency+ for the +max_threads+ value.
* :multi_thread_pool - Initializes a +Concurrent::ThreadPoolExecutor+ for each
database connection. The initializer values are defined in the configuration hash.Source:show|on GitHub# File activerecord/lib/active_record.rb, line 276singleton_class.attr_accessor:async_query_executorcommit_transaction_on_non_local_return()LinkSource:show|on GitHub# File activerecord/lib/active_record.rb, line 347defself.commit_transaction_on_non_local_returnActiveRecord.deprecator.warn<<-WARNING.squish`Rails.application.config.active_record.commit_transaction_on_non_local_return`
      is deprecated and will be removed in Rails 8.0.WARNINGendcommit_transaction_on_non_local_return=(value)LinkSource:show|on GitHub# File activerecord/lib/active_record.rb, line 354defself.commit_transaction_on_non_local_return=(value)ActiveRecord.deprecator.warn<<-WARNING.squish`Rails.application.config.active_record.commit_transaction_on_non_local_return`
      is deprecated and will be removed in Rails 8.0.WARNINGenddb_warnings_actionLinkThe action to take when database query produces warning. Must be one of :ignore, :log, :raise, :report, or a custom proc. The default is :ignore.Source:show|on GitHub# File activerecord/lib/active_record.rb, line 218singleton_class.attr_reader:db_warnings_actiondb_warnings_action=(action)LinkSource:show|on GitHub# File activerecord/lib/active_record.rb, line 220defself.db_warnings_action=(action)@db_warnings_action=caseactionwhen:ignorenilwhen:log->(warning)dowarning_message="[#{warning.class}] #{warning.message}"warning_message+=" (#{warning.code})"ifwarning.codeActiveRecord::Base.logger.warn(warning_message)endwhen:raise->(warning) {raisewarning}when:report->(warning) {Rails.error.report(warning,handled:true) }whenProcactionelseraiseArgumentError,"db_warnings_action must be one of :ignore, :log, :raise, :report, or a custom proc."endenddb_warnings_ignoreLinkSpecify allowlist of database warnings.Source:show|on GitHub# File activerecord/lib/active_record.rb, line 247singleton_class.attr_accessor:db_warnings_ignoredefault_timezone=(default_timezone)LinkDetermines whether to use Time.utc (using :utc) or Time.local (using :local) when pulling dates and times from the database. This is set to :utc by default.Source:show|on GitHub# File activerecord/lib/active_record.rb, line 203defself.default_timezone=(default_timezone)unless%i(local utc).include?(default_timezone)raiseArgumentError,"default_timezone must be either :utc (default) or :local."end@default_timezone=default_timezoneenddisconnect_all!()LinkExplicitly closes all database connections in all pools.Source:show|on GitHub# File activerecord/lib/active_record.rb, line 540defself.disconnect_all!ConnectionAdapters::PoolConfig.disconnect_all!enddump_schema_after_migrationLinkSpecify whether schema dump should happen at the end of the bin/rails db:migrate command. This is true by default, which is useful for the development environment. This should ideally be false in the production environment where dumping schema is rarely needed.Source:show|on GitHub# File activerecord/lib/active_record.rb, line 425singleton_class.attr_accessor:dump_schema_after_migrationdump_schemasLinkSpecifies which database schemas to dump when calling db:schema:dump. If the value is :schema_search_path (the default), any schemas listed in schema_search_path are dumped. Use :all to dump all schemas regardless of schema_search_path, or a string of comma separated schemas for a custom list.Source:show|on GitHub# File activerecord/lib/active_record.rb, line 435singleton_class.attr_accessor:dump_schemaseager_load!()LinkSource:show|on GitHub# File activerecord/lib/active_record.rb, line 529defself.eager_load!superActiveRecord::Locking.eager_load!ActiveRecord::Scoping.eager_load!ActiveRecord::Associations.eager_load!ActiveRecord::AttributeMethods.eager_load!ActiveRecord::ConnectionAdapters.eager_load!ActiveRecord::Encryption.eager_load!enderror_on_ignored_orderLinkSpecifies if an error should be raised if the query has an order being ignored when doing batch queries. Useful in applications where the scope being ignored is error-worthy, rather than a warning.Source:show|on GitHub# File activerecord/lib/active_record.rb, line 396singleton_class.attr_accessor:error_on_ignored_ordergem_version()LinkReturns the currently loaded version of Active Record as aGem::Version.Source:show|on GitHub# File activerecord/lib/active_record/gem_version.rb, line 5defself.gem_versionGem::Version.newVERSION::STRINGendgenerate_secure_token_onLinkControls when to generate a value forhas_secure_tokendeclarations. Defaults to:create.Source:show|on GitHub# File activerecord/lib/active_record.rb, line 490singleton_class.attr_accessor:generate_secure_token_onglobal_executor_concurrency=(global_executor_concurrency)LinkSet theglobal_executor_concurrency. This configuration value can only be used with the global thread pool async query executor.Source:show|on GitHub# File activerecord/lib/active_record.rb, line 291defself.global_executor_concurrency=(global_executor_concurrency)ifself.async_query_executor.nil?||self.async_query_executor==:multi_thread_poolraiseArgumentError,"`global_executor_concurrency` cannot be set when the executor is nil or set to `:multi_thread_pool`. For multiple thread pools, please set the concurrency in your database configuration."end@global_executor_concurrency=global_executor_concurrencyendlazily_load_schema_cacheLinkLazily load the schema cache. This option will load the schema cache when a connection is established rather than on boot.Source:show|on GitHub# File activerecord/lib/active_record.rb, line 188singleton_class.attr_accessor:lazily_load_schema_cachelegacy_connection_handling=(_)LinkSource:show|on GitHub# File activerecord/lib/active_record.rb, line 256defself.legacy_connection_handling=(_)raiseArgumentError,<<~MSG.squishThe `legacy_connection_handling` setter was deprecated in 7.0 and removed in 7.1,
      but is still defined in your configuration. Please remove this call as it no longer
      has any effect."MSGendmarshalling_format_version()LinkSource:show|on GitHub# File activerecord/lib/active_record.rb, line 493defself.marshalling_format_versionMarshalling.format_versionendmarshalling_format_version=(value)LinkSource:show|on GitHub# File activerecord/lib/active_record.rb, line 497defself.marshalling_format_version=(value)Marshalling.format_version=valueendmigration_strategyLinkSpecify strategy to use for executing migrations.Source:show|on GitHub# File activerecord/lib/active_record.rb, line 416singleton_class.attr_accessor:migration_strategypermanent_connection_checkout=(value)LinkDefines whetherActiveRecord::Base.connectionis allowed, deprecated, or entirely disallowed.Source:show|on GitHub# File activerecord/lib/active_record.rb, line 307defself.permanent_connection_checkout=(value)unless[true,:deprecated,:disallowed].include?(value)raiseArgumentError,"permanent_connection_checkout must be one of: `true`, `:deprecated` or `:disallowed`"end@permanent_connection_checkout=valueendprotocol_adaptersLinkProvides a mapping between database protocols/DBMSs and the underlying database adapter to be used. This is used only by theDATABASE_URLenvironment variable.ExampleDATABASE_URL="mysql://myuser:mypass@localhost/somedatabase"The above URL specifies that MySQL is the desired protocol/DBMS, and the application configuration can then decide which adapter to use. For this example the default mapping is frommysqltomysql2, but:trilogyis also supported.ActiveRecord.protocol_adapters.mysql = "mysql2"The protocols names are arbitrary, and external database adapters can be registered and set here.Source:show|on GitHub# File activerecord/lib/active_record.rb, line 520singleton_class.attr_accessor:protocol_adaptersqueuesLinkSpecifies the names of the queues used by background jobs.Source:show|on GitHub# File activerecord/lib/active_record.rb, line 329singleton_class.attr_accessor:queuesraise_int_wider_than_64bitLinkApplication configurable boolean that denotes whether or not to raise an exception when the PostgreSQLAdapter is provided with an integer that is wider than signed 64bit representationSource:show|on GitHub# File activerecord/lib/active_record.rb, line 476singleton_class.attr_accessor:raise_int_wider_than_64bitschema_cache_ignored_tablesLinkA list of tables or regexâs to match tables to ignore when dumping the schema cache. For example if this is set to +[/^_/]+ the schema cache will not dump tables named with an underscore.Source:show|on GitHub# File activerecord/lib/active_record.rb, line 196singleton_class.attr_accessor:schema_cache_ignored_tablesschema_formatLinkSpecifies the format to use when dumping the database schema with Railsâ Rakefile. If :sql, the schema is dumped as (potentially database- specific) SQL statements. If :ruby, the schema is dumped as anActiveRecord::Schemafile which can be loaded into any database that supports migrations. Use :ruby if you want to have different database adapters for, e.g., your development and test environments.Source:show|on GitHub# File activerecord/lib/active_record.rb, line 388singleton_class.attr_accessor:schema_formattimestamped_migrationsLinkSpecify whether or not to use timestamps for migration versionsSource:show|on GitHub# File activerecord/lib/active_record.rb, line 402singleton_class.attr_accessor:timestamped_migrationsuse_yaml_unsafe_loadLinkApplication configurable boolean that instructs the YAML Coder to use an unsafe load if set to true.Source:show|on GitHub# File activerecord/lib/active_record.rb, line 468singleton_class.attr_accessor:use_yaml_unsafe_loadvalidate_migration_timestampsLinkSpecify whether or not to validate migration timestamps. When set, an error will be raised if a timestamp is more than a day ahead of the timestamp associated with the current time.timestamped_migrationsmust be set to true.Source:show|on GitHub# File activerecord/lib/active_record.rb, line 410singleton_class.attr_accessor:validate_migration_timestampsverbose_query_logsLinkSpecifies if the methods calling database queries should be logged below their relevant queries. Defaults to false.Source:show|on GitHub# File activerecord/lib/active_record.rb, line 322singleton_class.attr_accessor:verbose_query_logsverify_foreign_keys_for_fixturesLinkIf true,Railswill verify all foreign keys in the database after loading fixtures. An error will be raised if there are any foreign key violations, indicating incorrectly written fixtures. Supported by PostgreSQL and SQLite.Source:show|on GitHub# File activerecord/lib/active_record.rb, line 444singleton_class.attr_accessor:verify_foreign_keys_for_fixturesversion()LinkReturns the currently loaded version of Active Record as aGem::Version.Source:show|on GitHub# File activerecord/lib/active_record/version.rb, line 7defself.versiongem_versionendwarn_on_records_fetched_greater_thanLinkSpecify a threshold for the size of query result sets. If the number of records in the set exceeds the threshold, a warning is logged. This can be used to identify queries which load thousands of records and potentially cause memory bloat.Source:show|on GitHub# File activerecord/lib/active_record.rb, line 367singleton_class.attr_accessor:warn_on_records_fetched_greater_thanyaml_column_permitted_classesLinkApplication configurable array that provides additional permitted classes to Psych safe_load in the YAML CoderSource:show|on GitHub# File activerecord/lib/active_record.rb, line 483singleton_class.attr_accessor:yaml_column_permitted_classes