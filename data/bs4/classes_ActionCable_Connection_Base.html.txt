Action CableConnectionBaseFor every WebSocket connection the Action Cable server accepts, aConnectionobject will be instantiated. This instance becomes the parent of all of the channel subscriptions that are created from there on. Incoming messages are then routed to these channel subscriptions based on an identifier sent by the Action Cable consumer. TheConnectionitself does not deal with any specific application logic beyond authentication and authorization.Hereâs a basic example:module ApplicationCable
  class Connection < ActionCable::Connection::Base
    identified_by :current_user

    def connect
      self.current_user = find_verified_user
      logger.add_tags current_user.name
    end

    def disconnect
      # Any cleanup work needed when the cable connection is cut.
    end

    private
      def find_verified_user
        User.find_by_identity(cookies.encrypted[:identity_id]) ||
          reject_unauthorized_connection
      end
  end
endFirst, we declare that this connection can be identified by its current_user. This allows us to later be able to find all connections established for that current_user (and potentially disconnect them). You can declare as many identification indexes as you like. Declaring an identification means that an attr_accessor is automatically set for that key.Second, we rely on the fact that the WebSocket connection is established with the cookies from the domain being sent along. This makes it easy to use signed cookies that were set when logging in via a web interface to authorize the WebSocket connection.Finally, we add a tag to the connection-specific logger with the name of the current user to easily distinguish their messages in the log.Pretty simple, eh?MethodsBbeatCclose,cookiesHhandle_channel_commandNnewRrequestSsend_async,statisticsIncluded ModulesActionCable::Connection::IdentificationActionCable::Connection::InternalChannelActionCable::Connection::AuthorizationActionCable::Connection::CallbacksActiveSupport::RescuableAttributes[R]env[R]logger[R]protocol[R]server[R]subscriptions[R]worker_poolClass Public methodsnew(server, env, coder: ActiveSupport::JSON)LinkSource:show|on GitHub# File actioncable/lib/action_cable/connection/base.rb, line 67definitialize(server,env,coder:ActiveSupport::JSON)@server,@env,@coder=server,env,coder@worker_pool=server.worker_pool@logger=new_tagged_logger@websocket=ActionCable::Connection::WebSocket.new(env,self,event_loop)@subscriptions=ActionCable::Connection::Subscriptions.new(self)@message_buffer=ActionCable::Connection::MessageBuffer.new(self)@_internal_subscriptions=nil@started_at=Time.nowendInstance Public methodsbeat()LinkSource:show|on GitHub# File actioncable/lib/action_cable/connection/base.rb, line 147defbeattransmittype:ActionCable::INTERNAL[:message_types][:ping],message:Time.now.to_iendclose(reason: nil, reconnect: true)LinkClose the WebSocket connection.Source:show|on GitHub# File actioncable/lib/action_cable/connection/base.rb, line 120defclose(reason:nil,reconnect:true)transmit(type:ActionCable::INTERNAL[:message_types][:disconnect],reason:reason,reconnect:reconnect)websocket.closeendhandle_channel_command(payload)LinkSource:show|on GitHub# File actioncable/lib/action_cable/connection/base.rb, line 109defhandle_channel_command(payload)run_callbacks:commanddosubscriptions.execute_commandpayloadendendsend_async(method, *arguments)LinkInvoke a method on the connection asynchronously through the pool of thread workers.Source:show|on GitHub# File actioncable/lib/action_cable/connection/base.rb, line 131defsend_async(method,*arguments)worker_pool.async_invoke(self,method,*arguments)endstatistics()LinkReturn a basic hash of statistics for the connection keyed withidentifier,started_at,subscriptions, andrequest_id. This can be returned by a health check against the connection.Source:show|on GitHub# File actioncable/lib/action_cable/connection/base.rb, line 138defstatistics{identifier:connection_identifier,started_at:@started_at,subscriptions:subscriptions.identifiers,request_id:@env["action_dispatch.request_id"]
  }endInstance Private methodscookies()LinkThe cookies of the request that initiated the WebSocket connection. Useful for performing authorization checks.Source:show|on GitHub# File actioncable/lib/action_cable/connection/base.rb, line 187defcookies# :doc:request.cookie_jarendrequest()LinkThe request that initiated the WebSocket connection is available here. This gives access to the environment, cookies, etc.Source:show|on GitHub# File actioncable/lib/action_cable/connection/base.rb, line 178defrequest# :doc:@request||=beginenvironment=Rails.application.env_config.merge(env)ifdefined?(Rails.application)&&Rails.applicationActionDispatch::Request.new(environment||env)endend