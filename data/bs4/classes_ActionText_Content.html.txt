Action TextContentTheActionText::Contentclass wraps an HTML fragment to add support for parsing, rendering and serialization. It can be used to extract links and attachments, convert the fragment to plain text, or serialize the fragment to the database.TheActionText::RichTextrecord serializes thebodyattribute asActionText::Content.class Message < ActiveRecord::Base
  has_rich_text :content
end

message = Message.create!(content: "<h1>Funny times!</h1>")
body = message.content.body # => #<ActionText::Content "<div class=\"trix-conte...">
body.to_s # => "<h1>Funny times!</h1>"
body.to_plain_text # => "Funny times!"Methods#==Aappend_attachables,as_json,attachables,attachment_galleries,attachmentsFfragment_by_canonicalizing_contentGgallery_attachmentsIinspectLlinksNnewRrender_attachment_galleries,render_attachmentsTto_html,to_partial_path,to_plain_text,to_rendered_html_with_layout,to_s,to_trix_htmlAttributes[R]fragmentClass Public methodsfragment_by_canonicalizing_content(content)LinkSource:show|on GitHub# File actiontext/lib/action_text/content.rb, line 33deffragment_by_canonicalizing_content(content)fragment=ActionText::Attachment.fragment_by_canonicalizing_attachments(content)fragment=ActionText::AttachmentGallery.fragment_by_canonicalizing_attachment_galleries(fragment)fragmentendnew(content = nil, options = {})LinkSource:show|on GitHub# File actiontext/lib/action_text/content.rb, line 40definitialize(content=nil,options= {})options.with_defaults!canonicalize:trueifoptions[:canonicalize]@fragment=self.class.fragment_by_canonicalizing_content(content)else@fragment=ActionText::Fragment.wrap(content)endendInstance Public methods==(other)LinkSource:show|on GitHub# File actiontext/lib/action_text/content.rb, line 169def==(other)ifself.class==other.classto_html==other.to_htmlelsifother.is_a?(self.class)to_s==other.to_sendendappend_attachables(attachables)LinkSource:show|on GitHub# File actiontext/lib/action_text/content.rb, line 93defappend_attachables(attachables)attachments=ActionText::Attachment.from_attachables(attachables)self.class.new([self.to_s.presence,*attachments].compact.join("\n"))endas_json(*)LinkSource:show|on GitHub# File actiontext/lib/action_text/content.rb, line 161defas_json(*)to_htmlendattachables()LinkExtracts +ActionText::Attachable+s from the HTML fragment:attachable = ActiveStorage::Blob.first
html = %Q(<action-text-attachment sgid="#{attachable.attachable_sgid}" caption="Captioned"></action-text-attachment>)
content = ActionText::Content.new(html)
content.attachables # => [attachable]Source:show|on GitHub# File actiontext/lib/action_text/content.rb, line 87defattachables@attachables||=attachment_nodes.mapdo|node|ActionText::Attachable.from_node(node)endendattachment_galleries()LinkSource:show|on GitHub# File actiontext/lib/action_text/content.rb, line 71defattachment_galleries@attachment_galleries||=attachment_gallery_nodes.mapdo|node|attachment_gallery_for_node(node)endendattachments()LinkExtracts +ActionText::Attachment+s from the HTML fragment:attachable = ActiveStorage::Blob.first
html = %Q(<action-text-attachment sgid="#{attachable.attachable_sgid}" caption="Captioned"></action-text-attachment>)
content = ActionText::Content.new(html)
content.attachments # => [#<ActionText::Attachment attachable=#<ActiveStorage::Blob...Source:show|on GitHub# File actiontext/lib/action_text/content.rb, line 65defattachments@attachments||=attachment_nodes.mapdo|node|attachment_for_node(node)endendgallery_attachments()LinkSource:show|on GitHub# File actiontext/lib/action_text/content.rb, line 77defgallery_attachments@gallery_attachments||=attachment_galleries.flat_map(&:attachments)endinspect()LinkSource:show|on GitHub# File actiontext/lib/action_text/content.rb, line 165definspect"#<#{self.class.name} #{to_html.truncate(25).inspect}>"endlinks()LinkExtracts links from the HTML fragment:html = '<a href="http://example.com/">Example</a>'
content = ActionText::Content.new(html)
content.links # => ["http://example.com/"]Source:show|on GitHub# File actiontext/lib/action_text/content.rb, line 55deflinks@links||=fragment.find_all("a[href]").map{|a|a["href"] }.uniqendrender_attachment_galleries(&block)LinkSource:show|on GitHub# File actiontext/lib/action_text/content.rb, line 109defrender_attachment_galleries(&block)content=ActionText::AttachmentGallery.fragment_by_replacing_attachment_gallery_nodes(fragment)do|node|block.call(attachment_gallery_for_node(node))endself.class.new(content,canonicalize:false)endrender_attachments(**options, &block)LinkSource:show|on GitHub# File actiontext/lib/action_text/content.rb, line 98defrender_attachments(**options,&block)content=fragment.replace(ActionText::Attachment.tag_name)do|node|ifnode.key?("content")sanitized_content=sanitize_content_attachment(node.remove_attribute("content").to_s)node["content"] =sanitized_contentifsanitized_content.present?endblock.call(attachment_for_node(node,**options))endself.class.new(content,canonicalize:false)endto_html()LinkSource:show|on GitHub# File actiontext/lib/action_text/content.rb, line 138defto_htmlfragment.to_htmlendto_partial_path()LinkSource:show|on GitHub# File actiontext/lib/action_text/content.rb, line 146defto_partial_path"action_text/contents/content"endto_plain_text()LinkReturns a plain-text version of the markup contained by the content, with tags removed but HTML entities encoded.content = ActionText::Content.new("<h1>Funny times!</h1>")
content.to_plain_text # => "Funny times!"

content = ActionText::Content.new("<div onclick='action()'>safe<script>unsafe</script></div>")
content.to_plain_text # => "safeunsafe"NOTE: that the returned string is not HTML safe and should not be rendered in browsers.content = ActionText::Content.new("&lt;script&gt;alert()&lt;/script&gt;")
content.to_plain_text # => "<script>alert()</script>"Source:show|on GitHub# File actiontext/lib/action_text/content.rb, line 130defto_plain_textrender_attachments(with_full_attributes:false,&:to_plain_text).fragment.to_plain_textendto_rendered_html_with_layout()LinkSource:show|on GitHub# File actiontext/lib/action_text/content.rb, line 142defto_rendered_html_with_layoutrenderlayout:"action_text/contents/content",partial:to_partial_path,formats::html,locals:{content:self}endto_s()LinkSafely transformsContentinto an HTMLString.content = ActionText::Content.new(content: "<h1>Funny times!</h1>")
content.to_s # => "<h1>Funny times!</h1>"

content = ActionText::Content.new("<div onclick='action()'>safe<script>unsafe</script></div>")
content.to_s # => "<div>safeunsafe</div>"Source:show|on GitHub# File actiontext/lib/action_text/content.rb, line 157defto_sto_rendered_html_with_layoutendto_trix_html()LinkSource:show|on GitHub# File actiontext/lib/action_text/content.rb, line 134defto_trix_htmlrender_attachments(&:to_trix_attachment).to_htmlend