Action View URL HelpersProvides a set of methods for making links and getting URLs that depend on the routing subsystem (seeActionDispatch::Routing). This allows you to use the same format for links in views and controllers.NamespaceMODULEActionView::Helpers::UrlHelper::ClassMethodsMethodsBbutton_toCcurrent_page?Llink_to,link_to_if,link_to_unless,link_to_unless_currentMmail_toPphone_toSsms_toIncluded ModulesActionView::Helpers::TagHelperActionView::Helpers::ContentExfiltrationPreventionHelperConstantsBUTTON_TAG_METHOD_VERBS=%w{patch put delete}This helper may be included in any class that includes the URL helpers of a routes (routes.url_helpers). Some methods provided here will only work in the context of a request (link_to_unless_current, for instance), which must be provided as a method called request on the context.STRINGIFIED_COMMON_METHODS={
get:    "get",
delete: "delete",
patch:  "patch",
post:   "post",
put:    "put",
}.freezeInstance Public methodsbutton_to(name = nil, options = nil, html_options = nil, &block)LinkGenerates a form containing a single button that submits to the URL created by the set ofoptions. This is the safest method to ensure links that cause changes to your data are not triggered by search bots or accelerators.You can control the form and button behavior withhtml_options. Most values inhtml_optionsare passed through to the button element. For example, passing a:classoption withinhtml_optionswill set the class attribute of the button element.The class attribute of the form element can be set by passing a:form_classoption withinhtml_options. It defaults to"button_to"to allow styling of the form and its children.The form submits a POST request by default if the object is not persisted; conversely, if the object is persisted, it will submit a PATCH request. To specify a different HTTP verb use the:methodoption withinhtml_options.If the HTML button generated frombutton_todoes not work with your layout, you can consider using thelink_tomethod with thedata-turbo-methodattribute as described in thelink_todocumentation.OptionsTheoptionshash accepts the same options asurl_for. To generate a<form>element without an[action]attribute, passfalse:<%= button_to "New", false %>
# => "<form method="post" class="button_to">
#      <button type="submit">New</button>
#      <input name="authenticity_token" type="hidden" value="10f2163b45388899ad4d5ae948988266befcb6c3d1b2451cf657a0c293d605a6"/>
#    </form>"Most values inhtml_optionsare passed through to the button element, but there are a few special options::method- Symbol of HTTP verb. Supported verbs are:post,:get,:delete,:patch, and:put. By default it will be:post.:disabled- If set to true, it will generate a disabled button.:data- This option can be used to add custom data attributes.:form- This hash will be form attributes:form_class- This controls the class of the form within which the submit button will be placed:params- Hash of parameters to be rendered as hidden fields within the form.Examples<%= button_to "New", action: "new" %>
# => "<form method="post" action="/controller/new" class="button_to">
#      <button type="submit">New</button>
#      <input name="authenticity_token" type="hidden" value="10f2163b45388899ad4d5ae948988266befcb6c3d1b2451cf657a0c293d605a6" autocomplete="off"/>
#    </form>"

<%= button_to "New", new_article_path %>
# => "<form method="post" action="/articles/new" class="button_to">
#      <button type="submit">New</button>
#      <input name="authenticity_token" type="hidden" value="10f2163b45388899ad4d5ae948988266befcb6c3d1b2451cf657a0c293d605a6" autocomplete="off"/>
#    </form>"

<%= button_to "New", new_article_path, params: { time: Time.now  } %>
# => "<form method="post" action="/articles/new" class="button_to">
#      <button type="submit">New</button>
#      <input name="authenticity_token" type="hidden" value="10f2163b45388899ad4d5ae948988266befcb6c3d1b2451cf657a0c293d605a6"/>
#      <input type="hidden" name="time" value="2021-04-08 14:06:09 -0500" autocomplete="off">
#    </form>"

<%= button_to [:make_happy, @user] do %>
  Make happy <strong><%= @user.name %></strong>
<% end %>
# => "<form method="post" action="/users/1/make_happy" class="button_to">
#      <button type="submit">
#        Make happy <strong><%= @user.name %></strong>
#      </button>
#      <input name="authenticity_token" type="hidden" value="10f2163b45388899ad4d5ae948988266befcb6c3d1b2451cf657a0c293d605a6"  autocomplete="off"/>
#    </form>"

<%= button_to "New", { action: "new" }, form_class: "new-thing" %>
# => "<form method="post" action="/controller/new" class="new-thing">
#      <button type="submit">New</button>
#      <input name="authenticity_token" type="hidden" value="10f2163b45388899ad4d5ae948988266befcb6c3d1b2451cf657a0c293d605a6"  autocomplete="off"/>
#    </form>"

<%= button_to "Create", { action: "create" }, form: { "data-type" => "json" } %>
# => "<form method="post" action="/images/create" class="button_to" data-type="json">
#      <button type="submit">Create</button>
#      <input name="authenticity_token" type="hidden" value="10f2163b45388899ad4d5ae948988266befcb6c3d1b2451cf657a0c293d605a6"  autocomplete="off"/>
#    </form>"Source:show|on GitHub# File actionview/lib/action_view/helpers/url_helper.rb, line 296defbutton_to(name=nil,options=nil,html_options=nil,&block)html_options,options=options,nameifblock_given?html_options||={}html_options=html_options.stringify_keysurl=caseoptionswhenFalseClassthennilelseurl_for(options)endremote=html_options.delete("remote")params=html_options.delete("params")authenticity_token=html_options.delete("authenticity_token")method= (html_options.delete("method").presence||method_for_options(options)).to_smethod_tag=BUTTON_TAG_METHOD_VERBS.include?(method)?method_tag(method):"".html_safeform_method=method=="get"?"get":"post"form_options=html_options.delete("form")||{}form_options[:class]||=html_options.delete("form_class")||"button_to"form_options[:method] =form_methodform_options[:action] =urlform_options[:'data-remote'] =trueifremoterequest_token_tag=ifform_method=="post"request_method=method.empty??"post":methodtoken_tag(authenticity_token,form_options:{action:url,method:request_method})else""endhtml_options=convert_options_to_data_attributes(options,html_options)html_options["type"] ="submit"button=ifblock_given?content_tag("button",html_options,&block)elsifbutton_to_generates_button_tagcontent_tag("button",name||url,html_options,&block)elsehtml_options["value"] =name||urltag("input",html_options)endinner_tags=method_tag.safe_concat(button).safe_concat(request_token_tag)ifparamsto_form_params(params).eachdo|param|inner_tags.safe_concattag(:input,type:"hidden",name:param[:name],value:param[:value],autocomplete:"off")endendhtml=content_tag("form",inner_tags,form_options)prevent_content_exfiltration(html)endcurrent_page?(options = nil, check_parameters: false, **options_as_kwargs)LinkTrue if the current request URI was generated by the givenoptions.ExamplesLetâs say weâre in thehttp://www.example.com/shop/checkout?order=desc&page=1action.current_page?(action: 'process')
# => false

current_page?(action: 'checkout')
# => true

current_page?(controller: 'library', action: 'checkout')
# => false

current_page?(controller: 'shop', action: 'checkout')
# => true

current_page?(controller: 'shop', action: 'checkout', order: 'asc')
# => false

current_page?(controller: 'shop', action: 'checkout', order: 'desc', page: '1')
# => true

current_page?(controller: 'shop', action: 'checkout', order: 'desc', page: '2')
# => false

current_page?('http://www.example.com/shop/checkout')
# => true

current_page?('http://www.example.com/shop/checkout', check_parameters: true)
# => false

current_page?('/shop/checkout')
# => true

current_page?('http://www.example.com/shop/checkout?order=desc&page=1')
# => trueLetâs say weâre in thehttp://www.example.com/productsaction with method POST in case of invalid product.current_page?(controller: 'product', action: 'index')
# => falseWe can also pass in the symbol arguments instead of strings.Source:show|on GitHub# File actionview/lib/action_view/helpers/url_helper.rb, line 548defcurrent_page?(options=nil,check_parameters:false,**options_as_kwargs)unlessrequestraise"You cannot use helpers that need to determine the current "\"page unless your view context provides a Request object "\"in a #request method"endreturnfalseunlessrequest.get?||request.head?options||=options_as_kwargscheck_parameters||=options.is_a?(Hash)&&options.delete(:check_parameters)url_string=URI::DEFAULT_PARSER.unescape(url_for(options)).force_encoding(Encoding::BINARY)# We ignore any extra parameters in the request_uri if the# submitted URL doesn't have any either. This lets the function# work with things like ?order=asc# the behavior can be disabled with check_parameters: truerequest_uri=url_string.index("?")||check_parameters?request.fullpath:request.pathrequest_uri=URI::DEFAULT_PARSER.unescape(request_uri).force_encoding(Encoding::BINARY)if%r{^\w+://}.match?(url_string)request_uri=+"#{request.protocol}#{request.host_with_port}#{request_uri}"endremove_trailing_slash!(url_string)remove_trailing_slash!(request_uri)url_string==request_uriendlink_to(name = nil, options = nil, html_options = nil, &block)LinkCreates an anchor element of the givennameusing a URL created by the set ofoptions. See the valid options in the documentation forurl_for. Itâs also possible to pass a String instead of an options hash, which generates an anchor element that uses the value of the String as the href for the link. Using a:backSymbol instead of an options hash will generate a link to the referrer (a JavaScript back link will be used in place of a referrer if none exists). Ifnilis passed as the name the value of the link itself will become the name.Signatureslink_to(body, url, html_options = {})
  # url is a String; you can use URL helpers like
  # posts_path

link_to(body, url_options = {}, html_options = {})
  # url_options, except :method, is passed to url_for

link_to(options = {}, html_options = {}) do
  # name
end

link_to(url, html_options = {}) do
  # name
end

link_to(active_record_model)Options:data- This option can be used to add custom data attributes.ExamplesBecause it relies onurl_for,link_tosupports both older-style controller/action/id arguments and newer RESTful routes. Current Rails style favors RESTful routes whenever possible, so base your application on resources and uselink_to "Profile", profile_path(@profile)
# => <a href="/profiles/1">Profile</a>or the even pithierlink_to "Profile", @profile
# => <a href="/profiles/1">Profile</a>in place of the older more verbose, non-resource-orientedlink_to "Profile", controller: "profiles", action: "show", id: @profile
# => <a href="/profiles/show/1">Profile</a>Similarly,link_to "Profiles", profiles_path
# => <a href="/profiles">Profiles</a>is better thanlink_to "Profiles", controller: "profiles"
# => <a href="/profiles">Profiles</a>When name isnilthe href is presented insteadlink_to nil, "http://example.com"
# => <a href="http://www.example.com">http://www.example.com</a>More concise yet, whennameis an Active Record model that defines ato_smethod returning a default value or a model instance attributelink_to @profile
# => <a href="http://www.example.com/profiles/1">Eileen</a>You can use a block as well if your link target is hard to fit into the name parameter.ERBexample:<%= link_to(@profile) do %>
  <strong><%= @profile.name %></strong> -- <span>Check it out!</span>
<% end %>
# => <a href="/profiles/1">
       <strong>David</strong> -- <span>Check it out!</span>
     </a>Classes and ids for CSS are easy to produce:link_to "Articles", articles_path, id: "news", class: "article"
# => <a href="/articles" class="article" id="news">Articles</a>Be careful when using the older argument style, as an extra literal hash is needed:link_to "Articles", { controller: "articles" }, id: "news", class: "article"
# => <a href="/articles" class="article" id="news">Articles</a>Leaving the hash off gives the wrong link:link_to "WRONG!", controller: "articles", id: "news", class: "article"
# => <a href="/articles/index/news?class=article">WRONG!</a>link_tocan also produce links with anchors or query strings:link_to "Comment wall", profile_path(@profile, anchor: "wall")
# => <a href="/profiles/1#wall">Comment wall</a>

link_to "Ruby on Rails search", controller: "searches", query: "ruby on rails"
# => <a href="/searches?query=ruby+on+rails">Ruby on Rails search</a>

link_to "Nonsense search", searches_path(foo: "bar", baz: "quux")
# => <a href="/searches?foo=bar&baz=quux">Nonsense search</a>You can set any link attributes such astarget,rel,type:link_to "External link", "http://www.rubyonrails.org/", target: "_blank", rel: "nofollow"
# => <a href="http://www.rubyonrails.org/" target="_blank" rel="nofollow">External link</a>TurboRails7 ships with Turbo enabled by default. Turbo provides the following:dataoptions:turbo_method: symbol of HTTP verb- Performs a Turbo link visit with the given HTTP verb. Forms are recommended when performing non-GETrequests. Only usedata-turbo-methodwhere a form is not possible.turbo_confirm: "question?"- Adds a confirmation dialog to the link with the given value.Consult the Turbo Handbook for more information on the options above.Exampleslink_to "Delete profile", @profile, data: { turbo_method: :delete }
# => <a href="/profiles/1" data-turbo-method="delete">Delete profile</a>

link_to "Visit Other Site", "https://rubyonrails.org/", data: { turbo_confirm: "Are you sure?" }
# => <a href="https://rubyonrails.org/" data-turbo-confirm="Are you sure?">Visit Other Site</a>Source:show|on GitHub# File actionview/lib/action_view/helpers/url_helper.rb, line 198deflink_to(name=nil,options=nil,html_options=nil,&block)html_options,options,name=options,name,blockifblock_given?options||={}html_options=convert_options_to_data_attributes(options,html_options)url=url_target(name,options)html_options["href"]||=urlcontent_tag("a",name||url,html_options,&block)endlink_to_if(condition, name, options = {}, html_options = {}, &block)LinkCreates a link tag of the givennameusing a URL created by the set ofoptionsifconditionis true, otherwise only the name is returned. To specialize the default behavior, you can pass a block that accepts the name or the full argument list forlink_to_if.Examples<%= link_to_if(@current_user.nil?, "Login", { controller: "sessions", action: "new" }) %>
# If the user isn't logged in...
# => <a href="/sessions/new/">Login</a>

<%=
   link_to_if(@current_user.nil?, "Login", { controller: "sessions", action: "new" }) do
     link_to(@current_user.login, { controller: "accounts", action: "show", id: @current_user })
   end
%>
# If the user isn't logged in...
# => <a href="/sessions/new/">Login</a>
# If they are logged in...
# => <a href="/accounts/show/3">my_username</a>Source:show|on GitHub# File actionview/lib/action_view/helpers/url_helper.rb, line 437deflink_to_if(condition,name,options= {},html_options= {},&block)ifconditionlink_to(name,options,html_options)elseifblock_given?block.arity<=1?capture(name,&block):capture(name,options,html_options,&block)elseERB::Util.html_escape(name)endendendlink_to_unless(condition, name, options = {}, html_options = {}, &block)LinkCreates a link tag of the givennameusing a URL created by the set ofoptionsunlessconditionis true, in which case only the name is returned. To specialize the default behavior (i.e., show a login link rather than just the plaintext link text), you can pass a block that accepts the name or the full argument list forlink_to_unless.Examples<%= link_to_unless(@current_user.nil?, "Reply", { action: "reply" }) %>
# If the user is logged in...
# => <a href="/controller/reply/">Reply</a>

<%=
   link_to_unless(@current_user.nil?, "Reply", { action: "reply" }) do |name|
     link_to(name, { controller: "accounts", action: "signup" })
   end
%>
# If the user is logged in...
# => <a href="/controller/reply/">Reply</a>
# If not...
# => <a href="/accounts/signup">Reply</a>Source:show|on GitHub# File actionview/lib/action_view/helpers/url_helper.rb, line 414deflink_to_unless(condition,name,options= {},html_options= {},&block)link_to_if!condition,name,options,html_options,&blockendlink_to_unless_current(name, options = {}, html_options = {}, &block)LinkCreates a link tag of the givennameusing a URL created by the set ofoptionsunless the current request URI is the same as the links, in which case only the name is returned (or the given block is yielded, if one exists). You can givelink_to_unless_currenta block which will specialize the default behavior (e.g., show a âStart Hereâ link rather than the linkâs text).ExamplesLetâs say you have a navigation menuâ¦<ul id="navbar">
  <li><%= link_to_unless_current("Home", { action: "index" }) %></li>
  <li><%= link_to_unless_current("About Us", { action: "about" }) %></li>
</ul>If in the âaboutâ action, it will renderâ¦<ul id="navbar">
  <li><a href="/controller/index">Home</a></li>
  <li>About Us</li>
</ul>â¦but if in the âindexâ action, it will render:<ul id="navbar">
  <li>Home</li>
  <li><a href="/controller/about">About Us</a></li>
</ul>The implicit block given tolink_to_unless_currentis evaluated if the current action is the action given. So, if we had a comments page and wanted to render a âGo Backâ link instead of a link to the comments page, we could do something like thisâ¦<%=
    link_to_unless_current("Comment", { controller: "comments", action: "new" }) do
       link_to("Go back", { controller: "posts", action: "index" })
    end
 %>Source:show|on GitHub# File actionview/lib/action_view/helpers/url_helper.rb, line 390deflink_to_unless_current(name,options= {},html_options= {},&block)link_to_unlesscurrent_page?(options),name,options,html_options,&blockendmail_to(email_address, name = nil, html_options = {}, &block)LinkCreates a mailto link tag to the specifiedemail_address, which is also used as the name of the link unlessnameis specified. Additional HTML attributes for the link can be passed inhtml_options.mail_tohas several methods for customizing the email itself by passing special keys tohtml_options.Options:subject- Preset the subject line of the email.:body- Preset the body of the email.:cc- Carbon Copy additional recipients on the email.:bcc- Blind Carbon Copy additional recipients on the email.:reply_to- Preset theReply-Tofield of the email.ObfuscationPrior to Rails 4.0,mail_toprovided options for encoding the address in order to hinder email harvesters.  To take advantage of these options, install theactionview-encoded_mail_togem.Examplesmail_to "me@domain.com"
# => <a href="mailto:me@domain.com">me@domain.com</a>

mail_to "me@domain.com", "My email"
# => <a href="mailto:me@domain.com">My email</a>

mail_to "me@domain.com", cc: "ccaddress@domain.com",
         subject: "This is an example email"
# => <a href="mailto:me@domain.com?cc=ccaddress@domain.com&subject=This%20is%20an%20example%20email">me@domain.com</a>You can use a block as well if your link target is hard to fit into the name parameter.ERBexample:<%= mail_to "me@domain.com" do %>
  <strong>Email me:</strong> <span>me@domain.com</span>
<% end %>
# => <a href="mailto:me@domain.com">
       <strong>Email me:</strong> <span>me@domain.com</span>
     </a>Source:show|on GitHub# File actionview/lib/action_view/helpers/url_helper.rb, line 487defmail_to(email_address,name=nil,html_options= {},&block)html_options,name=name,nilifname.is_a?(Hash)html_options= (html_options||{}).stringify_keysextras=%w{ cc bcc body subject reply_to }.map!{|item|option=html_options.delete(item).presence||next"#{item.dasherize}=#{ERB::Util.url_encode(option)}"}.compactextras=extras.empty??"":"?"+extras.join("&")encoded_email_address=ERB::Util.url_encode(email_address).gsub("%40","@")html_options["href"] ="mailto:#{encoded_email_address}#{extras}"content_tag("a",name||email_address,html_options,&block)endphone_to(phone_number, name = nil, html_options = {}, &block)LinkCreates a TEL anchor link tag to the specifiedphone_number. When the link is clicked, the default app to make phone calls is opened and prepopulated with the phone number.Ifnameis not specified,phone_numberwill be used as the name of the link.Acountry_codeoption is supported, which prepends a plus sign and the given country code to the linked phone number. For example,country_code: "01"will prepend+01to the linked phone number.Additional HTML attributes for the link can be passed viahtml_options.Options:country_code- Prepends the country code to the phone numberExamplesphone_to "1234567890"
# => <a href="tel:1234567890">1234567890</a>

phone_to "1234567890", "Phone me"
# => <a href="tel:1234567890">Phone me</a>

phone_to "1234567890", country_code: "01"
# => <a href="tel:+011234567890">1234567890</a>You can use a block as well if your link target is hard to fit into the name parameter. ERB example:<%= phone_to "1234567890" do %>
  <strong>Phone me:</strong>
<% end %>
# => <a href="tel:1234567890">
       <strong>Phone me:</strong>
     </a>Source:show|on GitHub# File actionview/lib/action_view/helpers/url_helper.rb, line 669defphone_to(phone_number,name=nil,html_options= {},&block)html_options,name=name,nilifname.is_a?(Hash)html_options= (html_options||{}).stringify_keyscountry_code=html_options.delete("country_code").presencecountry_code=country_code.nil??"":"+#{ERB::Util.url_encode(country_code)}"encoded_phone_number=ERB::Util.url_encode(phone_number)html_options["href"] ="tel:#{country_code}#{encoded_phone_number}"content_tag("a",name||phone_number,html_options,&block)endsms_to(phone_number, name = nil, html_options = {}, &block)LinkCreates an SMS anchor link tag to the specifiedphone_number. When the link is clicked, the default SMS messaging app is opened ready to send a message to the linked phone number. If thebodyoption is specified, the contents of the message will be preset tobody.Ifnameis not specified,phone_numberwill be used as the name of the link.Acountry_codeoption is supported, which prepends a plus sign and the given country code to the linked phone number. For example,country_code: "01"will prepend+01to the linked phone number.Additional HTML attributes for the link can be passed viahtml_options.Options:country_code- Prepend the country code to the phone number.:body- Preset the body of the message.Examplessms_to "5155555785"
# => <a href="sms:5155555785;">5155555785</a>

sms_to "5155555785", country_code: "01"
# => <a href="sms:+015155555785;">5155555785</a>

sms_to "5155555785", "Text me"
# => <a href="sms:5155555785;">Text me</a>

sms_to "5155555785", body: "I have a question about your product."
# => <a href="sms:5155555785;?body=I%20have%20a%20question%20about%20your%20product">5155555785</a>You can use a block as well if your link target is hard to fit into the name parameter. ERB example:<%= sms_to "5155555785" do %>
  <strong>Text me:</strong>
<% end %>
# => <a href="sms:5155555785;">
       <strong>Text me:</strong>
     </a>Source:show|on GitHub# File actionview/lib/action_view/helpers/url_helper.rb, line 618defsms_to(phone_number,name=nil,html_options= {},&block)html_options,name=name,nilifname.is_a?(Hash)html_options= (html_options||{}).stringify_keyscountry_code=html_options.delete("country_code").presencecountry_code=country_code?"+#{ERB::Util.url_encode(country_code)}":""body=html_options.delete("body").presencebody=body?"?&body=#{ERB::Util.url_encode(body)}":""encoded_phone_number=ERB::Util.url_encode(phone_number)html_options["href"] ="sms:#{country_code}#{encoded_phone_number};#{body}"content_tag("a",name||phone_number,html_options,&block)end