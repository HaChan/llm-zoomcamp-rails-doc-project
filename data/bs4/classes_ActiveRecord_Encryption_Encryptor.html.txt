An encryptor exposes the encryption API thatActiveRecord::Encryption::EncryptedAttributeTypeuses for encrypting and decrypting attribute values.It interacts with aKeyProviderfor getting the keys, and delegate toActiveRecord::Encryption::Cipherthe actual encryption algorithm.MethodsBbinary?DdecryptEencrypt,encrypted?NnewConstantsDECRYPT_ERRORS=[OpenSSL::Cipher::CipherError, Errors::EncryptedContentIntegrity, Errors::Decryption]ENCODING_ERRORS=[EncodingError, Errors::Encoding]THRESHOLD_TO_JUSTIFY_COMPRESSION=140.bytesClass Public methodsnew(compress: true)LinkOptions:compress- Boolean indicating whether records should be compressed before encryption. Defaults totrue.Source:show|on GitHub# File activerecord/lib/active_record/encryption/encryptor.rb, line 19definitialize(compress:true)@compress=compressendInstance Public methodsbinary?()LinkSource:show|on GitHub# File activerecord/lib/active_record/encryption/encryptor.rb, line 77defbinary?serializer.binary?enddecrypt(encrypted_text, key_provider: default_key_provider, cipher_options: {})LinkDecrypts anencrypted_textand returns the result as clean textOptions:key_providerKeyprovider to use for the encryption operation. It will default toActiveRecord::Encryption.key_providerwhen not provided:cipher_optionsCipher-specific options that will be passed to theCipherconfigured inActiveRecord::Encryption.cipherSource:show|on GitHub# File activerecord/lib/active_record/encryption/encryptor.rb, line 60defdecrypt(encrypted_text,key_provider:default_key_provider,cipher_options:{})message=deserialize_message(encrypted_text)keys=key_provider.decryption_keys(message)raiseErrors::Decryptionunlesskeys.present?uncompress_if_needed(cipher.decrypt(message,key:keys.collect(&:secret),**cipher_options),message.headers.compressed)rescue*(ENCODING_ERRORS+DECRYPT_ERRORS)raiseErrors::Decryptionendencrypt(clear_text, key_provider: default_key_provider, cipher_options: {})LinkEncryptsclean_textand returns the encrypted resultInternally, it will:Create a newActiveRecord::Encryption::MessageCompress and encryptclean_textas the message payloadSerialize it withActiveRecord::Encryption.message_serializer(ActiveRecord::Encryption::SafeMarshalby default)Encode the result withBase64Options:key_providerKeyprovider to use for the encryption operation. It will default toActiveRecord::Encryption.key_providerwhen not provided.:cipher_optionsCipher-specific options that will be passed to theCipherconfigured inActiveRecord::Encryption.cipherSource:show|on GitHub# File activerecord/lib/active_record/encryption/encryptor.rb, line 42defencrypt(clear_text,key_provider:default_key_provider,cipher_options:{})clear_text=force_encoding_if_needed(clear_text)ifcipher_options[:deterministic]validate_payload_type(clear_text)serialize_messagebuild_encrypted_message(clear_text,key_provider:key_provider,cipher_options:cipher_options)endencrypted?(text)LinkReturns whether the text is encrypted or notSource:show|on GitHub# File activerecord/lib/active_record/encryption/encryptor.rb, line 70defencrypted?(text)deserialize_message(text)truerescueErrors::Encoding,*DECRYPT_ERRORSfalseend