NamespaceMODULEActiveRecord::Integration::ClassMethodsMethodsCcache_key,cache_key_with_version,cache_timestamp_format,cache_version,cache_versioning,collection_cache_versioningTto_paramClass Public methodscache_timestamp_formatLinkIndicates the format used to generate the timestamp in the cache key, if versioning is off. Accepts any of the symbols inTime::DATE_FORMATS.This is:usec, by default.Source:show|on GitHub# File activerecord/lib/active_record/integration.rb, line 16class_attribute:cache_timestamp_format,instance_writer:false,default::useccache_versioningLinkIndicates whether to use a stablecache_keymethod that is accompanied by a changing version in thecache_versionmethod.This istrue, by default on Rails 5.2 and above.Source:show|on GitHub# File activerecord/lib/active_record/integration.rb, line 24class_attribute:cache_versioning,instance_writer:false,default:falsecollection_cache_versioningLinkIndicates whether to use a stablecache_keymethod that is accompanied by a changing version in thecache_versionmethod on collections.This isfalse, by default until Rails 6.1.Source:show|on GitHub# File activerecord/lib/active_record/integration.rb, line 32class_attribute:collection_cache_versioning,instance_writer:false,default:falseInstance Public methodscache_key()LinkReturns a stable cache key that can be used to identify this record.Product.new.cache_key     # => "products/new"
Product.find(5).cache_key # => "products/5"IfActiveRecord::Base.cache_versioningis turned off, as it was in Rails 5.1 and earlier, the cache key will also include a version.Product.cache_versioning = false
Product.find(5).cache_key  # => "products/5-20071224150000" (updated_at available)Source:show|on GitHub# File activerecord/lib/active_record/integration.rb, line 72defcache_keyifnew_record?"#{model_name.cache_key}/new"elseifcache_version"#{model_name.cache_key}/#{id}"elsetimestamp=max_updated_column_timestampiftimestamptimestamp=timestamp.utc.to_fs(cache_timestamp_format)"#{model_name.cache_key}/#{id}-#{timestamp}"else"#{model_name.cache_key}/#{id}"endendendendcache_key_with_version()LinkReturns a cache key along with the version.Source:show|on GitHub# File activerecord/lib/active_record/integration.rb, line 114defcache_key_with_versionifversion=cache_version"#{cache_key}-#{version}"elsecache_keyendendcache_version()LinkReturns a cache version that can be used together with the cache key to form a recyclable caching scheme. By default, the updated_at column is used for thecache_version, but this method can be overwritten to return something else.Note, this method will return nil ifActiveRecord::Base.cache_versioningis set tofalse.Source:show|on GitHub# File activerecord/lib/active_record/integration.rb, line 97defcache_versionreturnunlesscache_versioningifhas_attribute?("updated_at")timestamp=updated_at_before_type_castifcan_use_fast_cache_version?(timestamp)raw_timestamp_to_cache_version(timestamp)elsiftimestamp=updated_attimestamp.utc.to_fs(cache_timestamp_format)endelsifself.class.has_attribute?("updated_at")raiseActiveModel::MissingAttributeError,"missing attribute 'updated_at' for #{self.class}"endendto_param()LinkReturns aString, which Action Pack uses for constructing a URL to this object. The default implementation returns this recordâs id as aString, ornilif this recordâs unsaved.For example, suppose that you have a User model, and that you have aresources :usersroute. Normally,user_pathwill construct a path with the user objectâs âidâ in it:user = User.find_by(name: 'Phusion')
user_path(user)  # => "/users/1"You can overrideto_paramin your model to makeuser_pathconstruct a path using the userâs name instead of the userâs id:class User < ActiveRecord::Base
  def to_param  # overridden
    name
  end
end

user = User.find_by(name: 'Phusion')
user_path(user)  # => "/users/Phusion"Source:show|on GitHub# File activerecord/lib/active_record/integration.rb, line 57defto_paramreturnunlessidArray(id).join(self.class.param_delimiter)end