NamespaceMODULEActiveSupport::Multibyte::UnicodeCLASSActiveSupport::Multibyte::CharsMethodsPproxy_class,proxy_class=Class Public methodsproxy_class()LinkReturns the current proxy class.Source:show|on GitHub# File activesupport/lib/active_support/multibyte.rb, line 19defself.proxy_class@proxy_class||=ActiveSupport::Multibyte::Charsendproxy_class=(klass)LinkThe proxy class returned when calling mb_chars. You can use this accessor to configure your own proxy class so you can support other encodings. See theActiveSupport::Multibyte::Charsimplementation for an example how to do this.ActiveSupport::Multibyte.proxy_class = CharsForUTF32Source:show|on GitHub# File activesupport/lib/active_support/multibyte.rb, line 14defself.proxy_class=(klass)@proxy_class=klassend