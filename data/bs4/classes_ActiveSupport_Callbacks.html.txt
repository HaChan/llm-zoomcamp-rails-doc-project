Active Support CallbacksCallbacks are code hooks that are run at key points in an objectâs life cycle. The typical use case is to have a base class define a set of callbacks relevant to the other functionality it supplies, so that subclasses can install callbacks that enhance or modify the base functionality without needing to override or redefine methods of the base class.Mixing in this module allows you to define the events in the objectâs life cycle that will support callbacks (viaClassMethods#define_callbacks), set the instance methods, procs, or callback objects to be called (viaClassMethods#set_callback), and run the installed callbacks at the appropriate times (viarun_callbacks).By default callbacks are halted by throwing:abort. SeeClassMethods#define_callbacksfor details.Three kinds of callbacks are supported: before callbacks, run before a certain event; after callbacks, run after the event; and around callbacks, blocks that surround the event, triggering it when they yield. Callback code can be contained in instance methods, procs or lambdas, or callback objects that respond to certain predetermined methods. SeeClassMethods#set_callbackfor details.class Record
  include ActiveSupport::Callbacks
  define_callbacks :save

  def save
    run_callbacks :save do
      puts "- save"
    end
  end
end

class PersonRecord < Record
  set_callback :save, :before, :saving_message
  def saving_message
    puts "saving..."
  end

  set_callback :save, :after do |object|
    puts "saved"
  end
end

person = PersonRecord.new
person.saveOutput:saving...
- save
savedNamespaceMODULEActiveSupport::Callbacks::CallTemplateMODULEActiveSupport::Callbacks::ClassMethodsMODULEActiveSupport::Callbacks::ConditionalsMODULEActiveSupport::Callbacks::FiltersMethodsRrun_callbacksConstantsCALLBACK_FILTER_TYPES=[:before, :after, :around].freezeInstance Public methodsrun_callbacks(kind, type = nil)LinkRuns the callbacks for the given event.Calls the before and around callbacks in the order they were set, yields the block (if given one), and then runs the after callbacks in reverse order.If the callback chain was halted, returnsfalse. Otherwise returns the result of the block,nilif no callbacks have been set, ortrueif callbacks have been set but no block is given.run_callbacks :save do
  save
endSource:show|on GitHub# File activesupport/lib/active_support/callbacks.rb, line 97defrun_callbacks(kind,type=nil)callbacks=__callbacks[kind.to_sym]ifcallbacks.empty?yieldifblock_given?elseenv=Filters::Environment.new(self,false,nil)next_sequence=callbacks.compile(type)# Common case: no 'around' callbacks definedifnext_sequence.final?next_sequence.invoke_before(env)env.value=!env.halted&&(!block_given?||yield)next_sequence.invoke_after(env)env.valueelseinvoke_sequence=Proc.newdoskipped=nilwhiletruecurrent=next_sequencecurrent.invoke_before(env)ifcurrent.final?env.value=!env.halted&&(!block_given?||yield)elsifcurrent.skip?(env)
            (skipped||=[])<<currentnext_sequence=next_sequence.nestednextelsenext_sequence=next_sequence.nestedbegintarget,block,method,*arguments=current.expand_call_template(env,invoke_sequence)target.send(method,*arguments,&block)ensurenext_sequence=currentendendcurrent.invoke_after(env)skipped.pop.invoke_after(env)whileskipped&.firstbreakenv.valueendendinvoke_sequence.callendendend