ActiveRecord::Base.transactionuses this exception to distinguish a deliberate rollback from other exceptional situations. Normally, raising an exception will cause the.transactionmethod to rollback the database transactionandpass on the exception. But if you raise anActiveRecord::Rollbackexception, then the database transaction will be rolled back, without passing on the exception.For example, you could do this in your controller to rollback a transaction:class BooksController < ActionController::Base
  def create
    Book.transaction do
      book = Book.new(params[:book])
      book.save!
      if today_is_friday?
        # The system must fail on Friday so that our support department
        # won't be out of job. We silently rollback this transaction
        # without telling the user.
        raise ActiveRecord::Rollback
      end
    end
    # ActiveRecord::Rollback is the only exception that won't be passed on
    # by ActiveRecord::Base.transaction, so this line will still be reached
    # even on Friday.
    redirect_to root_url
  end
end