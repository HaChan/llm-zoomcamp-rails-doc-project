Active Support AutoloadAutoloadand eager load conveniences for your library.This module allows you to define autoloads based on Rails conventions (i.e. no need to define the path it is automatically guessed based on the filename) and also define a set of constants that needs to be eager loaded:module MyLib
  extend ActiveSupport::Autoload

  autoload :Model

  eager_autoload do
    autoload :Cache
  end
endThen your library can be eager loaded by simply calling:MyLib.eager_load!MethodsAautoload,autoload_at,autoload_underEeager_autoload,eager_load!Instance Public methodsautoload(const_name, path = @_at_path)LinkSource:show|on GitHub# File activesupport/lib/active_support/dependencies/autoload.rb, line 30defautoload(const_name,path=@_at_path)unlesspathfull= [name,@_under_path,const_name.to_s].compact.join("::")path=Inflector.underscore(full)endif@_eager_autoload@_eagerloaded_constants||=[]@_eagerloaded_constants<<const_nameendsuperconst_name,pathendautoload_at(path)LinkSource:show|on GitHub# File activesupport/lib/active_support/dependencies/autoload.rb, line 51defautoload_at(path)@_at_path,old_path=path,@_at_pathyieldensure@_at_path=old_pathendautoload_under(path)LinkSource:show|on GitHub# File activesupport/lib/active_support/dependencies/autoload.rb, line 44defautoload_under(path)@_under_path,old_path=path,@_under_pathyieldensure@_under_path=old_pathendeager_autoload()LinkSource:show|on GitHub# File activesupport/lib/active_support/dependencies/autoload.rb, line 58defeager_autoloadold_eager,@_eager_autoload=@_eager_autoload,trueyieldensure@_eager_autoload=old_eagerendeager_load!()LinkSource:show|on GitHub# File activesupport/lib/active_support/dependencies/autoload.rb, line 65defeager_load!if@_eagerloaded_constants@_eagerloaded_constants.each{|const_name|const_get(const_name) }@_eagerloaded_constants=nilendend