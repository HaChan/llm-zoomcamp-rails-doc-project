MethodsGGETPPOSTAauthorizationBbodyCcommit_csrf_token,commit_flash,content_length,controller_class,controller_class_forEemptyFform_data?,fullpathHheaders,http_auth_saltIipKkey?Llocal?,loggerMmedia_type,method,method_symbolNnewOoriginal_fullpath,original_urlQquery_parametersRraw_post,remote_ip,remote_ip=,request_id,request_method,request_method_symbol,request_parameters,request_parameters=,reset_csrf_token,reset_session,route_uri_patternSsend_early_hints,server_software,session_options=UuuidXxhr?,xml_http_request?Included ModulesRack::Request::HelpersActionDispatch::Http::Cache::RequestActionDispatch::Http::MimeNegotiationActionDispatch::Http::ParametersActionDispatch::Http::FilterParametersActionDispatch::Http::URLActionDispatch::ContentSecurityPolicy::RequestActionDispatch::PermissionsPolicy::RequestRack::Request::EnvConstantsENV_METHODS=%w[ AUTH_TYPE GATEWAY_INTERFACE
PATH_TRANSLATED REMOTE_HOST
REMOTE_IDENT REMOTE_USER REMOTE_ADDR
SERVER_NAME SERVER_PROTOCOL
ORIGINAL_SCRIPT_NAME

HTTP_ACCEPT HTTP_ACCEPT_CHARSET HTTP_ACCEPT_ENCODING
HTTP_ACCEPT_LANGUAGE HTTP_CACHE_CONTROL HTTP_FROM
HTTP_NEGOTIATE HTTP_PRAGMA HTTP_CLIENT_IP
HTTP_X_FORWARDED_FOR HTTP_ORIGIN HTTP_VERSION
HTTP_X_CSRF_TOKEN HTTP_X_REQUEST_ID HTTP_X_FORWARDED_HOST
].freezeHTTP_METHODS=RFC2616 + RFC2518 + RFC3253 + RFC3648 + RFC3744 + RFC5323 + RFC4791 + RFC5789HTTP_METHOD_LOOKUP={}LOCALHOST=Regexp.union [/^127\.\d{1,3}\.\d{1,3}\.\d{1,3}$/, /^::1$/, /^0:0:0:0:0:0:0:1(%.*)?$/]RFC2518=%w(PROPFIND PROPPATCH MKCOL COPY MOVE LOCK UNLOCK)HTTP methods fromRFC 2518: HTTP Extensions for Distributed Authoring â WEBDAVRFC2616=%w(OPTIONS GET HEAD POST PUT DELETE TRACE CONNECT)HTTP methods fromRFC 2616: Hypertext Transfer Protocol â HTTP/1.1RFC3253=%w(VERSION-CONTROL REPORT CHECKOUT CHECKIN UNCHECKOUT MKWORKSPACE UPDATE LABEL MERGE BASELINE-CONTROL MKACTIVITY)HTTP methods fromRFC 3253: Versioning Extensions to WebDAVRFC3648=%w(ORDERPATCH)HTTP methods fromRFC 3648: WebDAV Ordered Collections ProtocolRFC3744=%w(ACL)HTTP methods fromRFC 3744: WebDAV Access Control ProtocolRFC4791=%w(MKCALENDAR)HTTP methods fromRFC 4791: Calendaring Extensions to WebDAVRFC5323=%w(SEARCH)HTTP methods fromRFC 5323: WebDAV SEARCHRFC5789=%w(PATCH)HTTP methods fromRFC 5789: PATCH Method for HTTPClass Public methodsempty()LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 58defself.emptynew({})endnew(env)LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 62definitialize(env)super@method=nil@request_method=nil@remote_ip=nil@original_fullpath=nil@fullpath=nil@ip=nilendInstance Public methodsGET()LinkOverride RackâsGETmethod to support indifferent access.Also aliased as:query_parametersSource:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 387defGETfetch_header("action_dispatch.request.query_parameters")do|k|rack_query_params=super||{}controller=path_parameters[:controller]action=path_parameters[:action]rack_query_params=Request::Utils.set_binary_encoding(self,rack_query_params,controller,action)# Check for non UTF-8 parameter values, which would cause errors laterRequest::Utils.check_param_encoding(rack_query_params)set_headerk,Request::Utils.normalize_encode_params(rack_query_params)endrescueRack::Utils::ParameterTypeError,Rack::Utils::InvalidParameterError,Rack::QueryParser::ParamsTooDeepError=>eraiseActionController::BadRequest.new("Invalid query parameters: #{e.message}")endPOST()LinkOverride RackâsPOSTmethod to support indifferent access.Also aliased as:request_parametersSource:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 403defPOSTfetch_header("action_dispatch.request.request_parameters")dopr=parse_formatted_parameters(params_parsers)do|params|super||{}endpr=Request::Utils.set_binary_encoding(self,pr,path_parameters[:controller],path_parameters[:action])Request::Utils.check_param_encoding(pr)self.request_parameters=Request::Utils.normalize_encode_params(pr)endrescueRack::Utils::ParameterTypeError,Rack::Utils::InvalidParameterError,Rack::QueryParser::ParamsTooDeepError,EOFError=>eraiseActionController::BadRequest.new("Invalid request parameters: #{e.message}")endauthorization()LinkReturns the authorization header regardless of whether it was specified directly or through one of the proxy alternatives.Source:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 419defauthorizationget_header("HTTP_AUTHORIZATION")||get_header("X-HTTP_AUTHORIZATION")||get_header("X_HTTP_AUTHORIZATION")||get_header("REDIRECT_X_HTTP_AUTHORIZATION")endbody()LinkThe request body is anIOinput stream. If the RAW_POST_DATA environment variable is already set, wrap it in a StringIO.Source:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 349defbodyifraw_post=get_header("RAW_POST_DATA")raw_post= (+raw_post).force_encoding(Encoding::BINARY)StringIO.new(raw_post)elsebody_streamendendcommit_csrf_token()LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 451defcommit_csrf_tokencontroller_instance.commit_csrf_token(self)ifcontroller_instance.respond_to?(:commit_csrf_token)endcommit_flash()LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 440defcommit_flashendcontent_length()LinkReturns the content length of the request as an integer.Source:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 284defcontent_lengthreturnraw_post.bytesizeifheaders.key?("Transfer-Encoding")super.to_iendcontroller_class()LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 81defcontroller_classparams=path_parametersparams[:action]||="index"controller_class_for(params[:controller])endcontroller_class_for(name)LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 87defcontroller_class_for(name)ifnamecontroller_param=name.underscoreconst_name=controller_param.camelize<<"Controller"beginconst_name.constantizerescueNameError=>erroriferror.missing_name==const_name||const_name.start_with?("#{error.missing_name}::")raiseMissingController.new(error.message,error.name)elseraiseendendelsePASS_NOT_FOUNDendendform_data?()LinkDetermine whether the request body contains form-data by checking the requestContent-Typefor one of the media-types:application/x-www-form-urlencodedormultipart/form-data. The list of form-data media types can be modified through theFORM_DATA_MEDIA_TYPESarray.A request body is not assumed to contain form-data when noContent-Typeheader is provided and therequest_methodisPOST.Source:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 365defform_data?FORM_DATA_MEDIA_TYPES.include?(media_type)endfullpath()LinkReturns theStringfull path including params of the last URL requested.# get "/articles"
request.fullpath # => "/articles"

# get "/articles?page=2"
request.fullpath # => "/articles?page=2"Source:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 263deffullpath@fullpath||=superendheaders()LinkProvides access to the requestâs HTTP headers, for example:request.headers["Content-Type"] # => "text/plain"Source:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 225defheaders@headers||=Http::Headers.new(self)endhttp_auth_salt()LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 191defhttp_auth_saltget_header"action_dispatch.http_auth_salt"endip()LinkReturns the IP address of client as aString.Source:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 298defip@ip||=superendkey?(key)LinkReturns true if the request has a header matching the given key parameter.request.key? :ip_spoofing_check # => trueSource:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 108defkey?(key)has_header?keyendlocal?()LinkTrue if the request came from localhost, 127.0.0.1, or ::1.Source:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 427deflocal?LOCALHOST.match?(remote_addr)&&LOCALHOST.match?(remote_ip)endlogger()LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 436defloggerget_header("action_dispatch.logger")endmedia_type()LinkTheStringMIME type of the request.# get "/articles"
request.media_type # => "application/x-www-form-urlencoded"Source:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 279defmedia_typecontent_mime_type&.to_sendmethod(*args)LinkReturns the original value of the environmentâs REQUEST_METHOD, even if it was overridden by middleware. Seerequest_methodfor more information.For debugging purposes, when called with arguments this method will fall back to Object#methodSource:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 205defmethod(*args)ifargs.empty?@method||=check_method(get_header("rack.methodoverride.original_method")||get_header("REQUEST_METHOD")
    )elsesuperendendmethod_symbol()LinkReturns a symbol form of themethod.Source:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 218defmethod_symbolHTTP_METHOD_LOOKUP[method]endoriginal_fullpath()LinkReturns aStringwith the last requested path including their params.# get '/foo'
request.original_fullpath # => '/foo'

# get '/foo?bar'
request.original_fullpath # => '/foo?bar'Source:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 252deforiginal_fullpath@original_fullpath||=(get_header("ORIGINAL_FULLPATH")||fullpath)endoriginal_url()LinkReturns the original request URL as aString.# get "/articles?page=2"
request.original_url # => "http://www.example.com/articles?page=2"Source:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 271deforiginal_urlbase_url+original_fullpathendquery_parameters()LinkAlias for:GETraw_post()LinkRead the request body. This is useful for web services that need to work with raw requests directly.Source:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 340defraw_postunlesshas_header?"RAW_POST_DATA"set_header("RAW_POST_DATA",read_body_stream)endget_header"RAW_POST_DATA"endremote_ip()LinkReturns the IP address of client as aString, usually set by theRemoteIpmiddleware.Source:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 304defremote_ip@remote_ip||=(get_header("action_dispatch.remote_ip")||ip).to_sendremote_ip=(remote_ip)LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 308defremote_ip=(remote_ip)@remote_ip=nilset_header"action_dispatch.remote_ip",remote_ipendrequest_id()LinkReturns the unique request id, which is based on either theX-Request-Idheader that can be generated by a firewall, load balancer, or web server, or by theRequestIdmiddleware (which sets theaction_dispatch.request_idenvironment variable).This unique ID is useful for tracing a request from end-to-end as part of logging or debugging. This relies on the Rack variable set by theActionDispatch::RequestIdmiddleware.Also aliased as:uuidSource:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 323defrequest_idget_headerACTION_DISPATCH_REQUEST_IDendrequest_method()LinkReturns the HTTP method that the application should see. In the case where the method was overridden by a middleware (for instance, if a HEAD request was converted to aGET, or if a _method parameter was used to determine the method the application should use), this method returns the overridden value, not the original.Source:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 145defrequest_method@request_method||=check_method(super)endrequest_method_symbol()LinkReturns a symbol form of therequest_method.Source:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 196defrequest_method_symbolHTTP_METHOD_LOOKUP[request_method]endrequest_parameters()LinkAlias for:POSTrequest_parameters=(params)LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 431defrequest_parameters=(params)raiseifparams.nil?set_header("action_dispatch.request.request_parameters",params)endreset_csrf_token()LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 447defreset_csrf_tokencontroller_instance.reset_csrf_token(self)ifcontroller_instance.respond_to?(:reset_csrf_token)endreset_session()LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 373defreset_sessionsession.destroyreset_csrf_tokenendroute_uri_pattern()LinkReturns the URI pattern of the matched route for the request, using the same format asbin/rails routes:request.route_uri_pattern # => "/:controller(/:action(/:id))(.:format)"Source:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 153defroute_uri_patternget_header("action_dispatch.route_uri_pattern")endsend_early_hints(links)LinkEarly Hints is an HTTP/2 status code that indicates hints to help a client start making preparations for processing the final response.If the env containsrack.early_hintsthen the server accepts HTTP2 push for link headers.Thesend_early_hintsmethod accepts a hash of links as follows:send_early_hints("link" => "</style.css>; rel=preload; as=style,</script.js>; rel=preload")If you are usingjavascript_include_tagorstylesheet_link_tagthe Early Hints headers are included by default if supported.Source:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 241defsend_early_hints(links)env["rack.early_hints"]&.call(links)endserver_software()LinkReturns the lowercase name of the HTTP server software.Source:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 334defserver_software(get_header("SERVER_SOFTWARE")&&/^([a-zA-Z]+)/=~get_header("SERVER_SOFTWARE"))?$1.downcase:nilendsession_options=(options)LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 382defsession_options=(options)Session::Options.setself,optionsenduuid()LinkAlias for:request_idxhr?()LinkAlias for:xml_http_request?xml_http_request?()LinkReturns true if theX-Requested-Withheader contains âXMLHttpRequestâ (case-insensitive), which may need to be manually added depending on the choice of JavaScript libraries and frameworks.Also aliased as:xhr?Source:show|on GitHub# File actionpack/lib/action_dispatch/http/request.rb, line 292defxml_http_request?/XMLHttpRequest/i.match?(get_header("HTTP_X_REQUESTED_WITH"))end