Action ControllerRendererActionController::Rendererallows you to render arbitrary templates without being inside a controller action.You can get a renderer instance by callingrendereron a controller class:ApplicationController.renderer
PostsController.rendererand render a template by calling therendermethod:ApplicationController.renderer.render template: "posts/show", assigns: { post: Post.first }
PostsController.renderer.render :show, assigns: { post: Post.first }As a shortcut, you can also callrenderdirectly on the controller class itself:ApplicationController.render template: "posts/show", assigns: { post: Post.first }
PostsController.render :show, assigns: { post: Post.first }MethodsDdefaultsFforNnew,newRrenderWwith_defaultsConstantsDEFAULTS={
method: "get",
input: ""
}.freezeRACK_KEY_TRANSLATION={
http_host:   "HTTP_HOST",
https:       "HTTPS",
method:      "REQUEST_METHOD",
script_name: "SCRIPT_NAME",
input:       "rack.input"
}Attributes[R]controllerClass Public methodsfor(controller, env = nil, defaults = DEFAULTS)LinkCreates a new renderer using the given controller class. See::new.Source:show|on GitHub# File actionpack/lib/action_controller/renderer.rb, line 64defself.for(controller,env=nil,defaults=DEFAULTS)new(controller,env,defaults)endnew(controller, env, defaults)LinkInitializes a newRenderer.Parameterscontroller- The controller class to instantiate for rendering.env- The Rack env to use for mocking a request when rendering. Entries can be typical Rack env keys and values, or they can be any of the following, which will be converted appropriately::http_host- The HTTP host for the incoming request. Converts to RackâsHTTP_HOST.:https- Boolean indicating whether the incoming request uses HTTPS. Converts to RackâsHTTPS.:method- The HTTP method for the incoming request, case-insensitive. Converts to RackâsREQUEST_METHOD.:script_name- The portion of the incoming requestâs URL path that corresponds to the application. Converts to RackâsSCRIPT_NAME.:input- The input stream. Converts to Rackâsrack.input.:http_host- The HTTP host for the incoming request. Converts to RackâsHTTP_HOST.:https- Boolean indicating whether the incoming request uses HTTPS. Converts to RackâsHTTPS.:method- The HTTP method for the incoming request, case-insensitive. Converts to RackâsREQUEST_METHOD.:script_name- The portion of the incoming requestâs URL path that corresponds to the application. Converts to RackâsSCRIPT_NAME.:input- The input stream. Converts to Rackâsrack.input.defaults- Default values for the Rack env. Entries are specified in the same format asenv.envwill be merged on top of these values.defaultswill be retained when callingnewon a renderer instance.If nohttp_hostis specified, the env HTTP host will be derived from the routesâdefault_url_options. In this case, thehttpsboolean and thescript_namewill also be derived fromdefault_url_optionsif they were not specified. Additionally, thehttpsboolean will fall back toRails.application.config.force_sslifdefault_url_optionsdoes not specify aprotocol.Source:show|on GitHub# File actionpack/lib/action_controller/renderer.rb, line 111definitialize(controller,env,defaults)@controller=controller@defaults=defaultsifenv.blank?&&@defaults==DEFAULTS@env=DEFAULT_ENVelse@env=normalize_env(@defaults)@env.merge!(normalize_env(env))unlessenv.blank?endendInstance Public methodsdefaults()LinkSource:show|on GitHub# File actionpack/lib/action_controller/renderer.rb, line 122defdefaults@defaults=@defaults.dupif@defaults.frozen?@defaultsendnew(env = nil)LinkCreates a new renderer using the same controller, but with a new Rack env.ApplicationController.renderer.new(method: "post")Source:show|on GitHub# File actionpack/lib/action_controller/renderer.rb, line 72defnew(env=nil)self.class.newcontroller,env,@defaultsendrender(*args)LinkRenders a template to a string, just likeActionController::Rendering#render_to_string.Source:show|on GitHub# File actionpack/lib/action_controller/renderer.rb, line 129defrender(*args)request=ActionDispatch::Request.new(env_for_request)request.routes=controller._routesinstance=controller.newinstance.set_request!requestinstance.set_response!controller.make_response!(request)instance.render_to_string(*args)endwith_defaults(defaults)LinkCreates a new renderer using the same controller, but with the given defaults merged on top of the previous defaults.Source:show|on GitHub# File actionpack/lib/action_controller/renderer.rb, line 78defwith_defaults(defaults)self.class.newcontroller,@env,@defaults.merge(defaults)end