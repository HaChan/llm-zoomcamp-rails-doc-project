MethodsDdefault_scope,default_scopes?UunscopedInstance Public methodsdefault_scopes?(all_queries: false)LinkChecks if the model has any default scopes. If all_queries is set to true, the method will check if there are any default_scopes for the model  whereall_queriesis true.Source:show|on GitHub# File activerecord/lib/active_record/scoping/default.rb, line 62defdefault_scopes?(all_queries:false)ifall_queriesself.default_scopes.any?(&:all_queries)elseself.default_scopes.any?endendunscoped(&block)LinkReturns a scope for the model without the previously set scopes.class Post < ActiveRecord::Base
  belongs_to :user

  def self.default_scope
    where(published: true)
  end
end

class User < ActiveRecord::Base
  has_many :posts
end

Post.all                                  # Fires "SELECT * FROM posts WHERE published = true"
Post.unscoped.all                         # Fires "SELECT * FROM posts"
Post.where(published: false).unscoped.all # Fires "SELECT * FROM posts"
User.find(1).posts                        # Fires "SELECT * FROM posts WHERE published = true AND posts.user_id = 1"
User.find(1).posts.unscoped               # Fires "SELECT * FROM posts"This method also accepts a block. All queries inside the block will not use the previously set scopes.Post.unscoped {
  Post.limit(10) # Fires "SELECT * FROM posts LIMIT 10"
}Source:show|on GitHub# File activerecord/lib/active_record/scoping/default.rb, line 50defunscoped(&block)block_given??relation.scoping(&block):relationendInstance Private methodsdefault_scope(scope = nil, all_queries: nil, &block)LinkUse this macro in your model to set a default scope for all operations on the model.class Article < ActiveRecord::Base
  default_scope { where(published: true) }
end

Article.all
# SELECT * FROM articles WHERE published = trueThedefault_scopeis also applied while creating/building a record. It is not applied while updating or deleting a record.Article.new.published    # => true
Article.create.published # => trueTo apply adefault_scopewhen updating or deleting a record, addall_queries: true:class Article < ActiveRecord::Base
  default_scope -> { where(blog_id: 1) }, all_queries: true
endApplying a default scope to all queries will ensure that records are always queried by the additional conditions. Note that only where clauses apply, as it does not make sense to add order to queries that return a single object by primary key.Article.find(1).destroy
# DELETE ... FROM `articles` where ID = 1 AND blog_id = 1;(You can also pass any object which responds tocallto thedefault_scopemacro, and it will be called when building the default scope.)If you use multipledefault_scopedeclarations in your model then they will be merged together:class Article < ActiveRecord::Base
  default_scope { where(published: true) }
  default_scope { where(rating: 'G') }
end

Article.all
# SELECT * FROM articles WHERE published = true AND rating = 'G'This is also the case with inheritance and module includes where the parent or module defines adefault_scopeand the child or including class defines a second one.If you need to do more complex things with a default scope, you can alternatively define it as a class method:class Article < ActiveRecord::Base
  def self.default_scope
    # Should return a scope, you can call 'super' here etc.
  end
endSource:show|on GitHub# File activerecord/lib/active_record/scoping/default.rb, line 129defdefault_scope(scope=nil,all_queries:nil,&block)# :doc:scope=blockifblock_given?ifscope.is_a?(Relation)||!scope.respond_to?(:call)raiseArgumentError,"Support for calling #default_scope without a block is removed. For example instead "\"of `default_scope where(color: 'red')`, please use "\"`default_scope { where(color: 'red') }`. (Alternatively you can just redefine "\"self.default_scope.)"enddefault_scope=DefaultScope.new(scope,all_queries)self.default_scopes+=[default_scope]end