NamespaceMODULEActionCable::Channel::TestCase::Behavior::ClassMethodsMethodsAassert_broadcast_on,assert_broadcasts,assert_has_no_stream,assert_has_no_stream_for,assert_has_stream,assert_has_stream_for,assert_no_streamsPperformSstub_connection,subscribeTtransmissionsUunsubscribeIncluded ModulesActiveSupport::Testing::ConstantLookupActionCable::TestHelperConstantsCHANNEL_IDENTIFIER="test_stub"Attributes[R]connection[R]subscriptionInstance Public methodsassert_broadcast_on(stream_or_object, *args)LinkSource:show|on GitHub# File actioncable/lib/action_cable/channel/test_case.rb, line 282defassert_broadcast_on(stream_or_object,*args)super(broadcasting_for(stream_or_object),*args)endassert_broadcasts(stream_or_object, *args)LinkEnhanceTestHelperassertions to handle non-String broadcastingsSource:show|on GitHub# File actioncable/lib/action_cable/channel/test_case.rb, line 278defassert_broadcasts(stream_or_object,*args)super(broadcasting_for(stream_or_object),*args)endassert_has_no_stream(stream)LinkAsserts that the specified stream has not been started.def test_assert_no_started_stream
  subscribe
  assert_has_no_stream 'messages'
endSource:show|on GitHub# File actioncable/lib/action_cable/channel/test_case.rb, line 326defassert_has_no_stream(stream)assertsubscription.streams.exclude?(stream),"Stream #{stream} has been started"endassert_has_no_stream_for(object)LinkAsserts that the specified stream for a model has not started.def test_assert_no_started_stream_for
  subscribe id: 41
  assert_has_no_stream_for User.find(42)
endSource:show|on GitHub# File actioncable/lib/action_cable/channel/test_case.rb, line 337defassert_has_no_stream_for(object)assert_has_no_stream(broadcasting_for(object))endassert_has_stream(stream)LinkAsserts that the specified stream has been started.def test_assert_started_stream
  subscribe
  assert_has_stream 'messages'
endSource:show|on GitHub# File actioncable/lib/action_cable/channel/test_case.rb, line 304defassert_has_stream(stream)assertsubscription.streams.include?(stream),"Stream #{stream} has not been started"endassert_has_stream_for(object)LinkAsserts that the specified stream for a model has started.def test_assert_started_stream_for
  subscribe id: 42
  assert_has_stream_for User.find(42)
endSource:show|on GitHub# File actioncable/lib/action_cable/channel/test_case.rb, line 315defassert_has_stream_for(object)assert_has_stream(broadcasting_for(object))endassert_no_streams()LinkAsserts that no streams have been started.def test_assert_no_started_stream
  subscribe
  assert_no_streams
endSource:show|on GitHub# File actioncable/lib/action_cable/channel/test_case.rb, line 293defassert_no_streamsassertsubscription.streams.empty?,"No streams started was expected, but #{subscription.streams.count} found"endperform(action, data = {})LinkPerform action on a channel.NOTE: Must be subscribed.Source:show|on GitHub# File actioncable/lib/action_cable/channel/test_case.rb, line 266defperform(action,data= {})check_subscribed!subscription.perform_action(data.stringify_keys.merge("action"=>action.to_s))endstub_connection(identifiers = {})LinkSet up test connection with the specified identifiers:class ApplicationCable < ActionCable::Connection::Base
  identified_by :user, :token
end

stub_connection(user: users[:john], token: 'my-secret-token')Source:show|on GitHub# File actioncable/lib/action_cable/channel/test_case.rb, line 243defstub_connection(identifiers= {})@connection=ConnectionStub.new(identifiers)endsubscribe(params = {})LinkSubscribe to the channel under test. Optionally pass subscription parameters as aHash.Source:show|on GitHub# File actioncable/lib/action_cable/channel/test_case.rb, line 249defsubscribe(params= {})@connection||=stub_connection@subscription=self.class.channel_class.new(connection,CHANNEL_IDENTIFIER,params.with_indifferent_access)@subscription.singleton_class.include(ChannelStub)@subscription.subscribe_to_channel@subscriptionendtransmissions()LinkReturns messages transmitted into channelSource:show|on GitHub# File actioncable/lib/action_cable/channel/test_case.rb, line 272deftransmissions# Return only directly sent message (via #transmit)connection.transmissions.filter_map{|data|data["message"] }endunsubscribe()LinkUnsubscribe the subscription under test.Source:show|on GitHub# File actioncable/lib/action_cable/channel/test_case.rb, line 258defunsubscribecheck_subscribed!subscription.unsubscribe_from_channelend