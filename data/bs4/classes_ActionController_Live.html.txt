Action ControllerLiveMix this module into your controller, and all actions in that controller will be able to stream data to the client as itâs written.class MyController < ActionController::Base
  include ActionController::Live

  def stream
    response.headers['Content-Type'] = 'text/event-stream'
    100.times {
      response.stream.write "hello world\n"
      sleep 1
    }
  ensure
    response.stream.close
  end
endThere are a few caveats with this module. Youcannotwrite headers after the response has been committed (Response#committed? will return truthy). Callingwriteorcloseon the response stream will cause the response object to be committed. Make sure all headers are set before calling write or close on your stream.Youmustcall close on your stream when youâre finished, otherwise the socket may be left open forever.The final caveat is that your actions are executed in a separate thread than the main thread. Make sure your actions are thread safe, and this shouldnât be a problem (donât share state across threads, etc).Note thatRailsincludesRack::ETagby default, which will buffer your response. As a result, streaming responses may not work properly with Rack 2.2.x, and you may need to implement workarounds in your application. You can either set theETagorLast-Modifiedresponse headers or removeRack::ETagfrom the middleware stack to address this issue.Hereâs an example of how you can set theLast-Modifiedheader if your Rack version is 2.2.x:def stream
  response.headers["Content-Type"] = "text/event-stream"
  response.headers["Last-Modified"] = Time.now.httpdate # Add this line if your Rack version is 2.2.x
  ...
endNamespaceMODULEActionController::Live::ClassMethodsCLASSActionController::Live::ClientDisconnectedCLASSActionController::Live::SSEMethodsPprocessRresponse_body=Ssend_streamInstance Public methodsprocess(name)LinkSource:show|on GitHub# File actionpack/lib/action_controller/metal/live.rb, line 273defprocess(name)t1=Thread.currentlocals=t1.keys.map{|key|[key,t1[key]] }error=nil# This processes the action in a child thread. It lets us return the response# code and headers back up the Rack stack, and still process the body in# parallel with sending data to the client.new_controller_thread{ActiveSupport::Dependencies.interlock.runningdot2=Thread.current# Since we're processing the view in a different thread, copy the thread locals# from the main thread to the child thread. :'(locals.each{|k,v|t2[k] =v}ActiveSupport::IsolatedExecutionState.share_with(t1)beginsuper(name)rescue=>eif@_response.committed?begin@_response.stream.write(ActionView::Base.streaming_completion_on_exception)ifrequest.format==:html@_response.stream.call_on_errorrescue=>exceptionlog_error(exception)ensurelog_error(e)@_response.stream.closeendelseerror=eendensure@_response.commit!endend}ActiveSupport::Dependencies.interlock.permit_concurrent_loadsdo@_response.await_commitendraiseerroriferrorendresponse_body=(body)LinkSource:show|on GitHub# File actionpack/lib/action_controller/metal/live.rb, line 319defresponse_body=(body)superresponse.closeifresponseendsend_stream(filename:, disposition: "attachment", type: nil)LinkSends a stream to the browser, which is helpful when youâre generating exports or other running data where you donât want the entire file buffered in memory first. Similar to send_data, but where the data is generated live.Options: *:filename- suggests a filename for the browser to use. *:type- specifies an HTTP content type. You can specify either a string or a symbol for a registered type withMime::Type.register, for example :json. If omitted, type will be inferred from the file extension specified in:filename. If no content type is registered for the extension, the default type âapplication/octet-streamâ will be used. *:disposition- specifies whether the file will be shown inline or downloaded. Valid values are âinlineâ and âattachmentâ (default).Example of generating a csv export:send_stream(filename: "subscribers.csv") do |stream|
  stream.write "email_address,updated_at\n"

  @subscribers.find_each do |subscriber|
    stream.write "#{subscriber.email_address},#{subscriber.updated_at}\n"
  end
endSource:show|on GitHub# File actionpack/lib/action_controller/metal/live.rb, line 348defsend_stream(filename:,disposition:"attachment",type:nil)payload= {filename:filename,disposition:disposition,type:type}ActiveSupport::Notifications.instrument("send_stream.action_controller",payload)doresponse.headers["Content-Type"] =
      (type.is_a?(Symbol)?Mime[type].to_s:type)||Mime::Type.lookup_by_extension(File.extname(filename).downcase.delete("."))&.to_s||"application/octet-stream"response.headers["Content-Disposition"] =ActionDispatch::Http::ContentDisposition.format(disposition:disposition,filename:filename)yieldresponse.streamendensureresponse.stream.closeend