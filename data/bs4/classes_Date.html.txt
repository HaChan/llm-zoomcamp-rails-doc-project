Methods#<=>Aacts_like_date?,advance,ago,at_beginning_of_day,at_end_of_day,at_midday,at_middle_of_day,at_midnight,at_noonBbeginning_of_day,beginning_of_week,beginning_of_week=Cchange,compare_with_coercion,compare_without_coercion,currentDdefault_inspectEend_of_dayFfind_beginning_of_week!Iin,inspectMmidday,middle_of_day,midnightNnoonRreadable_inspectSsinceTto_formatted_s,to_fs,to_time,tomorrowXxmlschemaYyesterdayIncluded ModulesDateAndTime::CalculationsDateAndTime::ZonesConstantsDATE_FORMATS={
short: "%d %b",
long: "%B %d, %Y",
db: "%Y-%m-%d",
inspect: "%Y-%m-%d",
number: "%Y%m%d",
long_ordinal: lambda { |date|
day_format = ActiveSupport::Inflector.ordinalize(date.day)
date.strftime("%B #{day_format}, %Y") # => "April 25th, 2007"
},
rfc822: "%d %b %Y",
iso8601: lambda { |date| date.iso8601 }
}Attributes[RW]beginning_of_week_defaultClass Public methodsbeginning_of_week()LinkReturns the week start (e.g.:monday) for the current request, if this has been set (viaDate.beginning_of_week=). IfDate.beginning_of_weekhas not been set for the current request, returns the week start specified inconfig.beginning_of_week. If noconfig.beginning_of_weekwas specified, returns:monday.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/date/calculations.rb, line 19defbeginning_of_week::ActiveSupport::IsolatedExecutionState[:beginning_of_week]||beginning_of_week_default||:mondayendbeginning_of_week=(week_start)LinkSetsDate.beginning_of_weekto a week start (e.g.:monday) for current request/thread.This method accepts any of the following day symbols::monday,:tuesday,:wednesday,:thursday,:friday,:saturday,:sundaySource:show|on GitHub# File activesupport/lib/active_support/core_ext/date/calculations.rb, line 27defbeginning_of_week=(week_start)::ActiveSupport::IsolatedExecutionState[:beginning_of_week] =find_beginning_of_week!(week_start)endcurrent()LinkReturnsTime.zone.today whenTime.zoneorconfig.time_zoneare set, otherwise just returns Date.today.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/date/calculations.rb, line 48defcurrent::Time.zone?::Time.zone.today:::Date.todayendfind_beginning_of_week!(week_start)LinkReturns week start day symbol (e.g.:monday), or raises anArgumentErrorfor invalid day symbol.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/date/calculations.rb, line 32deffind_beginning_of_week!(week_start)raiseArgumentError,"Invalid beginning of week: #{week_start}"unless::Date::DAYS_INTO_WEEK.key?(week_start)week_startendtomorrow()LinkReturns a newDaterepresenting the date 1 day after today (i.e. tomorrowâs date).Source:show|on GitHub# File activesupport/lib/active_support/core_ext/date/calculations.rb, line 43deftomorrow::Date.current.tomorrowendyesterday()LinkReturns a newDaterepresenting the date 1 day ago (i.e. yesterdayâs date).Source:show|on GitHub# File activesupport/lib/active_support/core_ext/date/calculations.rb, line 38defyesterday::Date.current.yesterdayendInstance Public methods<=>(other)LinkAlso aliased as:compare_without_coercionAlias for:compare_with_coercionacts_like_date?()LinkDuck-types as a Date-like class. SeeObject#acts_like?.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/date/acts_like.rb, line 7defacts_like_date?trueendadvance(options)LinkProvides preciseDatecalculations for years, months, and days. Theoptionsparameter takes a hash with any of these keys::years,:months,:weeks,:days.The increments are applied in order of time units from largest to smallest. In other words, the date is incremented first by:years, then by:months, then by:weeks, then by:days. This order can affect the result around the end of a month. For example, incrementing first by months then by days:Date.new(2004, 9, 30).advance(months: 1, days: 1)
# => Sun, 31 Oct 2004Whereas incrementing first by days then by months yields a different result:Date.new(2004, 9, 30).advance(days: 1).advance(months: 1)
# => Mon, 01 Nov 2004Source:show|on GitHub# File activesupport/lib/active_support/core_ext/date/calculations.rb, line 127defadvance(options)d=selfd=d>>options[:years]*12ifoptions[:years]d=d>>options[:months]ifoptions[:months]d=d+options[:weeks]*7ifoptions[:weeks]d=d+options[:days]ifoptions[:days]dendago(seconds)LinkConvertsDateto aTime(orDateTimeif necessary) with the time portion set to the beginning of the day (0:00) and then subtracts the specified number of seconds.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/date/calculations.rb, line 55defago(seconds)in_time_zone.since(-seconds)endat_beginning_of_day()LinkAlias for:beginning_of_dayat_end_of_day()LinkAlias for:end_of_dayat_midday()LinkAlias for:middle_of_dayat_middle_of_day()LinkAlias for:middle_of_dayat_midnight()LinkAlias for:beginning_of_dayat_noon()LinkAlias for:middle_of_daybeginning_of_day()LinkConvertsDateto aTime(orDateTimeif necessary) with the time portion set to the beginning of the day (0:00)Also aliased as:midnight,at_midnight,at_beginning_of_daySource:show|on GitHub# File activesupport/lib/active_support/core_ext/date/calculations.rb, line 67defbeginning_of_dayin_time_zoneendchange(options)LinkReturns a newDatewhere one or more of the elements have been changed according to theoptionsparameter. Theoptionsparameter is a hash with a combination of these keys::year,:month,:day.Date.new(2007, 5, 12).change(day: 1)               # => Date.new(2007, 5, 1)
Date.new(2007, 5, 12).change(year: 2005, month: 1) # => Date.new(2005, 1, 12)Source:show|on GitHub# File activesupport/lib/active_support/core_ext/date/calculations.rb, line 143defchange(options)::Date.new(options.fetch(:year,year),options.fetch(:month,month),options.fetch(:day,day)
  )endcompare_with_coercion(other)LinkAllowDateto be compared withTimeby converting toDateTimeand relying on the <=> from there.Also aliased as:<=>Source:show|on GitHub# File activesupport/lib/active_support/core_ext/date/calculations.rb, line 152defcompare_with_coercion(other)ifother.is_a?(Time)to_datetime<=>otherelsecompare_without_coercion(other)endendcompare_without_coercion(other)LinkAlias for:<=>default_inspect()LinkAlias for:inspectend_of_day()LinkConvertsDateto aTime(orDateTimeif necessary) with the time portion set to the end of the day (23:59:59)Also aliased as:at_end_of_daySource:show|on GitHub# File activesupport/lib/active_support/core_ext/date/calculations.rb, line 85defend_of_dayin_time_zone.end_of_dayendin(seconds)LinkAlias for:sinceinspect()LinkAlso aliased as:default_inspectAlias for:readable_inspectmidday()LinkAlias for:middle_of_daymiddle_of_day()LinkConvertsDateto aTime(orDateTimeif necessary) with the time portion set to the middle of the day (12:00)Also aliased as:midday,noon,at_midday,at_noon,at_middle_of_daySource:show|on GitHub# File activesupport/lib/active_support/core_ext/date/calculations.rb, line 75defmiddle_of_dayin_time_zone.middle_of_dayendmidnight()LinkAlias for:beginning_of_daynoon()LinkAlias for:middle_of_dayreadable_inspect()LinkOverrides the default inspect method with a human readable one, e.g., âMon, 21 Feb 2005âAlso aliased as:inspectSource:show|on GitHub# File activesupport/lib/active_support/core_ext/date/conversions.rb, line 61defreadable_inspectstrftime("%a, %d %b %Y")endsince(seconds)LinkConvertsDateto aTime(orDateTimeif necessary) with the time portion set to the beginning of the day (0:00) and then adds the specified number of secondsAlso aliased as:inSource:show|on GitHub# File activesupport/lib/active_support/core_ext/date/calculations.rb, line 61defsince(seconds)in_time_zone.since(seconds)endto_formatted_s(format = :default)LinkAlias for:to_fsto_fs(format = :default)LinkConvert to a formatted string. SeeDATE_FORMATSfor predefined formats.This method is aliased toto_formatted_s.date = Date.new(2007, 11, 10)       # => Sat, 10 Nov 2007

date.to_fs(:db)                     # => "2007-11-10"
date.to_formatted_s(:db)            # => "2007-11-10"

date.to_fs(:short)         # => "10 Nov"
date.to_fs(:number)        # => "20071110"
date.to_fs(:long)          # => "November 10, 2007"
date.to_fs(:long_ordinal)  # => "November 10th, 2007"
date.to_fs(:rfc822)        # => "10 Nov 2007"
date.to_fs(:iso8601)       # => "2007-11-10"Adding your own date formats toto_fsYou can add your own formats to theDate::DATE_FORMATShash. Use the format name as the hash key and either a strftime string or Proc instance that takes a date argument as the value.# config/initializers/date_formats.rb
Date::DATE_FORMATS[:month_and_year] = '%B %Y'
Date::DATE_FORMATS[:short_ordinal] = ->(date) { date.strftime("%B #{date.day.ordinalize}") }Also aliased as:to_formatted_sSource:show|on GitHub# File activesupport/lib/active_support/core_ext/date/conversions.rb, line 47defto_fs(format=:default)ifformatter=DATE_FORMATS[format]ifformatter.respond_to?(:call)formatter.call(self).to_selsestrftime(formatter)endelseto_sendendto_time(form = :local)LinkConverts aDateinstance to aTime, where the time is set to the beginning of the day. The timezone can be either:localor:utc(default:local).date = Date.new(2007, 11, 10)  # => Sat, 10 Nov 2007

date.to_time                   # => 2007-11-10 00:00:00 0800
date.to_time(:local)           # => 2007-11-10 00:00:00 0800

date.to_time(:utc)             # => 2007-11-10 00:00:00 UTCNOTE: The:localtimezone is Rubyâsprocesstimezone, i.e.ENV['TZ']. If theapplicationâstimezone is needed, then usein_time_zoneinstead.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/date/conversions.rb, line 81defto_time(form=:local)raiseArgumentError,"Expected :local or :utc, got #{form.inspect}."unless[:local,:utc].include?(form)::Time.public_send(form,year,month,day)endxmlschema()LinkReturns a string which represents the time in used time zone asDateTimedefined by XML Schema:date = Date.new(2015, 05, 23)  # => Sat, 23 May 2015
date.xmlschema                 # => "2015-05-23T00:00:00+04:00"Source:show|on GitHub# File activesupport/lib/active_support/core_ext/date/conversions.rb, line 93defxmlschemain_time_zone.xmlschemaend