NamespaceCLASSEnumerable::SoleItemExpectedErrorMethodsCcompact_blankEexclude?,excludingIin_order_of,including,index_by,index_withMmany?,maximum,minimumPpick,pluckSsoleWwithoutInstance Public methodscompact_blank()LinkReturns a newArraywithout the blank items. UsesObject#blank?for determining if an item is blank.[1, "", nil, 2, " ", [], {}, false, true].compact_blank
# =>  [1, 2, true]

Set.new([nil, "", 1, false]).compact_blank
# => [1]When called on aHash, returns a newHashwithout the blank values.{ a: "", b: 1, c: nil, d: [], e: false, f: true }.compact_blank
# => { b: 1, f: true }Source:show|on GitHub# File activesupport/lib/active_support/core_ext/enumerable.rb, line 184defcompact_blankreject(&:blank?)endexclude?(object)LinkThe negative of theEnumerable#include?. Returnstrueif the collection does not include the object.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/enumerable.rb, line 118defexclude?(object)!include?(object)endexcluding(*elements)LinkReturns a copy of the enumerable excluding the specified elements.["David", "Rafael", "Aaron", "Todd"].excluding "Aaron", "Todd"
# => ["David", "Rafael"]

["David", "Rafael", "Aaron", "Todd"].excluding %w[ Aaron Todd ]
# => ["David", "Rafael"]

{foo: 1, bar: 2, baz: 3}.excluding :bar
# => {foo: 1, baz: 3}Also aliased as:withoutSource:show|on GitHub# File activesupport/lib/active_support/core_ext/enumerable.rb, line 132defexcluding(*elements)elements.flatten!(1)reject{|element|elements.include?(element) }endin_order_of(key, series)LinkReturns a newArraywhere the order has been set to that provided in theseries, based on thekeyof the objects in the original enumerable.[ Person.find(5), Person.find(3), Person.find(1) ].in_order_of(:id, [ 1, 5, 3 ])
# => [ Person.find(1), Person.find(5), Person.find(3) ]If theseriesinclude keys that have no corresponding element in theEnumerable, these are ignored. If theEnumerablehas additional elements that arenât named in theseries, these are not included in the result.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/enumerable.rb, line 196defin_order_of(key,series)group_by(&key).values_at(*series).flatten(1).compactendincluding(*elements)LinkReturns a new array that includes the passed elements.[ 1, 2, 3 ].including(4, 5)
# => [ 1, 2, 3, 4, 5 ]

["David", "Rafael"].including %w[ Aaron Todd ]
# => ["David", "Rafael", "Aaron", "Todd"]Source:show|on GitHub# File activesupport/lib/active_support/core_ext/enumerable.rb, line 112defincluding(*elements)to_a.including(*elements)endindex_by()LinkConvert an enumerable to a hash, using the block result as the key and the element as the value.people.index_by(&:login)
# => { "nextangle" => <Person ...>, "chade-" => <Person ...>, ...}

people.index_by { |person| "#{person.first_name} #{person.last_name}" }
# => { "Chade- Fowlersburg-e" => <Person ...>, "David Heinemeier Hansson" => <Person ...>, ...}Source:show|on GitHub# File activesupport/lib/active_support/core_ext/enumerable.rb, line 52defindex_byifblock_given?result= {}each{|elem|result[yield(elem)] =elem}resultelseto_enum(:index_by) {sizeifrespond_to?(:size) }endendindex_with(default = (no_default = true))LinkConvert an enumerable to a hash, using the element as the key and the block result as the value.post = Post.new(title: "hey there", body: "what's up?")

%i( title body ).index_with { |attr_name| post.public_send(attr_name) }
# => { title: "hey there", body: "what's up?" }If an argument is passed instead of a block, it will be used as the value for all elements:%i( created_at updated_at ).index_with(Time.now)
# => { created_at: 2020-03-09 22:31:47, updated_at: 2020-03-09 22:31:47 }Source:show|on GitHub# File activesupport/lib/active_support/core_ext/enumerable.rb, line 75defindex_with(default= (no_default=true))ifblock_given?result= {}each{|elem|result[elem] =yield(elem) }resultelsifno_defaultto_enum(:index_with) {sizeifrespond_to?(:size) }elseresult= {}each{|elem|result[elem] =default}resultendendmany?()LinkReturnstrueif the enumerable has more than 1 element. Functionally equivalent toenum.to_a.size > 1. Can be called with a block too, much like any?, sopeople.many? { |p| p.age > 26 }returnstrueif more than one person is over 26.Source:show|on GitHub# File activesupport/lib/active_support/core_ext/enumerable.rb, line 93defmany?cnt=0ifblock_given?any?do|*args|cnt+=1ifyield(*args)cnt>1endelseany?{ (cnt+=1)>1}endendmaximum(key)LinkCalculates the maximum from the extracted elements.payments = [Payment.new(5), Payment.new(15), Payment.new(10)]
payments.maximum(:price) # => 15Source:show|on GitHub# File activesupport/lib/active_support/core_ext/enumerable.rb, line 40defmaximum(key)map(&key).maxendminimum(key)LinkCalculates the minimum from the extracted elements.payments = [Payment.new(5), Payment.new(15), Payment.new(10)]
payments.minimum(:price) # => 5Source:show|on GitHub# File activesupport/lib/active_support/core_ext/enumerable.rb, line 32defminimum(key)map(&key).minendpick(*keys)LinkExtract the given key from the first element in the enumerable.[{ name: "David" }, { name: "Rafael" }, { name: "Aaron" }].pick(:name)
# => "David"

[{ id: 1, name: "David" }, { id: 2, name: "Rafael" }].pick(:id, :name)
# => [1, "David"]Source:show|on GitHub# File activesupport/lib/active_support/core_ext/enumerable.rb, line 161defpick(*keys)returnifnone?ifkeys.many?keys.map{|key|first[key] }elsefirst[keys.first]endendpluck(*keys)LinkExtract the given key from each element in the enumerable.[{ name: "David" }, { name: "Rafael" }, { name: "Aaron" }].pluck(:name)
# => ["David", "Rafael", "Aaron"]

[{ id: 1, name: "David" }, { id: 2, name: "Rafael" }].pluck(:id, :name)
# => [[1, "David"], [2, "Rafael"]]Source:show|on GitHub# File activesupport/lib/active_support/core_ext/enumerable.rb, line 145defpluck(*keys)ifkeys.many?map{|element|keys.map{|key|element[key] } }elsekey=keys.firstmap{|element|element[key] }endendsole()LinkReturns the sole item in the enumerable. If there are no items, or more than one item, raisesEnumerable::SoleItemExpectedError.["x"].sole          # => "x"
Set.new.sole        # => Enumerable::SoleItemExpectedError: no item found
{ a: 1, b: 2 }.sole # => Enumerable::SoleItemExpectedError: multiple items foundSource:show|on GitHub# File activesupport/lib/active_support/core_ext/enumerable.rb, line 206defsolecasecountwhen1thenreturnfirst# rubocop:disable Style/RedundantReturnwhen0thenraiseActiveSupport::EnumerableCoreExt::SoleItemExpectedError,"no item found"when2..thenraiseActiveSupport::EnumerableCoreExt::SoleItemExpectedError,"multiple items found"endendwithout(*elements)LinkAlias for:excluding