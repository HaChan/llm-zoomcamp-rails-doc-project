Action View Translation HelpersMethodsLl,localizeTt,translateIncluded ModulesActionView::Helpers::TagHelperAttributes[RW]raise_on_missing_translationsInstance Public methodsl(object, **options)LinkAlias for:localizelocalize(object, **options)LinkDelegates toI18n.localizewith no additional functionality.Seewww.rubydoc.info/gems/i18n/I18n/Backend/Base:localizefor more information.Also aliased as:lSource:show|on GitHub# File actionview/lib/action_view/helpers/translation_helper.rb, line 116deflocalize(object,**options)I18n.localize(object,**options)endt(key, **options)LinkAlias for:translatetranslate(key, **options)LinkDelegates toI18n#translatebut also performs three additional functions.First, it will ensure that any thrownMissingTranslationmessages will be rendered as inline spans that:Have atranslation-missingclass appliedContain the missing key as the value of thetitleattributeHave a titleized version of the last key segment as textFor example, the value returned for the missing translation key"blog.post.title"will be:<span
  class="translation_missing"
  title="translation missing: en.blog.post.title">Title</span>This allows for views to display rather reasonable strings while still giving developers a way to find missing translations.If you would prefer missing translations to raise an error, you can opt out of span-wrapping behavior globally by settingconfig.i18n.raise_on_missing_translations = trueor individually by passingraise: trueas an option totranslate.Second, if the key starts with a periodtranslatewill scope the key by the current partial. Callingtranslate(".foo")from thepeople/index.html.erbtemplate is equivalent to callingtranslate("people.index.foo"). This makes it less repetitive to translate many keys within the same partial and provides a convention to scope keys consistently.Third, the translation will be marked ashtml_safeif the key has the suffix â_htmlâ or the last element of the key is âhtmlâ. Callingtranslate("footer_html")ortranslate("footer.html")will return an HTML safe string that wonât be escaped by other HTML helper methods. This naming convention helps to identify translations that include HTML tags so that you know what kind of output to expect when you call translate in a template and translators know which keys they can provide HTML values for.To access the translated text along with the fully resolved translation key,translateaccepts a block:<%= translate(".relative_key") do |translation, resolved_key| %>
  <span title="<%= resolved_key %>"><%= translation %></span>
<% end %>This enables annotate translated text to be aware of the scope it was resolved against.Also aliased as:tSource:show|on GitHub# File actionview/lib/action_view/helpers/translation_helper.rb, line 73deftranslate(key,**options)returnkey.map{|k|translate(k,**options) }ifkey.is_a?(Array)key=key&.to_sunlesskey.is_a?(Symbol)alternatives=ifoptions.key?(:default)options[:default].is_a?(Array)?options.delete(:default).compact:[options.delete(:default)]endoptions[:raise] =trueifoptions[:raise].nil?&&TranslationHelper.raise_on_missing_translationsdefault=MISSING_TRANSLATIONtranslation=whilekey||alternatives.present?ifalternatives.blank?&&!options[:raise].nil?default=NO_DEFAULT# let I18n handle missing translationendkey=scope_key_by_partial(key)translated=ActiveSupport::HtmlSafeTranslation.translate(key,**options,default:default)breaktranslatedunlesstranslated==MISSING_TRANSLATIONifalternatives.present?&&!alternatives.first.is_a?(Symbol)breakalternatives.first&&I18n.translate(nil,**options,default:alternatives)endfirst_key||=keykey=alternatives&.shiftendifkey.nil?&&!first_key.nil?translation=missing_translation(first_key,options)key=first_keyendblock_given??yield(translation,key):translationend