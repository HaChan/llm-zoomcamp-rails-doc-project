Utility for generating and deriving random keys.MethodsDderive_key_fromGgenerate_random_hex_key,generate_random_keyNnewAttributes[R]hash_digest_classClass Public methodsnew(hash_digest_class: ActiveRecord::Encryption.config.hash_digest_class)LinkSource:show|on GitHub# File activerecord/lib/active_record/encryption/key_generator.rb, line 11definitialize(hash_digest_class:ActiveRecord::Encryption.config.hash_digest_class)@hash_digest_class=hash_digest_classendInstance Public methodsderive_key_from(password, length: key_length)LinkDerives a key from the given password. The key will have a size in bytes of:length(configuredCipherâs length by default)The generated key will be salted with the value ofActiveRecord::Encryption.key_derivation_saltSource:show|on GitHub# File activerecord/lib/active_record/encryption/key_generator.rb, line 38defderive_key_from(password,length:key_length)ActiveSupport::KeyGenerator.new(password,hash_digest_class:hash_digest_class)
    .generate_key(key_derivation_salt,length)endgenerate_random_hex_key(length: key_length)LinkReturns a random key in hexadecimal format. The key will have a size in bytes of:length(configuredCipherâs length by default)Hexadecimal format is handy for representing keys as printable text. To maximize the space of characters used, it is good practice including not printable characters. Hexadecimal format ensures that generated keys are representable with plain textTo convert back to the original string with the desired length:[ value ].pack("H*")Source:show|on GitHub# File activerecord/lib/active_record/encryption/key_generator.rb, line 30defgenerate_random_hex_key(length:key_length)generate_random_key(length:length).unpack("H*")[0]endgenerate_random_key(length: key_length)LinkReturns a random key. The key will have a size in bytes of:length(configuredCipherâs length by default)Source:show|on GitHub# File activerecord/lib/active_record/encryption/key_generator.rb, line 16defgenerate_random_key(length:key_length)SecureRandom.random_bytes(length)end