MethodsCconfig,config_accessor,configureInstance Public methodsconfig()LinkSource:show|on GitHub# File activesupport/lib/active_support/configurable.rb, line 30defconfig@_config||=ifrespond_to?(:superclass)&&superclass.respond_to?(:config)superclass.config.inheritable_copyelse# create a new "anonymous" class that will host the compiled reader methodsClass.new(Configuration).newendendconfigure()LinkSource:show|on GitHub# File activesupport/lib/active_support/configurable.rb, line 39defconfigureyieldconfigendInstance Private methodsconfig_accessor(*names, instance_reader: true, instance_writer: true, instance_accessor: true, default: nil)LinkAllows you to add shortcut so that you donât have to refer to attribute through config. Also look at the example for config to contrast.Defines both class and instance config accessors.class User
  include ActiveSupport::Configurable
  config_accessor :allowed_access
end

User.allowed_access # => nil
User.allowed_access = false
User.allowed_access # => false

user = User.new
user.allowed_access # => false
user.allowed_access = true
user.allowed_access # => true

User.allowed_access # => falseThe attribute name must be a valid method name in Ruby.class User
  include ActiveSupport::Configurable
  config_accessor :"1_Badname"
end
# => NameError: invalid config attribute nameTo omit the instance writer method, passinstance_writer: false. To omit the instance reader method, passinstance_reader: false.class User
  include ActiveSupport::Configurable
  config_accessor :allowed_access, instance_reader: false, instance_writer: false
end

User.allowed_access = false
User.allowed_access # => false

User.new.allowed_access = true # => NoMethodError
User.new.allowed_access        # => NoMethodErrorOr passinstance_accessor: false, to omit both instance methods.class User
  include ActiveSupport::Configurable
  config_accessor :allowed_access, instance_accessor: false
end

User.allowed_access = false
User.allowed_access # => false

User.new.allowed_access = true # => NoMethodError
User.new.allowed_access        # => NoMethodErrorAlso you can passdefaultor a block to set up the attribute with a default value.class User
  include ActiveSupport::Configurable
  config_accessor :allowed_access, default: false
  config_accessor :hair_colors do
    [:brown, :black, :blonde, :red]
  end
end

User.allowed_access # => false
User.hair_colors # => [:brown, :black, :blonde, :red]Source:show|on GitHub# File activesupport/lib/active_support/configurable.rb, line 111defconfig_accessor(*names,instance_reader:true,instance_writer:true,instance_accessor:true,default:nil)# :doc:names.eachdo|name|raiseNameError.new("invalid config attribute name")unless/\A[_A-Za-z]\w*\z/.match?(name)reader,reader_line="def #{name}; config.#{name}; end",__LINE__writer,writer_line="def #{name}=(value); config.#{name} = value; end",__LINE__singleton_class.class_evalreader,__FILE__,reader_linesingleton_class.class_evalwriter,__FILE__,writer_lineifinstance_accessorclass_evalreader,__FILE__,reader_lineifinstance_readerclass_evalwriter,__FILE__,writer_lineifinstance_writerendsend("#{name}=",block_given??yield:default)endend