Active Storage VariantImage blobs can have variants that are the result of a set of transformations applied to the original. These variants are used to create thumbnails, fixed-size avatars, or any other derivative image from the original.Variants rely onImageProcessinggem for the actual transformations of the file, so you must addgem "image_processing"to your Gemfile if you wish to use variants. By default, images will be processed withImageMagickusing theMiniMagickgem, but you can also switch to thelibvipsprocessor operated by theruby-vipsgem).Rails.application.config.active_storage.variant_processor
# => :mini_magick

Rails.application.config.active_storage.variant_processor = :vips
# => :vipsNote that to create a variant itâs necessary to download the entire blob file from the service. Because of this process, you also want to be considerate about when the variant is actually processed. You shouldnât be processing variants inline in a template, for example. Delay the processing to an on-demand controller, like the one provided in ActiveStorage::RepresentationsController.To refer to such a delayed on-demand variant, simply link to the variant through the resolved route provided by Active Storage like so:<%= image_tag Current.user.avatar.variant(resize_to_limit: [100, 100]) %>This will create a URL for that specific blob with that specific variant, which the ActiveStorage::RepresentationsController can then produce on-demand.When you do want to actually produce the variant needed, callprocessed. This will check that the variant has already been processed and uploaded to the service, and, if so, just return that. Otherwise it will perform the transformations, upload the variant to the service, and return itself again. Example:avatar.variant(resize_to_limit: [100, 100]).processed.urlThis will create and process a variant of the avatar blob thatâs constrained to a height and width of 100. Then itâll upload said variant to the service according to a derivative key of the blob and the transformations.You can combine any number of ImageMagick/libvips operations into a variant, as well as any macros provided by the ImageProcessing gem (such asresize_to_limit):avatar.variant(resize_to_limit: [800, 800], colourspace: "b-w", rotate: "-90")Visit the following links for a list of available ImageProcessing commands and ImageMagick/libvips operations:ImageProcessing::MiniMagickImageMagick referenceImageProcessing::Vipsruby-vips referenceMethodsDdestroy,downloadFfilenameIimageKkeyNnewPprocessedUurlAttributes[R]blob[R]variationClass Public methodsnew(blob, variation_or_variation_key)LinkSource:show|on GitHub# File activestorage/app/models/active_storage/variant.rb, line 62definitialize(blob,variation_or_variation_key)@blob,@variation=blob,ActiveStorage::Variation.wrap(variation_or_variation_key)endInstance Public methodsdestroy()LinkDeletes variant file from service.Source:show|on GitHub# File activestorage/app/models/active_storage/variant.rb, line 102defdestroyservice.delete(key)enddownload(&block)LinkDownloads the file associated with this variant. If no block is given, the entire file is read into memory and returned. Thatâll use a lot of RAM for very large files. If a block is given, then the download is streamed and yielded in chunks.Source:show|on GitHub# File activestorage/app/models/active_storage/variant.rb, line 88defdownload(&block)service.downloadkey,&blockendfilename()LinkSource:show|on GitHub# File activestorage/app/models/active_storage/variant.rb, line 92deffilenameActiveStorage::Filename.new"#{blob.filename.base}.#{variation.format.downcase}"endimage()LinkReturns the receiving variant. AllowsActiveStorage::VariantandActiveStorage::Previewinstances to be used interchangeably.Source:show|on GitHub# File activestorage/app/models/active_storage/variant.rb, line 97defimageselfendkey()LinkReturns a combination key of the blob and the variation that together identifies a specific variant.Source:show|on GitHub# File activestorage/app/models/active_storage/variant.rb, line 73defkey"variants/#{blob.key}/#{OpenSSL::Digest::SHA256.hexdigest(variation.key)}"endprocessed()LinkReturns the variant instance itself after itâs been processed or an existing processing has been found on the service.Source:show|on GitHub# File activestorage/app/models/active_storage/variant.rb, line 67defprocessedprocessunlessprocessed?selfendurl(expires_in: ActiveStorage.service_urls_expire_in, disposition: :inline)LinkReturns the URL of the blob variant on the service. See {ActiveStorage::Blob#url} for details.Useurl_for(variant)(or the implied form, likelink_to variantorredirect_to variant) to get the stable URL for a variant that points to the ActiveStorage::RepresentationsController, which in turn will use thisservice_callmethod for its redirection.Source:show|on GitHub# File activestorage/app/models/active_storage/variant.rb, line 82defurl(expires_in:ActiveStorage.service_urls_expire_in,disposition::inline)service.urlkey,expires_in:expires_in,disposition:disposition,filename:filename,content_type:content_typeend