Database Selector MiddlewareTheDatabaseSelectorMiddlewareprovides a framework for automatically swapping from the primary to the replica database connection. Rails provides a basic framework to determine when to swap and allows for applications to write custom strategy classes to override the default behavior.The resolver class defines when the application should switch (i.e. read from the primary if a write occurred less than 2 seconds ago) and a resolver context class that sets a value that helps the resolver class decide when to switch.Rails default middleware uses the requestâs session to set a timestamp that informs the application when to read from a primary or read from a replica.To use theDatabaseSelectorin your application with default settings, run the provided generator.$ bin/rails g active_record:multi_dbThis will create a file namedconfig/initializers/multi_db.rbwith the following contents:Rails.application.configure do
  config.active_record.database_selector = { delay: 2.seconds }
  config.active_record.database_resolver = ActiveRecord::Middleware::DatabaseSelector::Resolver
  config.active_record.database_resolver_context = ActiveRecord::Middleware::DatabaseSelector::Resolver::Session
endAlternatively you can set the options in your environment config or any other config file loaded on boot.The default behavior can be changed by setting the config options to a custom class:config.active_record.database_selector = { delay: 2.seconds }
config.active_record.database_resolver = MyResolver
config.active_record.database_resolver_context = MyResolver::MySessionNote: If you are usingrails new my_app --minimalyou will need to callrequire "active_support/core_ext/integer/time"to load the core extension in order to use2.secondsMethodsCcallNnewAttributes[R]context_klass[R]options[R]resolver_klassClass Public methodsnew(app, resolver_klass = nil, context_klass = nil, options = {})LinkSource:show|on GitHub# File activerecord/lib/active_record/middleware/database_selector.rb, line 52definitialize(app,resolver_klass=nil,context_klass=nil,options= {})@app=app@resolver_klass=resolver_klass||Resolver@context_klass=context_klass||Resolver::Session@options=optionsendInstance Public methodscall(env)LinkMiddlewarethat determines which database connection to use in a multiple database application.Source:show|on GitHub# File activerecord/lib/active_record/middleware/database_selector.rb, line 63defcall(env)request=ActionDispatch::Request.new(env)select_database(request)do@app.call(env)endend