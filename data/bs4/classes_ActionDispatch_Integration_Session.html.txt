An instance of this class represents a set of requests and responses performed sequentially by a test process. Because you can instantiate multiple sessions and run them side-by-side, you can also mimic (to some limited extent) multiple simultaneous users interacting with your system.Typically, you will instantiate a new session usingRunner#open_session, rather than instantiating aSessiondirectly.MethodsCcookiesHhost,https!,https?NnewPprocessRreset!Uurl_optionsIncluded ModulesMinitest::AssertionsActionDispatch::Routing::UrlForConstantsDEFAULT_HOST="www.example.com"Attributes[RW]acceptThe Accept header to send.[R]controllerA reference to the controller instance used by the last request.[W]host[W]host![RW]remote_addrTheremote_addrused in the last request.[R]requestA reference to the request instance used by the last request.[RW]request_countA running counter of the number of requests processed.[R]responseA reference to the response instance used by the last request.Class Public methodsnew(app)LinkCreate and initialize a newSessioninstance.Source:show|on GitHub# File actionpack/lib/action_dispatch/testing/integration.rb, line 133definitialize(app)super()@app=appreset!endInstance Public methodscookies()LinkA map of the cookies returned by the last response, and which will be sent with the next request.Source:show|on GitHub# File actionpack/lib/action_dispatch/testing/integration.rb, line 114defcookies_mock_session.cookie_jarendhost()LinkThe hostname used in the last request.Source:show|on GitHub# File actionpack/lib/action_dispatch/testing/integration.rb, line 101defhost@host||DEFAULT_HOSTendhttps!(flag = true)LinkSpecify whether or not the session should mimic a secure HTTPS request.session.https!
session.https!(false)Source:show|on GitHub# File actionpack/lib/action_dispatch/testing/integration.rb, line 180defhttps!(flag=true)@https=flagendhttps?()LinkReturnstrueif the session is mimicking a secure HTTPS request.if session.https?
  ...
endSource:show|on GitHub# File actionpack/lib/action_dispatch/testing/integration.rb, line 189defhttps?@httpsendprocess(method, path, params: nil, headers: nil, env: nil, xhr: false, as: nil)LinkPerforms the actual request.method: The HTTP method (GET, POST, PATCH, PUT, DELETE, HEAD, OPTIONS) as a symbol.path: The URI (as aString) on which you want to perform the request.params: The HTTP parameters that you want to pass. This may benil, aHash, or aStringthat is appropriately encoded (application/x-www-form-urlencodedormultipart/form-data).headers: Additional headers to pass, as aHash. The headers will be merged into the Rack env hash.env: Additional env to pass, as aHash. The headers will be merged into the Rack env hash.xhr: Set totrueif you want to make an Ajax request. Adds request headers characteristic of XMLHttpRequest e.g. HTTP_X_REQUESTED_WITH. The headers will be merged into the Rack env hash.as: Used for encoding the request with different content type. Supports:jsonby default and will set the appropriate request headers. The headers will be merged into the Rack env hash.This method is rarely used directly. UseRequestHelpers#get,RequestHelpers#post, or other standard HTTP methods in integration tests.#processis only required when using a request method that doesnât have a method defined in the integration tests.This method returns the response status, after performing the request. Furthermore, if this method was called from anActionDispatch::IntegrationTestobject, then that objectâs@responseinstance variable will point to aResponseobject which one can use to inspect the details of the response.Example: process :get, â/authorâ, params: { since: 201501011400 }Source:show|on GitHub# File actionpack/lib/action_dispatch/testing/integration.rb, line 225defprocess(method,path,params:nil,headers:nil,env:nil,xhr:false,as:nil)request_encoder=RequestEncoder.encoder(as)headers||={}ifmethod==:get&&as==:json&&paramsheaders["X-Http-Method-Override"] ="GET"method=:postendifpath.include?("://")path=build_expanded_path(path)do|location|https!URI::HTTPS===locationiflocation.schemeifurl_host=location.hostdefault=Rack::Request::DEFAULT_PORTS[location.scheme]url_host+=":#{location.port}"ifdefault!=location.porthost!url_hostendendendhostname,port=host.split(":")request_env= {:method=>method,:params=>request_encoder.encode_params(params),"SERVER_NAME"=>hostname,"SERVER_PORT"=>port||(https??"443":"80"),"HTTPS"=>https??"on":"off","rack.url_scheme"=>https??"https":"http","REQUEST_URI"=>path,"HTTP_HOST"=>host,"REMOTE_ADDR"=>remote_addr,"HTTP_ACCEPT"=>request_encoder.accept_header||accept}ifrequest_encoder.content_typerequest_env["CONTENT_TYPE"] =request_encoder.content_typeendwrapped_headers=Http::Headers.from_hash({})wrapped_headers.merge!(headers)ifheadersifxhrwrapped_headers["HTTP_X_REQUESTED_WITH"] ="XMLHttpRequest"wrapped_headers["HTTP_ACCEPT"]||=[Mime[:js],Mime[:html],Mime[:xml],"text/xml","*/*"].join(", ")end# This modifies the passed request_env directly.ifwrapped_headers.present?Http::Headers.from_hash(request_env).merge!(wrapped_headers)endifenv.present?Http::Headers.from_hash(request_env).merge!(env)endsession=Rack::Test::Session.new(_mock_session)# NOTE: rack-test v0.5 doesn't build a default uri correctly Make sure requested# path is always a full URI.session.request(build_full_uri(path,request_env),request_env)@request_count+=1@request=ActionDispatch::Request.new(session.last_request.env)response=_mock_session.last_response@response=ActionDispatch::TestResponse.from_response(response)@response.request=@request@html_document=nil@url_options=nil@controller=@request.controller_instanceresponse.statusendreset!()LinkResets the instance. This can be used to reset the state information in an existing session instance, so it can be used from a clean-slate condition.session.reset!Source:show|on GitHub# File actionpack/lib/action_dispatch/testing/integration.rb, line 156defreset!@https=false@controller=@request=@response=nil@_mock_session=nil@request_count=0@url_options=nilself.host=DEFAULT_HOSTself.remote_addr="127.0.0.1"self.accept="text/xml,application/xml,application/xhtml+xml,"\"text/html;q=0.9,text/plain;q=0.8,image/png,"\"*/*;q=0.5"unlessdefined?@named_routes_configured# the helpers are made protected by default--we make them public for easier# access during testing and troubleshooting.@named_routes_configured=trueendendurl_options()LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/testing/integration.rb, line 140defurl_options@url_options||=default_url_options.dup.tapdo|url_options|url_options.reverse_merge!(controller.url_options)ifcontroller.respond_to?(:url_options)if@app.respond_to?(:routes)url_options.reverse_merge!(@app.routes.default_url_options)endurl_options.reverse_merge!(host:host,protocol:https??"https":"http")endend