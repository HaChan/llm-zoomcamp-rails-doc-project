Active Model NamingCreates amodel_namemethod on your object.To implement, just extendActiveModel::Namingin your object:class BookCover
  extend ActiveModel::Naming
end

BookCover.model_name.name   # => "BookCover"
BookCover.model_name.human  # => "Book cover"

BookCover.model_name.i18n_key              # => :book_cover
BookModule::BookCover.model_name.i18n_key  # => :"book_module/book_cover"Providing the functionality thatActiveModel::Namingprovides in your object is required to pass the Active ModelLinttest. So either extending the provided method below, or rolling your own is required.MethodsMmodel_namePparam_key,pluralRroute_keySsingular,singular_route_keyUuncountable?Class Public methodsparam_key(record_or_class)LinkReturns string to use for params names. It differs for namespaced models regarding whether itâs inside isolated engine.# For isolated engine:
ActiveModel::Naming.param_key(Blog::Post) # => "post"

# For shared engine:
ActiveModel::Naming.param_key(Blog::Post) # => "blog_post"Source:show|on GitHub# File activemodel/lib/active_model/naming.rb, line 338defself.param_key(record_or_class)model_name_from_record_or_class(record_or_class).param_keyendplural(record_or_class)LinkReturns the plural class name of a record or class.ActiveModel::Naming.plural(post)             # => "posts"
ActiveModel::Naming.plural(Highrise::Person) # => "highrise_people"Source:show|on GitHub# File activemodel/lib/active_model/naming.rb, line 283defself.plural(record_or_class)model_name_from_record_or_class(record_or_class).pluralendroute_key(record_or_class)LinkReturns string to use while generating route names. It differs for namespaced models regarding whether itâs inside isolated engine.# For isolated engine:
ActiveModel::Naming.route_key(Blog::Post) # => "posts"

# For shared engine:
ActiveModel::Naming.route_key(Blog::Post) # => "blog_posts"The route key also considers if the noun is uncountable and, in such cases, automatically appends _index.Source:show|on GitHub# File activemodel/lib/active_model/naming.rb, line 326defself.route_key(record_or_class)model_name_from_record_or_class(record_or_class).route_keyendsingular(record_or_class)LinkReturns the singular class name of a record or class.ActiveModel::Naming.singular(post)             # => "post"
ActiveModel::Naming.singular(Highrise::Person) # => "highrise_person"Source:show|on GitHub# File activemodel/lib/active_model/naming.rb, line 291defself.singular(record_or_class)model_name_from_record_or_class(record_or_class).singularendsingular_route_key(record_or_class)LinkReturns string to use while generating route names. It differs for namespaced models regarding whether itâs inside isolated engine.# For isolated engine:
ActiveModel::Naming.singular_route_key(Blog::Post) # => "post"

# For shared engine:
ActiveModel::Naming.singular_route_key(Blog::Post) # => "blog_post"Source:show|on GitHub# File activemodel/lib/active_model/naming.rb, line 311defself.singular_route_key(record_or_class)model_name_from_record_or_class(record_or_class).singular_route_keyenduncountable?(record_or_class)LinkIdentifies whether the class name of a record or class is uncountable.ActiveModel::Naming.uncountable?(Sheep) # => true
ActiveModel::Naming.uncountable?(Post)  # => falseSource:show|on GitHub# File activemodel/lib/active_model/naming.rb, line 299defself.uncountable?(record_or_class)model_name_from_record_or_class(record_or_class).uncountable?endInstance Public methodsmodel_name()LinkReturns anActiveModel::Nameobject for module. It can be used to retrieve all kinds of naming-related information (SeeActiveModel::Namefor more information).class Person
  extend ActiveModel::Naming
end

Person.model_name.name     # => "Person"
Person.model_name.class    # => ActiveModel::Name
Person.model_name.singular # => "person"
Person.model_name.plural   # => "people"Source:show|on GitHub# File activemodel/lib/active_model/naming.rb, line 270defmodel_name@_model_name||=beginnamespace=module_parents.detectdo|n|n.respond_to?(:use_relative_model_naming?)&&n.use_relative_model_naming?endActiveModel::Name.new(self,namespace)endend