Baseclass for AggregateReflection and AssociationReflection. Objects of AggregateReflection and AssociationReflection are returned by theReflection::ClassMethods.Methods#==Aautosave=Ccompute_classKklassNnewSscope_forAttributes[R]active_record[R]nameReturns the name of the macro.composed_of :balance, class_name: 'Money'returns:balancehas_many :clientsreturns:clients[R]optionsReturns the hash of options used for the macro.composed_of :balance, class_name: 'Money'returns{ class_name: "Money" }has_many :clientsreturns{}[R]scopeClass Public methodsnew(name, scope, options, active_record)LinkSource:show|on GitHub# File activerecord/lib/active_record/reflection.rb, line 396definitialize(name,scope,options,active_record)super()@name=name@scope=scope@options=normalize_options(options)@active_record=active_record@klass=options[:anonymous_class]@plural_name=active_record.pluralize_table_names?name.to_s.pluralize:name.to_sendInstance Public methods==(other_aggregation)LinkReturnstrueifselfandother_aggregationhave the samenameattribute,active_recordattribute, andother_aggregationhas an options hash assigned to it.Source:show|on GitHub# File activerecord/lib/active_record/reflection.rb, line 448def==(other_aggregation)super||other_aggregation.kind_of?(self.class)&&name==other_aggregation.name&&!other_aggregation.options.nil?&&active_record==other_aggregation.active_recordendautosave=(autosave)LinkSource:show|on GitHub# File activerecord/lib/active_record/reflection.rb, line 407defautosave=(autosave)@options[:autosave] =autosaveparent_reflection=self.parent_reflectionifparent_reflectionparent_reflection.autosave=autosaveendendcompute_class(name)LinkSource:show|on GitHub# File activerecord/lib/active_record/reflection.rb, line 442defcompute_class(name)name.constantizeendklass()LinkReturns the class for the macro.composed_of :balance, class_name: 'Money'returns the Money classhas_many :clientsreturns the Client classclass Company < ActiveRecord::Base
  has_many :clients
end

Company.reflect_on_association(:clients).klass
# => ClientNote:Do not callklass.neworklass.createto instantiate a new association object. Usebuild_associationorcreate_associationinstead. This allows plugins to hook into association object creation.Source:show|on GitHub# File activerecord/lib/active_record/reflection.rb, line 430defklass@klass||=_klass(class_name)endscope_for(relation, owner = nil)LinkSource:show|on GitHub# File activerecord/lib/active_record/reflection.rb, line 456defscope_for(relation,owner=nil)relation.instance_exec(owner,&scope)||relationend