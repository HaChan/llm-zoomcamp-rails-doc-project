Action Mailer MessageDeliveryTheActionMailer::MessageDeliveryclass is used byActionMailer::Basewhen creating a new mailer.MessageDeliveryis a wrapper (Delegatorsubclass) around a lazy createdMail::Message. You can get direct access to theMail::Message, deliver the email or schedule the email to be sent through Active Job.Notifier.welcome(User.first)               # an ActionMailer::MessageDelivery object
Notifier.welcome(User.first).deliver_now   # sends the email
Notifier.welcome(User.first).deliver_later # enqueue email delivery as a job through Active Job
Notifier.welcome(User.first).message       # a Mail::Message objectMethodsDdeliver_later,deliver_later!,deliver_now,deliver_now!MmessagePprocessed?Instance Public methodsdeliver_later(options = {})LinkEnqueues the email to be delivered through Active Job. When the job runs it will send the email usingdeliver_now.Notifier.welcome(User.first).deliver_later
Notifier.welcome(User.first).deliver_later(wait: 1.hour)
Notifier.welcome(User.first).deliver_later(wait_until: 10.hours.from_now)
Notifier.welcome(User.first).deliver_later(priority: 10)Options::wait- Enqueue the email to be delivered with a delay.:wait_until- Enqueue the email to be delivered at (after) a specific date / time.:queue- Enqueue the email on the specified queue.:priority- Enqueues the email with the specified priorityBy default, the email will be enqueued using ActionMailer::MailDeliveryJob on the default queue. Mailer classes can customize the queue name used for the default job by assigning adeliver_later_queue_nameclass variable, or provide a custom job by assigning adelivery_job. When a custom job is used, it controls the queue name.class AccountRegistrationMailer < ApplicationMailer
  self.delivery_job = RegistrationDeliveryJob
endSource:show|on GitHub# File actionmailer/lib/action_mailer/message_delivery.rb, line 102defdeliver_later(options= {})enqueue_delivery:deliver_now,optionsenddeliver_later!(options = {})LinkEnqueues the email to be delivered through Active Job. When the job runs it will send the email usingdeliver_now!. That means that the message will be sent bypassing checkingperform_deliveriesandraise_delivery_errors, so use with caution.Notifier.welcome(User.first).deliver_later!
Notifier.welcome(User.first).deliver_later!(wait: 1.hour)
Notifier.welcome(User.first).deliver_later!(wait_until: 10.hours.from_now)
Notifier.welcome(User.first).deliver_later!(priority: 10)Options::wait- Enqueue the email to be delivered with a delay:wait_until- Enqueue the email to be delivered at (after) a specific date / time:queue- Enqueue the email on the specified queue:priority- Enqueues the email with the specified priorityBy default, the email will be enqueued using ActionMailer::MailDeliveryJob on the default queue. Mailer classes can customize the queue name used for the default job by assigning adeliver_later_queue_nameclass variable, or provide a custom job by assigning adelivery_job. When a custom job is used, it controls the queue name.class AccountRegistrationMailer < ApplicationMailer
  self.delivery_job = RegistrationDeliveryJob
endSource:show|on GitHub# File actionmailer/lib/action_mailer/message_delivery.rb, line 75defdeliver_later!(options= {})enqueue_delivery:deliver_now!,optionsenddeliver_now()LinkDelivers an email:Notifier.welcome(User.first).deliver_nowSource:show|on GitHub# File actionmailer/lib/action_mailer/message_delivery.rb, line 123defdeliver_nowprocessed_mailer.handle_exceptionsdoprocessed_mailer.run_callbacks(:deliver)domessage.deliverendendenddeliver_now!()LinkDelivers an email without checkingperform_deliveriesandraise_delivery_errors, so use with caution.Notifier.welcome(User.first).deliver_now!Source:show|on GitHub# File actionmailer/lib/action_mailer/message_delivery.rb, line 111defdeliver_now!processed_mailer.handle_exceptionsdoprocessed_mailer.run_callbacks(:deliver)domessage.deliver!endendendmessage()LinkReturns the resultingMail::MessageSource:show|on GitHub# File actionmailer/lib/action_mailer/message_delivery.rb, line 41defmessage__getobj__endprocessed?()LinkWas the delegate loaded, causing the mailer action to be processed?Source:show|on GitHub# File actionmailer/lib/action_mailer/message_delivery.rb, line 46defprocessed?@processed_mailer||@mail_messageend