Action Mailer BaseAction Mailer allows you to send email from your application using a mailer model and views.Mailer ModelsTo use Action Mailer, you need to create a mailer model.$ bin/rails generate mailer NotifierThe generated model inherits fromApplicationMailerwhich in turn inherits fromActionMailer::Base. A mailer model defines methods used to generate an email message. In these methods, you can set up variables to be used in the mailer views, options on the mail itself such as the:fromaddress, and attachments.class ApplicationMailer < ActionMailer::Base
  default from: 'from@example.com'
  layout 'mailer'
end

class NotifierMailer < ApplicationMailer
  default from: 'no-reply@example.com',
          return_path: 'system@example.com'

  def welcome(recipient)
    @account = recipient
    mail(to: recipient.email_address_with_name,
         bcc: ["bcc@example.com", "Order Watcher <watcher@example.com>"])
  end
endWithin the mailer method, you have access to the following methods:attachments[]=- Allows you to add attachments to your email in an intuitive manner;attachments['filename.png'] = File.read('path/to/filename.png')attachments.inline[]=- Allows you to add an inline attachment to your email in the same manner asattachments[]=headers[]=- Allows you to specify any header field in your email such asheaders['X-No-Spam'] = 'True'. Note that declaring a header multiple times will add many fields of the same name. Readheadersdoc for more information.headers(hash)- Allows you to specify multiple headers in your email such asheaders({'X-No-Spam' => 'True', 'In-Reply-To' => '1234@message.id'})mail- Allows you to specify email to be sent.The hash passed to the mail method allows you to specify any header that aMail::Messagewill accept (any valid email header including optional fields).Themailmethod, if not passed a block, will inspect your views and send all the views with the same name as the method, so the above action would send thewelcome.text.erbview file as well as thewelcome.html.erbview file in amultipart/alternativeemail.If you want to explicitly render only certain templates, pass a block:mail(to: user.email) do |format|
  format.text
  format.html
endThe block syntax is also useful in providing information specific to a part:mail(to: user.email) do |format|
  format.text(content_transfer_encoding: "base64")
  format.html
endOr even to render a special view:mail(to: user.email) do |format|
  format.text
  format.html { render "some_other_template" }
endMailer viewsLike Action Controller, each mailer class has a corresponding view directory in which each method of the class looks for a template with its name.To define a template to be used with a mailer, create an.erbfile with the same name as the method in your mailer model. For example, in the mailer defined above, the template atapp/views/notifier_mailer/welcome.text.erbwould be used to generate the email.Variables defined in the methods of your mailer model are accessible as instance variables in their corresponding view.Emails by default are sent in plain text, so a sample view for our model example might look like this:Hi <%= @account.name %>,
Thanks for joining our service! Please check back often.You can even use Action View helpers in these views. For example:You got a new note!
<%= truncate(@note.body, length: 25) %>If you need to access the subject, from, or the recipients in the view, you can do that through message object:You got a new note from <%= message.from %>!
<%= truncate(@note.body, length: 25) %>Generating URLsURLs can be generated in mailer views usingurl_foror named routes. Unlike controllers from Action Pack, the mailer instance doesnât have any context about the incoming request, so youâll need to provide all of the details needed to generate a URL.When usingurl_foryouâll need to provide the:host,:controller, and:action:<%= url_for(host: "example.com", controller: "welcome", action: "greeting") %>When using named routes you only need to supply the:host:<%= users_url(host: "example.com") %>You should use thenamed_route_urlstyle (which generates absolute URLs) and avoid using thenamed_route_pathstyle (which generates relative URLs), since clients reading the mail will have no concept of a current URL from which to determine a relative path.It is also possible to set a default host that will be used in all mailers by setting the:hostoption as a configuration option inconfig/application.rb:config.action_mailer.default_url_options = { host: "example.com" }You can also define adefault_url_optionsmethod on individual mailers to override these default settings per-mailer.By default whenconfig.force_sslistrue, URLs generated for hosts will use the HTTPS protocol.Sending mailOnce a mailer action and template are defined, you can deliver your message or defer its creation and delivery for later:NotifierMailer.welcome(User.first).deliver_now # sends the email
mail = NotifierMailer.welcome(User.first)      # => an ActionMailer::MessageDelivery object
mail.deliver_now                               # generates and sends the email nowTheActionMailer::MessageDeliveryclass is a wrapper around a delegate that will call your method to generate the mail. If you want direct access to the delegator, orMail::Message, you can call themessagemethod on theActionMailer::MessageDeliveryobject.NotifierMailer.welcome(User.first).message     # => a Mail::Message objectAction Mailer is nicely integrated with Active Job so you can generate and send emails in the background (example: outside of the request-response cycle, so the user doesnât have to wait on it):NotifierMailer.welcome(User.first).deliver_later # enqueue the email sending to Active JobNote thatdeliver_laterwill execute your method from the background job.You never instantiate your mailer class. Rather, you just call the method you defined on the class itself. All instance methods are expected to return a message object to be sent.Multipart EmailsMultipart messages can also be used implicitly because Action Mailer will automatically detect and use multipart templates, where each template is named after the name of the action, followed by the content type. Each such detected template will be added to the message, as a separate part.For example, if the following templates exist:signup_notification.text.erbsignup_notification.html.erbsignup_notification.xml.buildersignup_notification.yml.erbEach would be rendered and added as a separate part to the message, with the corresponding content type. The content type for the entire message is automatically set tomultipart/alternative, which indicates that the email contains multiple different representations of the same email body. The same instance variables defined in the action are passed to all email templates.Implicit template rendering is not performed if any attachments or parts have been added to the email. This means that youâll have to manually add each part to the email and set the content type of the email tomultipart/alternative.AttachmentsSending attachment in emails is easy:class NotifierMailer < ApplicationMailer
  def welcome(recipient)
    attachments['free_book.pdf'] = File.read('path/to/file.pdf')
    mail(to: recipient, subject: "New account information")
  end
endWhich will (if it had both awelcome.text.erbandwelcome.html.erbtemplate in the view directory), send a completemultipart/mixedemail with two parts, the first part being amultipart/alternativewith the text and HTML email parts inside, and the second being aapplication/pdfwith a Base64 encoded copy of the file.pdf book with the filenamefree_book.pdf.If you need to send attachments with no content, you need to create an empty view for it, or add an empty body parameter like this:class NotifierMailer < ApplicationMailer
  def welcome(recipient)
    attachments['free_book.pdf'] = File.read('path/to/file.pdf')
    mail(to: recipient, subject: "New account information", body: "")
  end
endYou can also send attachments with HTML template, in this case you need to add body, attachments, and custom content type like this:class NotifierMailer < ApplicationMailer
  def welcome(recipient)
    attachments["free_book.pdf"] = File.read("path/to/file.pdf")
    mail(to: recipient,
         subject: "New account information",
         content_type: "text/html",
         body: "<html><body>Hello there</body></html>")
  end
endInline AttachmentsYou can also specify that a file should be displayed inline with other HTML. This is useful if you want to display a corporate logo or a photo.class NotifierMailer < ApplicationMailer
  def welcome(recipient)
    attachments.inline['photo.png'] = File.read('path/to/photo.png')
    mail(to: recipient, subject: "Here is what we look like")
  end
endAnd then to reference the image in the view, you create awelcome.html.erbfile and make a call toimage_tagpassing in the attachment you want to display and then callurlon the attachment to get the relative content id path for the image source:<h1>Please Don't Cringe</h1>

<%= image_tag attachments['photo.png'].url -%>As we are using Action Viewâsimage_tagmethod, you can pass in any other options you want:<h1>Please Don't Cringe</h1>

<%= image_tag attachments['photo.png'].url, alt: 'Our Photo', class: 'photo' -%>Observing and Intercepting MailsAction Mailer provides hooks into theMailobserver and interceptor methods. These allow you to register classes that are called during the mail delivery life cycle.An observer class must implement the:delivered_email(message)method which will be called once for every email sent after the email has been sent.An interceptor class must implement the:delivering_email(message)method which will be called before the email is sent, allowing you to make modifications to the email before it hits the delivery agents. Your class should make any needed modifications directly to the passed inMail::Messageinstance.Default HashAction Mailer provides some intelligent defaults for your emails, these are usually specified in a default method inside the class definition:class NotifierMailer < ApplicationMailer
  default sender: 'system@example.com'
endYou can pass in any header value that aMail::Messageaccepts. Out of the box,ActionMailer::Basesets the following:mime_version: "1.0"charset:      "UTF-8"content_type: "text/plain"parts_order:  [ "text/plain", "text/enriched", "text/html" ]parts_orderandcharsetare not actually validMail::Messageheader fields, but Action Mailer translates them appropriately and sets the correct values.As you can pass in any header, you need to either quote the header as a string, or pass it in as an underscored symbol, so the following will work:class NotifierMailer < ApplicationMailer
  default 'Content-Transfer-Encoding' => '7bit',
          content_description: 'This is a description'
endFinally, Action Mailer also supports passingProcandLambdaobjects into the default hash, so you can define methods that evaluate as the message is being generated:class NotifierMailer < ApplicationMailer
  default 'X-Special-Header' => Proc.new { my_method }, to: -> { @inviter.email_address }

  private
    def my_method
      'some complex call'
    end
endNote that the proc/lambda is evaluated right at the start of the mail message generation, so if you set something in the default hash using a proc, and then set the same thing inside of your mailer method, it will get overwritten by the mailer method.It is also possible to set these default options that will be used in all mailers through thedefault_options=configuration inconfig/application.rb:config.action_mailer.default_options = { from: "no-reply@example.org" }CallbacksYou can specify callbacks usingbefore_actionandafter_actionfor configuring your messages, and usingbefore_deliverandafter_deliverfor wrapping the delivery process. For example, when you want to add default inline attachments and log delivery for all messages sent out by a certain mailer class:class NotifierMailer < ApplicationMailer
  before_action :add_inline_attachment!
  after_deliver :log_delivery

  def welcome
    mail
  end

  private
    def add_inline_attachment!
      attachments.inline["footer.jpg"] = File.read('/path/to/filename.jpg')
    end

    def log_delivery
      Rails.logger.info "Sent email with message id '#{message.message_id}' at #{Time.current}."
    end
endAction callbacks in Action Mailer are implemented usingAbstractController::Callbacks, so you can define and configure callbacks in the same manner that you would use callbacks in classes that inherit fromActionController::Base.Note that unless you have a specific reason to do so, you should prefer usingbefore_actionrather thanafter_actionin your Action Mailer classes so that headers are parsed properly.Rescuing Errorsrescueblocks inside of a mailer method cannot rescue errors that occur outside of rendering â for example, record deserialization errors in a background job, or errors from a third-party mail delivery service.To rescue errors that occur during any part of the mailing process, userescue_from:class NotifierMailer < ApplicationMailer
  rescue_from ActiveJob::DeserializationError do
    # ...
  end

  rescue_from "SomeThirdPartyService::ApiError" do
    # ...
  end

  def notify(recipient)
    mail(to: recipient, subject: "Notification")
  end
endPreviewing emailsYou can preview your email templates visually by adding a mailer preview file to theActionMailer::Base.preview_paths. Since most emails do something interesting with database data, youâll need to write some scenarios to load messages with fake data:class NotifierMailerPreview < ActionMailer::Preview
  def welcome
    NotifierMailer.welcome(User.first)
  end
endMethods must return aMail::Messageobject which can be generated by calling the mailer method without the additionaldeliver_now/deliver_later. The location of the mailer preview directories can be configured using thepreview_pathsoption which has a default oftest/mailers/previews:config.action_mailer.preview_paths << "#{Rails.root}/lib/mailer_previews"An overview of all previews is accessible athttp://localhost:3000/rails/mailerson a running development server instance.Previewscan also be intercepted in a similar manner as deliveries can be by registering a preview interceptor that has apreviewing_emailmethod:class CssInlineStyler
  def self.previewing_email(message)
    # inline CSS styles
  end
end

config.action_mailer.preview_interceptors :css_inline_stylerNote that interceptors need to be registered both withregister_interceptorandregister_preview_interceptorif they should operate on both sending and previewing emails.Configuration optionsThese options are specified on the class level, likeActionMailer::Base.raise_delivery_errors = truedefault_options- You can pass this in at a class level as well as within the class itself as per the above section.logger- the logger is used for generating information on the mailing run if available. Can be set tonilfor no logging. Compatible with both Rubyâs ownLoggerand Log4r loggers.smtp_settings- Allows detailed configuration for:smtpdelivery method::address- Allows you to use a remote mail server. Just change it from its default âlocalhostâ setting.:port- On the off chance that your mail server doesnât run on port 25, you can change it.:domain- If you need to specify a HELO domain, you can do it here.:user_name- If your mail server requires authentication, set the username in this setting.:password- If your mail server requires authentication, set the password in this setting.:authentication- If your mail server requires authentication, you need to specify the authentication type here. This is a symbol and one of:plain(will send the password Base64 encoded),:login(will send the password Base64 encoded) or:cram_md5(combines a Challenge/Response mechanism to exchange information and a cryptographic MessageDigest5 algorithm to hash important information):enable_starttls- Use STARTTLS when connecting to your SMTP server and fail if unsupported. Defaults tofalse. Requires at least version 2.7 of theMailgem.:enable_starttls_auto- Detects if STARTTLS is enabled in your SMTP server and starts to use it. Defaults totrue.:openssl_verify_mode- When using TLS, you can set how OpenSSL checks the certificate. This is really useful if you need to validate a self-signed and/or a wildcard certificate. You can use the name of an OpenSSL verify constant ('none'or'peer') or directly the constant (OpenSSL::SSL::VERIFY_NONEorOpenSSL::SSL::VERIFY_PEER).:ssl/:tlsEnables the SMTP connection to use SMTP/TLS (SMTPS: SMTP over direct TLS connection):open_timeoutNumber of seconds to wait while attempting to open a connection.:read_timeoutNumber of seconds to wait until timing-out a read(2) call.sendmail_settings- Allows you to override options for the:sendmaildelivery method.:location- The location of the sendmail executable. Defaults to/usr/sbin/sendmail.:arguments- The command line arguments. Defaults to%w[ -i ]with-f sender@addressadded automatically before the message is sent.file_settings- Allows you to override options for the:filedelivery method.:location- The directory into which emails will be written. Defaults to the applicationtmp/mails.raise_delivery_errors- Whether or not errors should be raised if the email fails to be delivered.delivery_method- Defines a delivery method. Possible values are:smtp(default),:sendmail,:test, and:file. Or you may provide a custom delivery method object e.g.MyOwnDeliveryMethodClass. See theMailgem documentation on the interface you need to implement for a custom delivery agent.perform_deliveries- Determines whether emails are actually sent from Action Mailer when you call.deliveron an email message or on an Action Mailer method. This is on by default but can be turned off to aid in functional testing.deliveries- Keeps an array of all the emails sent out through the Action Mailer withdelivery_method :test. Most useful for unit and functional testing.delivery_job- The job class used withdeliver_later. Mailers can set this to use a custom delivery job. Defaults toActionMailer::MailDeliveryJob.deliver_later_queue_name- The queue name used bydeliver_laterwith the defaultdelivery_job. Mailers can set this to use a custom queue name.NamespaceCLASSActionMailer::Base::LateAttachmentsProxyMethodsAattachmentsCcontroller_pathDdefault,default_i18n_subject,default_options=Eemail_address_with_name,email_address_with_nameHheadersMmail,mailer_name,mailer_nameNnewRregister_interceptor,register_interceptors,register_observer,register_observersSset_content_type,supports_path?Uunregister_interceptor,unregister_interceptors,unregister_observer,unregister_observersIncluded ModulesActionMailer::CallbacksActionMailer::DeliveryMethodsActionMailer::QueuedDeliveryActionMailer::RescuableActionMailer::ParameterizedActionMailer::PreviewsActionMailer::FormBuilderAbstractController::RenderingAbstractController::HelpersAbstractController::TranslationAbstractController::CallbacksAbstractController::CachingActionView::LayoutsConstantsPROTECTED_IVARS=AbstractController::Rendering::DEFAULT_PROTECTED_INSTANCE_VARIABLES + [:@_action_has_layout]Attributes[W]mailer_nameAllows to set the name of current mailer.Class Public methodscontroller_path()LinkAlias for:mailer_namedefault(value = nil)LinkSets the defaults through app configuration:config.action_mailer.default(from: "no-reply@example.org")Aliased by::default_options=Also aliased as:default_options=Source:show|on GitHub# File actionmailer/lib/action_mailer/base.rb, line 582defdefault(value=nil)self.default_params=default_params.merge(value).freezeifvaluedefault_paramsenddefault_options=(value = nil)LinkAllows to set defaults through app configuration:config.action_mailer.default_options = { from: "no-reply@example.org" }Alias for:defaultemail_address_with_name(address, name)LinkReturns an email in the format âName <email@example.com>â.If the name is a blank string, it returns just the address.Source:show|on GitHub# File actionmailer/lib/action_mailer/base.rb, line 607defemail_address_with_name(address,name)Mail::Address.new.tapdo|builder|builder.address=addressbuilder.display_name=name.presenceend.to_sendmailer_name()LinkReturns the name of the current mailer. This method is also being used as a path for a view lookup. If this is an anonymous mailer, this method will returnanonymousinstead.Also aliased as:controller_pathSource:show|on GitHub# File actionmailer/lib/action_mailer/base.rb, line 570defmailer_name@mailer_name||=anonymous??"anonymous":name.underscoreendnew()LinkSource:show|on GitHub# File actionmailer/lib/action_mailer/base.rb, line 643definitializesuper()@_mail_was_called=false@_message=Mail.newendregister_interceptor(interceptor)LinkRegister an Interceptor which will be called before mail is sent. Either a class, string, or symbol can be passed in as the Interceptor. If a string or symbol is passed in it will be camelized and constantized.Source:show|on GitHub# File actionmailer/lib/action_mailer/base.rb, line 547defregister_interceptor(interceptor)Mail.register_interceptor(observer_class_for(interceptor))endregister_interceptors(*interceptors)LinkRegister one or more Interceptors which will be called before mail is sent.Source:show|on GitHub# File actionmailer/lib/action_mailer/base.rb, line 521defregister_interceptors(*interceptors)interceptors.flatten.compact.each{|interceptor|register_interceptor(interceptor) }endregister_observer(observer)LinkRegister an Observer which will be notified when mail is delivered. Either a class, string, or symbol can be passed in as the Observer. If a string or symbol is passed in it will be camelized and constantized.Source:show|on GitHub# File actionmailer/lib/action_mailer/base.rb, line 533defregister_observer(observer)Mail.register_observer(observer_class_for(observer))endregister_observers(*observers)LinkRegister one or more Observers which will be notified when mail is delivered.Source:show|on GitHub# File actionmailer/lib/action_mailer/base.rb, line 511defregister_observers(*observers)observers.flatten.compact.each{|observer|register_observer(observer) }endsupports_path?()LinkEmails do not support relative path links.Source:show|on GitHub# File actionmailer/lib/action_mailer/base.rb, line 942defself.supports_path?# :doc:falseendunregister_interceptor(interceptor)LinkUnregister a previously registered Interceptor. Either a class, string, or symbol can be passed in as the Interceptor. If a string or symbol is passed in it will be camelized and constantized.Source:show|on GitHub# File actionmailer/lib/action_mailer/base.rb, line 554defunregister_interceptor(interceptor)Mail.unregister_interceptor(observer_class_for(interceptor))endunregister_interceptors(*interceptors)LinkUnregister one or more previously registered Interceptors.Source:show|on GitHub# File actionmailer/lib/action_mailer/base.rb, line 526defunregister_interceptors(*interceptors)interceptors.flatten.compact.each{|interceptor|unregister_interceptor(interceptor) }endunregister_observer(observer)LinkUnregister a previously registered Observer. Either a class, string, or symbol can be passed in as the Observer. If a string or symbol is passed in it will be camelized and constantized.Source:show|on GitHub# File actionmailer/lib/action_mailer/base.rb, line 540defunregister_observer(observer)Mail.unregister_observer(observer_class_for(observer))endunregister_observers(*observers)LinkUnregister one or more previously registered Observers.Source:show|on GitHub# File actionmailer/lib/action_mailer/base.rb, line 516defunregister_observers(*observers)observers.flatten.compact.each{|observer|unregister_observer(observer) }endInstance Public methodsattachments()LinkAllows you to add attachments to an email, like so:mail.attachments['filename.jpg'] = File.read('/path/to/filename.jpg')If you do this, thenMailwill take the file name and work out the mime type. It will also set theContent-Type,Content-Disposition, andContent-Transfer-Encoding, and encode the contents of the attachment in Base64.You can also specify overrides if you want by passing a hash instead of a string:mail.attachments['filename.jpg'] = {mime_type: 'application/gzip',
                                    content: File.read('/path/to/filename.jpg')}If you want to use encoding other than Base64 then you will need to pass encoding type along with the pre-encoded content asMaildoesnât know how to decode the data:file_content = SpecialEncode(File.read('/path/to/filename.jpg'))
mail.attachments['filename.jpg'] = {mime_type: 'application/gzip',
                                    encoding: 'SpecialEncoding',
                                    content: file_content }You can also search for specific attachments:# By Filename
mail.attachments['filename.jpg']   # => Mail::Part object or nil

# or by index
mail.attachments[0]                # => Mail::Part (first attachment)Source:show|on GitHub# File actionmailer/lib/action_mailer/base.rb, line 760defattachmentsif@_mail_was_calledLateAttachmentsProxy.new(@_message.attachments)else@_message.attachmentsendendemail_address_with_name(address, name)LinkReturns an email in the format âName <email@example.com>â.If the name is a blank string, it returns just the address.Source:show|on GitHub# File actionmailer/lib/action_mailer/base.rb, line 684defemail_address_with_name(address,name)self.class.email_address_with_name(address,name)endheaders(args = nil)LinkAllows you to pass random and unusual headers to the newMail::Messageobject which will add them to itself.headers['X-Special-Domain-Specific-Header'] = "SecretValue"You can also pass a hash into headers of header field names and values, which will then be set on theMail::Messageobject:headers 'X-Special-Domain-Specific-Header' => "SecretValue",
        'In-Reply-To' => incoming.message_idThe resultingMail::Messagewill have the following in its header:X-Special-Domain-Specific-Header: SecretValueNote about replacing already defined headers:subjectsenderfromtoccbccreply-toorig-datemessage-idreferencesFields can only appear once in email headers while other fields such asX-Anythingcan appear multiple times.If you want to replace any header which already exists, first set it tonilin order to reset the value otherwise another field will be added for the same header.Source:show|on GitHub# File actionmailer/lib/action_mailer/base.rb, line 722defheaders(args=nil)ifargs@_message.headers(args)else@_messageendendmail(headers = {}, &block)LinkThe main method that creates the message and renders the email templates. There are two ways to call this method, with a block, or without a block.It accepts a headers hash. This hash allows you to specify the most used headers in an email message, these are::subject- The subject of the message, if this is omitted, Action Mailer will ask the Rails I18n class for a translated:subjectin the scope of[mailer_scope, action_name]or if this is missing, will translate the humanized version of theaction_name:to- Who the message is destined for, can be a string of addresses, or an array of addresses.:from- Who the message is from:cc- Who you would like to Carbon-Copy on this email, can be a string of addresses, or an array of addresses.:bcc- Who you would like to Blind-Carbon-Copy on this email, can be a string of addresses, or an array of addresses.:reply_to- Who to set theReply-Toheader of the email to.:date- The date to say the email was sent on.You can set default values for any of the above headers (except:date) by using the::defaultclass method:class Notifier < ActionMailer::Base
  default from: 'no-reply@test.lindsaar.net',
          bcc: 'email_logger@test.lindsaar.net',
          reply_to: 'bounces@test.lindsaar.net'
endIf you need other headers not listed above, you can either pass them in as part of the headers hash or use theheaders['name'] = valuemethod.When a:return_pathis specified as header, that value will be used as the âenvelope fromâ address for theMailmessage. Setting this is useful when you want delivery notifications sent to a different address than the one in:from.Mailwill actually use the:return_pathin preference to the:senderin preference to the:fromfield for the âenvelope fromâ value.If you do not pass a block to themailmethod, it will find all templates in the view paths using by default the mailer name and the method name that it is being called from, it will then create parts for each of these templates intelligently, making educated guesses on correct content type and sequence, and return a fully preparedMail::Messageready to call:deliveron to send.For example:class Notifier < ActionMailer::Base
  default from: 'no-reply@test.lindsaar.net'

  def welcome
    mail(to: 'mikel@test.lindsaar.net')
  end
endWill look for all templates at âapp/views/notifierâ with name âwelcomeâ. If no welcome template exists, it will raise an ActionView::MissingTemplate error.However, those can be customized:mail(template_path: 'notifications', template_name: 'another')And now it will look for all templates at âapp/views/notificationsâ with name âanotherâ.If you do pass a block, you can render specific templates of your choice:mail(to: 'mikel@test.lindsaar.net') do |format|
  format.text
  format.html
endYou can even render plain text directly without using a template:mail(to: 'mikel@test.lindsaar.net') do |format|
  format.text { render plain: "Hello Mikel!" }
  format.html { render html: "<h1>Hello Mikel!</h1>".html_safe }
endWhich will render amultipart/alternativeemail withtext/plainandtext/htmlparts.The block syntax also allows you to customize the part headers if desired:mail(to: 'mikel@test.lindsaar.net') do |format|
  format.text(content_transfer_encoding: "base64")
  format.html
endSource:show|on GitHub# File actionmailer/lib/action_mailer/base.rb, line 869defmail(headers= {},&block)returnmessageif@_mail_was_called&&headers.blank?&&!block# At the beginning, do not consider class default for content_typecontent_type=headers[:content_type]headers=apply_defaults(headers)# Apply charset at the beginning so all fields are properly quotedmessage.charset=charset=headers[:charset]# Set configure delivery behaviorwrap_delivery_behavior!(headers[:delivery_method],headers[:delivery_method_options])assign_headers_to_message(message,headers)# Render the templates and blocksresponses=collect_responses(headers,&block)@_mail_was_called=truecreate_parts_from_responses(message,responses)wrap_inline_attachments(message)# Set up content type, reapply charset and handle parts ordermessage.content_type=set_content_type(message,content_type,headers[:content_type])message.charset=charsetifmessage.multipart?message.body.set_sort_order(headers[:parts_order])message.body.sort_parts!endmessageendmailer_name()LinkReturns the name of the mailer object.Source:show|on GitHub# File actionmailer/lib/action_mailer/base.rb, line 677defmailer_nameself.class.mailer_nameendInstance Private methodsdefault_i18n_subject(interpolations = {})LinkTranslates thesubjectusing Rails I18n class under[mailer_scope, action_name]scope. If it does not find a translation for thesubjectunder the specified scope it will default to a humanized version of theaction_name. If the subject has interpolations, you can pass them through theinterpolationsparameter.Source:show|on GitHub# File actionmailer/lib/action_mailer/base.rb, line 936defdefault_i18n_subject(interpolations= {})# :doc:mailer_scope=self.class.mailer_name.tr("/",".")I18n.t(:subject,**interpolations.merge(scope:[mailer_scope,action_name],default:action_name.humanize))endset_content_type(m, user_content_type, class_default)LinkUsed bymailto set the content type of the message.It will use the givenuser_content_type, or multipart if the mail message has any attachments. If the attachments are inline, the content type will be âmultipart/relatedâ, otherwise âmultipart/mixedâ.If there is no content type passed in via headers, and there are no attachments, or the message is multipart, then the default content type is used.Source:show|on GitHub# File actionmailer/lib/action_mailer/base.rb, line 914defset_content_type(m,user_content_type,class_default)# :doc:params=m.content_type_parameters||{}casewhenuser_content_type.present?user_content_typewhenm.has_attachments?ifm.attachments.all?(&:inline?)
      ["multipart","related",params]else["multipart","mixed",params]endwhenm.multipart?["multipart","alternative",params]elsem.content_type||class_defaultendend