Active Record AggregationsActive Record implements aggregation through a macro-like class method calledcomposed_offor representing attributes as value objects. It expresses relationships like âAccount [is] composed of Money [among other things]â or âPerson [is] composed of [an] addressâ. Each call to the macro adds a description of how the value objects are created from the attributes of the entity object (when the entity is initialized either as a new object or from finding an existing object) and how it can be turned back into attributes (when the entity is saved to the database).class Customer < ActiveRecord::Base
  composed_of :balance, class_name: "Money", mapping: { balance: :amount }
  composed_of :address, mapping: { address_street: :street, address_city: :city }
endThe customer class now has the following methods to manipulate the value objects:Customer#balance, Customer#balance=(money)Customer#address, Customer#address=(address)These methods will operate with value objects like the ones described below:class Money
  include Comparable
  attr_reader :amount, :currency
  EXCHANGE_RATES = { "USD_TO_DKK" => 6 }

  def initialize(amount, currency = "USD")
    @amount, @currency = amount, currency
  end

  def exchange_to(other_currency)
    exchanged_amount = (amount * EXCHANGE_RATES["#{currency}_TO_#{other_currency}"]).floor
    Money.new(exchanged_amount, other_currency)
  end

  def ==(other_money)
    amount == other_money.amount && currency == other_money.currency
  end

  def <=>(other_money)
    if currency == other_money.currency
      amount <=> other_money.amount
    else
      amount <=> other_money.exchange_to(currency).amount
    end
  end
end

class Address
  attr_reader :street, :city
  def initialize(street, city)
    @street, @city = street, city
  end

  def close_to?(other_address)
    city == other_address.city
  end

  def ==(other_address)
    city == other_address.city && street == other_address.street
  end
endNow itâs possible to access attributes from the database through the value objects instead. If you choose to name the composition the same as the attributeâs name, it will be the only way to access that attribute. Thatâs the case with ourbalanceattribute. You interact with the value objects just like you would with any other attribute:customer.balance = Money.new(20)     # sets the Money value object and the attribute
customer.balance                     # => Money value object
customer.balance.exchange_to("DKK")  # => Money.new(120, "DKK")
customer.balance > Money.new(10)     # => true
customer.balance == Money.new(20)    # => true
customer.balance < Money.new(5)      # => falseValue objects can also be composed of multiple attributes, such as the case of Address. The order of the mappings will determine the order of the parameters.customer.address_street = "Hyancintvej"
customer.address_city   = "Copenhagen"
customer.address        # => Address.new("Hyancintvej", "Copenhagen")

customer.address = Address.new("May Street", "Chicago")
customer.address_street # => "May Street"
customer.address_city   # => "Chicago"Writing value objectsValue objects are immutable and interchangeable objects that represent a given value, such as a Money object representing $5. Two Money objects both representing $5 should be equal (through methods such as==and<=>from Comparable if ranking makes sense). This is unlike entity objects where equality is determined by identity. An entity class such as Customer can easily have two different objects that both have an address on Hyancintvej. Entity identity is determined by object or relational unique identifiers (such as primary keys). NormalActiveRecord::Baseclasses are entity objects.Itâs also important to treat the value objects as immutable. Donât allow the Money object to have its amount changed after creation. Create a new Money object with the new value instead. TheMoney#exchange_tomethod is an example of this. It returns a new value object instead of changing its own values. Active Record wonât persist value objects that have been changed through means other than the writer method.The immutable requirement is enforced by Active Record by freezing any object assigned as a value object. Attempting to change it afterwards will result in aRuntimeError.Read more about value objects onc2.com/cgi/wiki?ValueObjectand on the dangers of not keeping value objects immutable onc2.com/cgi/wiki?ValueObjectsShouldBeImmutableCustom constructors and convertersBy default value objects are initialized by calling thenewconstructor of the value class passing each of the mapped attributes, in the order specified by the:mappingoption, as arguments. If the value class doesnât support this convention thencomposed_ofallows a custom constructor to be specified.When a new value is assigned to the value object, the default assumption is that the new value is an instance of the value class. Specifying a custom converter allows the new value to be automatically converted to an instance of value class if necessary.For example, theNetworkResourcemodel hasnetwork_addressandcidr_rangeattributes that should be aggregated using theNetAddr::CIDRvalue class (www.rubydoc.info/gems/netaddr/1.5.0/NetAddr/CIDR). The constructor for the value class is calledcreateand it expects a CIDR address string as a parameter. New values can be assigned to the value object using either anotherNetAddr::CIDRobject, a string or an array. The:constructorand:converteroptions can be used to meet these requirements:class NetworkResource < ActiveRecord::Base
  composed_of :cidr,
              class_name: 'NetAddr::CIDR',
              mapping: { network_address: :network, cidr_range: :bits },
              allow_nil: true,
              constructor: Proc.new { |network_address, cidr_range| NetAddr::CIDR.create("#{network_address}/#{cidr_range}") },
              converter: Proc.new { |value| NetAddr::CIDR.create(value.is_a?(Array) ? value.join('/') : value) }
end

# This calls the :constructor
network_resource = NetworkResource.new(network_address: '192.168.0.1', cidr_range: 24)

# These assignments will both use the :converter
network_resource.cidr = [ '192.168.2.1', 8 ]
network_resource.cidr = '192.168.0.1/24'

# This assignment won't use the :converter as the value is already an instance of the value class
network_resource.cidr = NetAddr::CIDR.create('192.168.2.1/8')

# Saving and then reloading will use the :constructor on reload
network_resource.save
network_resource.reloadFinding records by a value objectOnce acomposed_ofrelationship is specified for a model, records can be loaded from the database by specifying an instance of the value object in the conditions hash. The following example finds all customers withaddress_streetequal to âMay Streetâ andaddress_cityequal to âChicagoâ:Customer.where(address: Address.new("May Street", "Chicago"))MethodsCcomposed_ofIncluded ModulesActiveRecord::AggregationsInstance Public methodscomposed_of(part_id, options = {})LinkAdds reader and writer methods for manipulating a value object:composed_of :addressaddsaddressandaddress=(new_address)methods.Options are::class_name- Specifies the class name of the association. Use it only if that name canât be inferred from the part id. Socomposed_of :addresswill by default be linked to the Address class, but if the real class name isCompanyAddress, youâll have to specify it with this option.:mapping- Specifies the mapping of entity attributes to attributes of the value object. Each mapping is represented as a key-value pair where the key is the name of the entity attribute and the value is the name of the attribute in the value object. The order in which mappings are defined determines the order in which attributes are sent to the value class constructor. The mapping can be written as a hash or as an array of pairs.:allow_nil- Specifies that the value object will not be instantiated when all mapped attributes arenil. Setting the value object tonilhas the effect of writingnilto all mapped attributes. This defaults tofalse.:constructor- A symbol specifying the name of the constructor method or a Proc that is called to initialize the value object. The constructor is passed all of the mapped attributes, in the order that they are defined in the:mapping option, as arguments and uses them to instantiate a:class_nameobject. The default is:new.:converter- A symbol specifying the name of a class method of:class_nameor a Proc that is called when a new value is assigned to the value object. The converter is passed the single value that is used in the assignment and is only called if the new value is not an instance of:class_name. If:allow_nilis set to true, the converter can returnnilto skip the assignment.Option examples:composed_of :temperature, mapping: { reading: :celsius }
composed_of :balance, class_name: "Money", mapping: { balance: :amount }
composed_of :address, mapping: { address_street: :street, address_city: :city }
composed_of :address, mapping: [ %w(address_street street), %w(address_city city) ]
composed_of :gps_location
composed_of :gps_location, allow_nil: true
composed_of :ip_address,
            class_name: 'IPAddr',
            mapping: { ip: :to_i },
            constructor: Proc.new { |ip| IPAddr.new(ip, Socket::AF_INET) },
            converter: Proc.new { |ip| ip.is_a?(Integer) ? IPAddr.new(ip, Socket::AF_INET) : IPAddr.new(ip.to_s) }Source:show|on GitHub# File activerecord/lib/active_record/aggregations.rb, line 225defcomposed_of(part_id,options= {})options.assert_valid_keys(:class_name,:mapping,:allow_nil,:constructor,:converter)unlessself<AggregationsincludeAggregationsendname=part_id.id2nameclass_name=options[:class_name]||name.camelizemapping=options[:mapping]||[name,name]mapping= [mapping]unlessmapping.first.is_a?(Array)allow_nil=options[:allow_nil]||falseconstructor=options[:constructor]||:newconverter=options[:converter]reader_method(name,class_name,mapping,allow_nil,constructor)writer_method(name,class_name,mapping,allow_nil,converter)reflection=ActiveRecord::Reflection.create(:composed_of,part_id,nil,options,self)Reflection.add_aggregate_reflectionself,part_id,reflectionend