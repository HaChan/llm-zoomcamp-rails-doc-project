Active Storage GCS ServiceWraps the Google Cloud Storage as an Active Storage service. SeeActiveStorage::Servicefor the generic API documentation that applies to all services.NamespaceCLASSActiveStorage::Service::GCSService::MetadataServerErrorCLASSActiveStorage::Service::GCSService::MetadataServerNotFoundErrorMethodsCcomposeDdelete,delete_prefixed,download,download_chunkEexist?Hheaders_for_direct_uploadNnewUupdate_metadata,upload,url_for_direct_uploadClass Public methodsnew(public: false, **config)LinkSource:show|on GitHub# File activestorage/lib/active_storage/service/gcs_service.rb, line 16definitialize(public:false,**config)@config=config@public=publicendInstance Public methodscompose(source_keys, destination_key, filename: nil, content_type: nil, disposition: nil, custom_metadata: {})LinkSource:show|on GitHub# File activestorage/lib/active_storage/service/gcs_service.rb, line 139defcompose(source_keys,destination_key,filename:nil,content_type:nil,disposition:nil,custom_metadata:{})bucket.compose(source_keys,destination_key).updatedo|file|file.content_type=content_typefile.content_disposition=content_disposition_with(type:disposition,filename:filename)ifdisposition&&filenamefile.metadata=custom_metadataendenddelete(key)LinkSource:show|on GitHub# File activestorage/lib/active_storage/service/gcs_service.rb, line 66defdelete(key)instrument:delete,key:keydofile_for(key).deleterescueGoogle::Cloud::NotFoundError# Ignore files already deletedendenddelete_prefixed(prefix)LinkSource:show|on GitHub# File activestorage/lib/active_storage/service/gcs_service.rb, line 74defdelete_prefixed(prefix)instrument:delete_prefixed,prefix:prefixdobucket.files(prefix:prefix).alldo|file|file.deleterescueGoogle::Cloud::NotFoundError# Ignore concurrently-deleted filesendendenddownload(key, &block)LinkSource:show|on GitHub# File activestorage/lib/active_storage/service/gcs_service.rb, line 34defdownload(key,&block)ifblock_given?instrument:streaming_download,key:keydostream(key,&block)endelseinstrument:download,key:keydofile_for(key).download.stringrescueGoogle::Cloud::NotFoundErrorraiseActiveStorage::FileNotFoundErrorendendenddownload_chunk(key, range)LinkSource:show|on GitHub# File activestorage/lib/active_storage/service/gcs_service.rb, line 58defdownload_chunk(key,range)instrument:download_chunk,key:key,range:rangedofile_for(key).download(range:range).stringrescueGoogle::Cloud::NotFoundErrorraiseActiveStorage::FileNotFoundErrorendendexist?(key)LinkSource:show|on GitHub# File activestorage/lib/active_storage/service/gcs_service.rb, line 84defexist?(key)instrument:exist,key:keydo|payload|answer=file_for(key).exists?payload[:exist] =answeranswerendendheaders_for_direct_upload(key, checksum:, filename: nil, disposition: nil, custom_metadata: {}, **)LinkSource:show|on GitHub# File activestorage/lib/active_storage/service/gcs_service.rb, line 128defheaders_for_direct_upload(key,checksum:,filename:nil,disposition:nil,custom_metadata:{},**)content_disposition=content_disposition_with(type:disposition,filename:filename)iffilenameheaders= {"Content-MD5"=>checksum,"Content-Disposition"=>content_disposition,**custom_metadata_headers(custom_metadata) }if@config[:cache_control].present?headers["Cache-Control"] =@config[:cache_control]endheadersendupdate_metadata(key, content_type:, disposition: nil, filename: nil, custom_metadata: {})LinkSource:show|on GitHub# File activestorage/lib/active_storage/service/gcs_service.rb, line 48defupdate_metadata(key,content_type:,disposition:nil,filename:nil,custom_metadata:{})instrument:update_metadata,key:key,content_type:content_type,disposition:dispositiondofile_for(key).updatedo|file|file.content_type=content_typefile.content_disposition=content_disposition_with(type:disposition,filename:filename)ifdisposition&&filenamefile.metadata=custom_metadataendendendupload(key, io, checksum: nil, content_type: nil, disposition: nil, filename: nil, custom_metadata: {})LinkSource:show|on GitHub# File activestorage/lib/active_storage/service/gcs_service.rb, line 21defupload(key,io,checksum:nil,content_type:nil,disposition:nil,filename:nil,custom_metadata:{})instrument:upload,key:key,checksum:checksumdo# GCS's signed URLs don't include params such as response-content-type response-content_disposition# in the signature, which means an attacker can modify them and bypass our effort to force these to# binary and attachment when the file's content type requires it. The only way to force them is to# store them as object's metadata.content_disposition=content_disposition_with(type:disposition,filename:filename)ifdisposition&&filenamebucket.create_file(io,key,md5:checksum,cache_control:@config[:cache_control],content_type:content_type,content_disposition:content_disposition,metadata:custom_metadata)rescueGoogle::Cloud::InvalidArgumentErrorraiseActiveStorage::IntegrityErrorendendurl_for_direct_upload(key, expires_in:, checksum:, custom_metadata: {}, **)LinkSource:show|on GitHub# File activestorage/lib/active_storage/service/gcs_service.rb, line 92defurl_for_direct_upload(key,expires_in:,checksum:,custom_metadata:{},**)instrument:url,key:keydo|payload|headers= {}version=:v2if@config[:cache_control].present?headers["Cache-Control"] =@config[:cache_control]# v2 signing doesn't support non `x-goog-` headers. Only switch to v4 signing# if necessary for back-compat; v4 limits the expiration of the URL to 7 days# whereas v2 has no limitversion=:v4endheaders.merge!(custom_metadata_headers(custom_metadata))args= {content_md5:checksum,expires:expires_in,headers:headers,method:"PUT",version:version,
    }if@config[:iam]args[:issuer] =issuerargs[:signer] =signerendgenerated_url=bucket.signed_url(key,**args)payload[:url] =generated_urlgenerated_urlendend