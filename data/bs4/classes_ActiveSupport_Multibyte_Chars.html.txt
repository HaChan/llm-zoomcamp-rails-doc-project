Active Support Multibyte CharsCharsenables you to work transparently with UTF-8 encoding in the RubyStringclass without having extensive knowledge about the encoding. ACharsobject accepts a string upon initialization and proxiesStringmethods in an encoding safe manner. All the normalStringmethods are also implemented on the proxy.Stringmethods are proxied through theCharsobject, and can be accessed through themb_charsmethod. Methods which would normally return aStringobject now return aCharsobject so methods can be chained.'The Perfect String  '.mb_chars.downcase.strip
# => #<ActiveSupport::Multibyte::Chars:0x007fdc434ccc10 @wrapped_string="the perfect string">Charsobjects are perfectly interchangeable withStringobjects as long as no explicit class checks are made. If certain methods do explicitly check the class, callto_sbefore you pass chars objects to them.bad.explicit_checking_method 'T'.mb_chars.downcase.to_sThe defaultCharsimplementation assumes that the encoding of the string is UTF-8, if you want to handle different encodings you can write your own multibyte string handler and configure it throughActiveSupport::Multibyte.proxy_class.class CharsForUTF32
  def size
    @wrapped_string.size / 4
  end

  def self.accepts?(string)
    string.length % 4 == 0
  end
end

ActiveSupport::Multibyte.proxy_class = CharsForUTF32MethodsCcomposeDdecomposeGgrapheme_lengthLlimitMmethod_missingNnewRrespond_to_missing?,reverseSslice!,splitTtidy_bytes,titlecase,titleizeIncluded ModulesComparableAttributes[R]to_s[R]to_str[R]wrapped_stringClass Public methodsnew(string)LinkCreates a newCharsinstance by wrappingstring.Source:show|on GitHub# File activesupport/lib/active_support/multibyte/chars.rb, line 56definitialize(string)@wrapped_string=string@wrapped_string.force_encoding(Encoding::UTF_8)unless@wrapped_string.frozen?endInstance Public methodscompose()LinkPerforms composition on all the characters.'Ã©'.length                       # => 1
'Ã©'.mb_chars.compose.to_s.length # => 1Source:show|on GitHub# File activesupport/lib/active_support/multibyte/chars.rb, line 140defcomposechars(Unicode.compose(@wrapped_string.codepoints.to_a).pack("U*"))enddecompose()LinkPerforms canonical decomposition on all the characters.'Ã©'.length                         # => 1
'Ã©'.mb_chars.decompose.to_s.length # => 2Source:show|on GitHub# File activesupport/lib/active_support/multibyte/chars.rb, line 132defdecomposechars(Unicode.decompose(:canonical,@wrapped_string.codepoints.to_a).pack("U*"))endgrapheme_length()LinkReturns the number of grapheme clusters in the string.'à¤à¥à¤·à¤¿'.mb_chars.length   # => 4
'à¤à¥à¤·à¤¿'.mb_chars.grapheme_length # => 2Source:show|on GitHub# File activesupport/lib/active_support/multibyte/chars.rb, line 148defgrapheme_length@wrapped_string.grapheme_clusters.lengthendlimit(limit)LinkLimits the byte size of the string to a number of bytes without breaking characters. Usable when the storage for a string is limited for some reason.'ããã«ã¡ã¯'.mb_chars.limit(7).to_s # => "ãã"Source:show|on GitHub# File activesupport/lib/active_support/multibyte/chars.rb, line 115deflimit(limit)chars(@wrapped_string.truncate_bytes(limit,omission:nil))endmethod_missing(method, ...)LinkForward all undefined methods to the wrapped string.Source:show|on GitHub# File activesupport/lib/active_support/multibyte/chars.rb, line 62defmethod_missing(method,...)result=@wrapped_string.__send__(method,...)ifmethod.end_with?("!")selfifresultelseresult.kind_of?(String)?chars(result):resultendendrespond_to_missing?(method, include_private)LinkReturnstrueifobjresponds to the given method. Private methods are included in the search only if the optional second parameter evaluates totrue.Source:show|on GitHub# File activesupport/lib/active_support/multibyte/chars.rb, line 74defrespond_to_missing?(method,include_private)@wrapped_string.respond_to?(method,include_private)endreverse()LinkReverses all characters in the string.'CafÃ©'.mb_chars.reverse.to_s # => 'Ã©faC'Source:show|on GitHub# File activesupport/lib/active_support/multibyte/chars.rb, line 106defreversechars(@wrapped_string.grapheme_clusters.reverse.join)endslice!(*args)LinkWorks likeString#slice!, but returns an instance ofChars, ornilif the string was not modified. The string will not be modified if the range given is out of boundsstring = 'Welcome'
string.mb_chars.slice!(3)    # => #<ActiveSupport::Multibyte::Chars:0x000000038109b8 @wrapped_string="c">
string # => 'Welome'
string.mb_chars.slice!(0..3) # => #<ActiveSupport::Multibyte::Chars:0x00000002eb80a0 @wrapped_string="Welo">
string # => 'me'Source:show|on GitHub# File activesupport/lib/active_support/multibyte/chars.rb, line 96defslice!(*args)string_sliced=@wrapped_string.slice!(*args)ifstring_slicedchars(string_sliced)endendsplit(*args)LinkWorks just likeString#split, with the exception that the items in the resulting list areCharsinstances instead ofString. This makes chaining methods easier.'CafÃ© pÃ©riferÃ´l'.mb_chars.split(/Ã©/).map { |part| part.upcase.to_s } # => ["CAF", " P", "RIFERÃL"]Source:show|on GitHub# File activesupport/lib/active_support/multibyte/chars.rb, line 83defsplit(*args)@wrapped_string.split(*args).map{|i|self.class.new(i) }endtidy_bytes(force = false)LinkReplaces all ISO-8859-1 or CP1252 characters by their UTF-8 equivalent resulting in a valid UTF-8 string.Passingtruewill forcibly tidy all bytes, assuming that the stringâs encoding is entirely CP1252 or ISO-8859-1.Source:show|on GitHub# File activesupport/lib/active_support/multibyte/chars.rb, line 157deftidy_bytes(force=false)chars(Unicode.tidy_bytes(@wrapped_string,force))endtitlecase()LinkAlias for:titleizetitleize()LinkCapitalizes the first letter of every word, when possible."ÃL QUE SE ENTERÃ".mb_chars.titleize.to_s    # => "Ãl Que Se EnterÃ³"
"æ¥æ¬èª".mb_chars.titleize.to_s               # => "æ¥æ¬èª"Also aliased as:titlecaseSource:show|on GitHub# File activesupport/lib/active_support/multibyte/chars.rb, line 123deftitleizechars(downcase.to_s.gsub(/\b('?\S)/u) {$1.upcase})end