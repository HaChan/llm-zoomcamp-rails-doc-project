Active Storage ServiceAbstract class serving as an interface for concrete services.The available services are:Disk, to manage attachments saved directly on the hard drive.GCS, to manage attachments through Google Cloud Storage.S3, to manage attachments through Amazon S3.AzureStorage, to manage attachments through Microsoft Azure Storage.Mirror, to be able to use several services to manage attachments.Inside a Rails application, you can set-up your services through the generatedconfig/storage.ymlfile and reference one of the aforementioned constant under theservicekey. For example:local:
  service: Disk
  root: <%= Rails.root.join("storage") %>You can checkout the serviceâs constructor to know which keys are required.Then, in your applicationâs configuration, you can specify the service to use like this:config.active_storage.service = :localIf you are using Active Storage outside of a Ruby on Rails application, you can configure the service to use like this:ActiveStorage::Blob.service = ActiveStorage::Service.configure(
  :local,
  { local: {service: "Disk",  root: Pathname("/tmp/foo/storage") } }
)NamespaceCLASSActiveStorage::Service::AzureStorageServiceCLASSActiveStorage::Service::DiskServiceCLASSActiveStorage::Service::GCSServiceCLASSActiveStorage::Service::MirrorServiceCLASSActiveStorage::Service::S3ServiceMethodsCcompose,configureDdelete,delete_prefixed,download,download_chunkEexist?Hheaders_for_direct_uploadOopenPpublic?Uupdate_metadata,upload,url,url_for_direct_uploadAttributes[RW]nameClass Public methodsconfigure(service_name, configurations)LinkConfigure an Active Storage service by name from a set of configurations, typically loaded from a YAML file. The Active Storage engine uses this to set the global Active Storage service when the app boots.Source:show|on GitHub# File activestorage/lib/active_storage/service.rb, line 52defconfigure(service_name,configurations)Configurator.build(service_name,configurations)endInstance Public methodscompose(source_keys, destination_key, filename: nil, content_type: nil, disposition: nil, custom_metadata: {})LinkConcatenate multiple files into a single âcomposedâ file.Source:show|on GitHub# File activestorage/lib/active_storage/service.rb, line 96defcompose(source_keys,destination_key,filename:nil,content_type:nil,disposition:nil,custom_metadata:{})raiseNotImplementedErrorenddelete(key)LinkDelete the file at thekey.Source:show|on GitHub# File activestorage/lib/active_storage/service.rb, line 101defdelete(key)raiseNotImplementedErrorenddelete_prefixed(prefix)LinkDelete files at keys starting with theprefix.Source:show|on GitHub# File activestorage/lib/active_storage/service.rb, line 106defdelete_prefixed(prefix)raiseNotImplementedErrorenddownload(key)LinkReturn the content of the file at thekey.Source:show|on GitHub# File activestorage/lib/active_storage/service.rb, line 82defdownload(key)raiseNotImplementedErrorenddownload_chunk(key, range)LinkReturn the partial content in the byterangeof the file at thekey.Source:show|on GitHub# File activestorage/lib/active_storage/service.rb, line 87defdownload_chunk(key,range)raiseNotImplementedErrorendexist?(key)LinkReturntrueif a file exists at thekey.Source:show|on GitHub# File activestorage/lib/active_storage/service.rb, line 111defexist?(key)raiseNotImplementedErrorendheaders_for_direct_upload(key, filename:, content_type:, content_length:, checksum:, custom_metadata: {})LinkReturns aHashof headers forurl_for_direct_uploadrequests.Source:show|on GitHub# File activestorage/lib/active_storage/service.rb, line 143defheaders_for_direct_upload(key,filename:,content_type:,content_length:,checksum:,custom_metadata:{})
  {}endopen(*args, **options, &block)LinkSource:show|on GitHub# File activestorage/lib/active_storage/service.rb, line 91defopen(*args,**options,&block)ActiveStorage::Downloader.new(self).open(*args,**options,&block)endpublic?()LinkSource:show|on GitHub# File activestorage/lib/active_storage/service.rb, line 147defpublic?@publicendupdate_metadata(key, **metadata)LinkUpdate metadata for the file identified bykeyin the service. Override in subclasses only if the service needs to store specific metadata that has to be updated upon identification.Source:show|on GitHub# File activestorage/lib/active_storage/service.rb, line 78defupdate_metadata(key,**metadata)endupload(key, io, checksum: nil, **options)LinkUpload theioto thekeyspecified. If achecksumis provided, the service will ensure a match when the upload has completed or raise anActiveStorage::IntegrityError.Source:show|on GitHub# File activestorage/lib/active_storage/service.rb, line 71defupload(key,io,checksum:nil,**options)raiseNotImplementedErrorendurl(key, **options)LinkReturns the URL for the file at thekey. This returns a permanent URL for public files, and returns a short-lived URL for private files. For private files you can provide thedisposition(:inlineor:attachment),filename, andcontent_typethat you wish the file to be served with on request. Additionally, you can also provide the amount of seconds the URL will be valid for, specified inexpires_in.Source:show|on GitHub# File activestorage/lib/active_storage/service.rb, line 119defurl(key,**options)instrument:url,key:keydo|payload|generated_url=ifpublic?public_url(key,**options)elseprivate_url(key,**options)endpayload[:url] =generated_urlgenerated_urlendendurl_for_direct_upload(key, expires_in:, content_type:, content_length:, checksum:, custom_metadata: {})LinkReturns a signed, temporary URL that a direct upload file can be PUT to on thekey. The URL will be valid for the amount of seconds specified inexpires_in. You must also provide thecontent_type,content_length, andchecksumof the file that will be uploaded. All these attributes will be validated by the service upon upload.Source:show|on GitHub# File activestorage/lib/active_storage/service.rb, line 138defurl_for_direct_upload(key,expires_in:,content_type:,content_length:,checksum:,custom_metadata:{})raiseNotImplementedErrorend