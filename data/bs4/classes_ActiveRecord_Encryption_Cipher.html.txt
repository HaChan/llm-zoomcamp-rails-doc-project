The algorithm used for encrypting and decryptingMessageobjects.It uses AES-256-GCM. It will generate a random IV for non deterministic encryption (default) or derive an initialization vector from the encrypted content for deterministic encryption.SeeCipher::Aes256Gcm.NamespaceCLASSActiveRecord::Encryption::Cipher::Aes256GcmMethodsDdecryptEencryptIiv_lengthKkey_lengthConstantsDEFAULT_ENCODING=Encoding::UTF_8Instance Public methodsdecrypt(encrypted_message, key:)LinkDecrypt the providedMessage.Whenkeyis anArray, it will try all the keys raising aActiveRecord::Encryption::Errors::Decryptionif none works.Source:show|on GitHub# File activerecord/lib/active_record/encryption/cipher.rb, line 25defdecrypt(encrypted_message,key:)try_to_decrypt_with_each(encrypted_message,keys:Array(key)).tapdo|decrypted_text|decrypted_text.force_encoding(encrypted_message.headers.encoding||DEFAULT_ENCODING)endendencrypt(clean_text, key:, deterministic: false)LinkEncrypts the provided text and return an encryptedMessage.Source:show|on GitHub# File activerecord/lib/active_record/encryption/cipher.rb, line 15defencrypt(clean_text,key:,deterministic:false)cipher_for(key,deterministic:deterministic).encrypt(clean_text).tapdo|message|message.headers.encoding=clean_text.encoding.nameunlessclean_text.encoding==DEFAULT_ENCODINGendendiv_length()LinkSource:show|on GitHub# File activerecord/lib/active_record/encryption/cipher.rb, line 35defiv_lengthAes256Gcm.iv_lengthendkey_length()LinkSource:show|on GitHub# File activerecord/lib/active_record/encryption/cipher.rb, line 31defkey_lengthAes256Gcm.key_lengthend