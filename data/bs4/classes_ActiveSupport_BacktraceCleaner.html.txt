Backtrace CleanerBacktraces often include many lines that are not relevant for the context under review. This makes it hard to find the signal amongst the backtrace noise, and adds debugging time. With aBacktraceCleaner, filters and silencers are used to remove the noisy lines, so that only the most relevant lines remain.Filters are used to modify lines of data, while silencers are used to remove lines entirely. The typical filter use case is to remove lengthy path information from the start of each line, and view file paths relevant to the app directory instead of the file system root. The typical silencer use case is to exclude the output of a noisy library from the backtrace, so that you can focus on the rest.bc = ActiveSupport::BacktraceCleaner.new
root = "#{Rails.root}/"
bc.add_filter   { |line| line.start_with?(root) ? line.from(root.size) : line } # strip the Rails.root prefix
bc.add_silencer { |line| /puma|rubygems/.match?(line) } # skip any lines from puma or rubygems
bc.clean(exception.backtrace) # perform the cleanupTo reconfigure an existingBacktraceCleaner(like the default one in Rails) and show as much data as possible, you can always callBacktraceCleaner#remove_silencers!, which will restore the backtrace to a pristine state. If you need to reconfigure an existingBacktraceCleanerso that it does not filter or modify the paths of any lines of the backtrace, you can callBacktraceCleaner#remove_filters!These two methods will give you a completely untouched backtrace.Inspired by the Quiet Backtrace gem by thoughtbot.MethodsAadd_filter,add_silencerCclean,clean_frameFfilterNnewRremove_filters!,remove_silencers!ConstantsFORMATTED_GEMS_PATTERN=/\A[^\/]+ \([\w.]+\) /Class Public methodsnew()LinkSource:show|on GitHub# File activesupport/lib/active_support/backtrace_cleaner.rb, line 35definitialize@filters,@silencers= [], []add_core_silenceradd_gem_filteradd_gem_silenceradd_stdlib_silencerendInstance Public methodsadd_filter(&block)LinkAdds a filter from the block provided. Each line in the backtrace will be mapped against this filter.# Will turn "/my/rails/root/app/models/person.rb" into "app/models/person.rb"
root = "#{Rails.root}/"
backtrace_cleaner.add_filter { |line| line.start_with?(root) ? line.from(root.size) : line }Source:show|on GitHub# File activesupport/lib/active_support/backtrace_cleaner.rb, line 83defadd_filter(&block)@filters<<blockendadd_silencer(&block)LinkAdds a silencer from the block provided. If the silencer returnstruefor a given line, it will be excluded from the clean backtrace.# Will reject all lines that include the word "puma", like "/gems/puma/server.rb" or "/app/my_puma_server/rb"
backtrace_cleaner.add_silencer { |line| /puma/.match?(line) }Source:show|on GitHub# File activesupport/lib/active_support/backtrace_cleaner.rb, line 92defadd_silencer(&block)@silencers<<blockendclean(backtrace, kind = :silent)LinkReturns the backtrace after all filters and silencers have been run against it. Filters run first, then silencers.Also aliased as:filterSource:show|on GitHub# File activesupport/lib/active_support/backtrace_cleaner.rb, line 45defclean(backtrace,kind=:silent)filtered=filter_backtrace(backtrace)casekindwhen:silentsilence(filtered)when:noisenoise(filtered)elsefilteredendendclean_frame(frame, kind = :silent)LinkReturns the frame with all filters applied. returnsnilif the frame was silenced.Source:show|on GitHub# File activesupport/lib/active_support/backtrace_cleaner.rb, line 61defclean_frame(frame,kind=:silent)frame=frame.to_s@filters.eachdo|f|frame=f.call(frame.to_s)endcasekindwhen:silentframeunless@silencers.any?{|s|s.call(frame) }when:noiseframeif@silencers.any?{|s|s.call(frame) }elseframeendendfilter(backtrace, kind = :silent)LinkAlias for:cleanremove_filters!()LinkRemoves all filters, but leaves in the silencers. Useful if you suddenly need to see entire filepaths in the backtrace that you had already filtered out.Source:show|on GitHub# File activesupport/lib/active_support/backtrace_cleaner.rb, line 106defremove_filters!@filters= []endremove_silencers!()LinkRemoves all silencers, but leaves in the filters. Useful if your context of debugging suddenly expands as you suspect a bug in one of the libraries you use.Source:show|on GitHub# File activesupport/lib/active_support/backtrace_cleaner.rb, line 99defremove_silencers!@silencers= []end