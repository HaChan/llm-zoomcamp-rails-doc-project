Active Model SerializationProvides a basic serialization to aserializable_hashfor your objects.A minimal implementation could be:class Person
  include ActiveModel::Serialization

  attr_accessor :name

  def attributes
    {'name' => nil}
  end
endWhich would provide you with:person = Person.new
person.serializable_hash   # => {"name"=>nil}
person.name = "Bob"
person.serializable_hash   # => {"name"=>"Bob"}Anattributeshash must be defined and should contain any attributes you need to be serialized.Attributesmust be strings, not symbols. When called, serializable hash will use instance methods that match the name of the attributes hashâs keys. In order to override this behavior, take a look at the private methodread_attribute_for_serialization.ActiveModel::Serializers::JSONmodule automatically includes theActiveModel::Serializationmodule, so there is no need to explicitly includeActiveModel::Serialization.A minimal implementation including JSON would be:class Person
  include ActiveModel::Serializers::JSON

  attr_accessor :name

  def attributes
    {'name' => nil}
  end
endWhich would provide you with:person = Person.new
person.serializable_hash   # => {"name"=>nil}
person.as_json             # => {"name"=>nil}
person.to_json             # => "{\"name\":null}"

person.name = "Bob"
person.serializable_hash   # => {"name"=>"Bob"}
person.as_json             # => {"name"=>"Bob"}
person.to_json             # => "{\"name\":\"Bob\"}"Valid options are:only,:except,:methodsand:include. The following are all valid examples:person.serializable_hash(only: 'name')
person.serializable_hash(include: :address)
person.serializable_hash(include: { address: { only: 'city' }})MethodsSserializable_hashInstance Public methodsserializable_hash(options = nil)LinkReturns a serialized hash of your object.class Person
  include ActiveModel::Serialization

  attr_accessor :name, :age

  def attributes
    {'name' => nil, 'age' => nil}
  end

  def capitalized_name
    name.capitalize
  end
end

person = Person.new
person.name = 'bob'
person.age  = 22
person.serializable_hash                # => {"name"=>"bob", "age"=>22}
person.serializable_hash(only: :name)   # => {"name"=>"bob"}
person.serializable_hash(except: :name) # => {"age"=>22}
person.serializable_hash(methods: :capitalized_name)
# => {"name"=>"bob", "age"=>22, "capitalized_name"=>"Bob"}Example with:includeoptionclass User
  include ActiveModel::Serializers::JSON
  attr_accessor :name, :notes # Emulate has_many :notes
  def attributes
    {'name' => nil}
  end
end

class Note
  include ActiveModel::Serializers::JSON
  attr_accessor :title, :text
  def attributes
    {'title' => nil, 'text' => nil}
  end
end

note = Note.new
note.title = 'Battle of Austerlitz'
note.text = 'Some text here'

user = User.new
user.name = 'Napoleon'
user.notes = [note]

user.serializable_hash
# => {"name" => "Napoleon"}
user.serializable_hash(include: { notes: { only: 'title' }})
# => {"name" => "Napoleon", "notes" => [{"title"=>"Battle of Austerlitz"}]}Source:show|on GitHub# File activemodel/lib/active_model/serialization.rb, line 125defserializable_hash(options=nil)attribute_names=attribute_names_for_serializationreturnserializable_attributes(attribute_names)ifoptions.blank?ifonly=options[:only]attribute_names&=Array(only).map(&:to_s)elsifexcept=options[:except]attribute_names-=Array(except).map(&:to_s)endhash=serializable_attributes(attribute_names)Array(options[:methods]).each{|m|hash[m.to_s] =send(m) }serializable_add_includes(options)do|association,records,opts|hash[association.to_s] =ifrecords.respond_to?(:to_ary)records.to_ary.map{|a|a.serializable_hash(opts) }elserecords.serializable_hash(opts)endendhashend