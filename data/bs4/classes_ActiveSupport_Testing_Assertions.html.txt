MethodsAassert_changes,assert_difference,assert_no_changes,assert_no_difference,assert_not,assert_nothing_raised,assert_raise,assert_raisesInstance Public methodsassert_changes(expression, message = nil, from: UNTRACKED, to: UNTRACKED, &block)LinkAssertion that the result of evaluating an expression is changed before and after invoking the passed in block.assert_changes 'Status.all_good?' do
  post :create, params: { status: { ok: false } }
endYou can pass the block as a string to be evaluated in the context of the block. A lambda can be passed for the block as well.assert_changes -> { Status.all_good? } do
  post :create, params: { status: { ok: false } }
endThe assertion is useful to test side effects. The passed block can be anything that can be converted to string with to_s.assert_changes :@object do
  @object = 42
endThe keyword arguments:fromand:tocan be given to specify the expected initial value and the expected value after the block was executed.assert_changes :@object, from: nil, to: :foo do
  @object = :foo
endAn error message can be specified.assert_changes -> { Status.all_good? }, 'Expected the status to be bad' do
  post :create, params: { status: { incident: true } }
endSource:show|on GitHub# File activesupport/lib/active_support/testing/assertions.rb, line 191defassert_changes(expression,message=nil,from:UNTRACKED,to:UNTRACKED,&block)exp=expression.respond_to?(:call)?expression:->{eval(expression.to_s,block.binding) }before=exp.callretval=_assert_nothing_raised_or_warn("assert_changes",&block)unlessfrom==UNTRACKEDerror="Expected change from #{from.inspect}, got #{before.inspect}"error="#{message}.\n#{error}"ifmessageassertfrom===before,errorendafter=exp.callerror="#{expression.inspect} didn't change"error="#{error}. It was already #{to.inspect}"ifbefore==toerror="#{message}.\n#{error}"ifmessagerefute_equalbefore,after,errorunlessto==UNTRACKEDerror="Expected change to #{to.inspect}, got #{after.inspect}\n"error="#{message}.\n#{error}"ifmessageassertto===after,errorendretvalendassert_difference(expression, *args, &block)LinkTest numeric difference between the return value of an expression as a result of what is evaluated in the yielded block.assert_difference 'Article.count' do
  post :create, params: { article: {...} }
endAn arbitrary expression is passed in and evaluated.assert_difference 'Article.last.comments(:reload).size' do
  post :create, params: { comment: {...} }
endAn arbitrary positive or negative difference can be specified. The default is1.assert_difference 'Article.count', -1 do
  post :delete, params: { id: ... }
endAn array of expressions can also be passed in and evaluated.assert_difference [ 'Article.count', 'Post.count' ], 2 do
  post :create, params: { article: {...} }
endA hash of expressions/numeric differences can also be passed in and evaluated.assert_difference ->{ Article.count } => 1, ->{ Notification.count } => 2 do
  post :create, params: { article: {...} }
endA lambda or a list of lambdas can be passed in and evaluated:assert_difference ->{ Article.count }, 2 do
  post :create, params: { article: {...} }
end

assert_difference [->{ Article.count }, ->{ Post.count }], 2 do
  post :create, params: { article: {...} }
endAn error message can be specified.assert_difference 'Article.count', -1, 'An Article should be destroyed' do
  post :delete, params: { id: ... }
endSource:show|on GitHub# File activesupport/lib/active_support/testing/assertions.rb, line 101defassert_difference(expression,*args,&block)expressions=ifexpression.is_a?(Hash)message=args[0]expressionelsedifference=args[0]||1message=args[1]Array(expression).index_with(difference)endexps=expressions.keys.map{|e|e.respond_to?(:call)?e:lambda{eval(e,block.binding) }
  }before=exps.map(&:call)retval=_assert_nothing_raised_or_warn("assert_difference",&block)expressions.zip(exps,before)do|(code,diff),exp,before_value|actual=exp.callerror="#{code.inspect} didn't change by #{diff}, but by #{actual - before_value}"error="#{message}.\n#{error}"ifmessageassert_equal(before_value+diff,actual,error)endretvalendassert_no_changes(expression, message = nil, from: UNTRACKED, &block)LinkAssertion that the result of evaluating an expression is not changed before and after invoking the passed in block.assert_no_changes 'Status.all_good?' do
  post :create, params: { status: { ok: true } }
endProvide the optional keyword argument:fromto specify the expected initial value.assert_no_changes -> { Status.all_good? }, from: true do
  post :create, params: { status: { ok: true } }
endAn error message can be specified.assert_no_changes -> { Status.all_good? }, 'Expected the status to be good' do
  post :create, params: { status: { ok: false } }
endSource:show|on GitHub# File activesupport/lib/active_support/testing/assertions.rb, line 238defassert_no_changes(expression,message=nil,from:UNTRACKED,&block)exp=expression.respond_to?(:call)?expression:->{eval(expression.to_s,block.binding) }before=exp.callretval=_assert_nothing_raised_or_warn("assert_no_changes",&block)unlessfrom==UNTRACKEDerror="Expected initial value of #{from.inspect}, got #{before.inspect}"error="#{message}.\n#{error}"ifmessageassertfrom===before,errorendafter=exp.callerror="#{expression.inspect} changed"error="#{message}.\n#{error}"ifmessageifbefore.nil?assert_nilafter,errorelseassert_equalbefore,after,errorendretvalendassert_no_difference(expression, message = nil, &block)LinkAssertion that the numeric result of evaluating an expression is not changed before and after invoking the passed in block.assert_no_difference 'Article.count' do
  post :create, params: { article: invalid_attributes }
endA lambda can be passed in and evaluated.assert_no_difference -> { Article.count } do
  post :create, params: { article: invalid_attributes }
endAn error message can be specified.assert_no_difference 'Article.count', 'An Article should not be created' do
  post :create, params: { article: invalid_attributes }
endAn array of expressions can also be passed in and evaluated.assert_no_difference [ 'Article.count', -> { Post.count } ] do
  post :create, params: { article: invalid_attributes }
endSource:show|on GitHub# File activesupport/lib/active_support/testing/assertions.rb, line 153defassert_no_difference(expression,message=nil,&block)assert_differenceexpression,0,message,&blockendassert_not(object, message = nil)LinkAsserts that an expression is not truthy. Passes ifobjectisnilorfalse. âTruthyâ means âconsidered true in a conditionalâ likeif foo.assert_not nil    # => true
assert_not false  # => true
assert_not 'foo'  # => Expected "foo" to be nil or falseAn error message can be specified.assert_not foo, 'foo should be false'Source:show|on GitHub# File activesupport/lib/active_support/testing/assertions.rb, line 21defassert_not(object,message=nil)message||="Expected #{mu_pp(object)} to be nil or false"assert!object,messageendassert_nothing_raised()LinkAssertion that the block should not raise an exception.Passes if evaluated code in the yielded block raises no exception.assert_nothing_raised do
  perform_service(param: 'no_exception')
endSource:show|on GitHub# File activesupport/lib/active_support/testing/assertions.rb, line 48defassert_nothing_raisedyield.tap{assert(true) }rescue=>errorraiseMinitest::UnexpectedError.new(error)endassert_raise(*exp, match: nil, &block)LinkAlias for:assert_raisesassert_raises(*exp, match: nil, &block)LinkAsserts that a block raises one ofexp. This is an enhancement of the standardMinitestassertion method with the ability to test error messages.assert_raises(ArgumentError, match: /incorrect param/i) do
  perform_service(param: 'exception')
endAlso aliased as:assert_raiseSource:show|on GitHub# File activesupport/lib/active_support/testing/assertions.rb, line 34defassert_raises(*exp,match:nil,&block)error=super(*exp,&block)assert_match(match,error.message)ifmatcherrorend