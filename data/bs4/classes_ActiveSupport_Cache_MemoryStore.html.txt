Memory Cache StoreA cache store implementation which stores everything into memory in the same process. If youâre running multiple Ruby on Rails server processes (which is the case if youâre using Phusion Passenger or puma clustered mode), then this means that Rails server process instances wonât be able to share cache data with each other and this may not be the most appropriate cache in that scenario.This cache has a bounded size specified by the:sizeoptions to the initializer (default is 32Mb). When the cache exceeds the allotted size, a cleanup will occur which tries to prune the cache down to three quarters of the maximum size by removing the least recently used entries.Unlike otherCachestore implementations,MemoryStoredoes not compress values by default.MemoryStoredoes not benefit from compression as much as otherStoreimplementations, as it does not send data over a network. However, when compression is enabled, it still pays the full cost of compression in terms of cpu use.MemoryStoreis thread-safe.MethodsCcleanup,clearDdecrement,delete_matchedIincrementNnewPprune,pruning?Ssupports_cache_versioning?ConstantsPER_ENTRY_OVERHEAD=240Class Public methodsnew(options = nil)LinkSource:show|on GitHub# File activesupport/lib/active_support/cache/memory_store.rb, line 73definitialize(options=nil)options||={}options[:coder] =DupCoderunlessoptions.key?(:coder)||options.key?(:serializer)# Disable compression by default.options[:compress]||=falsesuper(options)@data= {}@max_size=options[:size]||32.megabytes@max_prune_time=options[:max_prune_time]||2@cache_size=0@monitor=Monitor.new@pruning=falseendsupports_cache_versioning?()LinkAdvertise cache versioning support.Source:show|on GitHub# File activesupport/lib/active_support/cache/memory_store.rb, line 88defself.supports_cache_versioning?trueendInstance Public methodscleanup(options = nil)LinkPreemptively iterates through all stored keys and removes the ones which have expired.Source:show|on GitHub# File activesupport/lib/active_support/cache/memory_store.rb, line 101defcleanup(options=nil)options=merged_options(options)_instrument(:cleanup,size:@data.size)dokeys=synchronize{@data.keys}keys.eachdo|key|entry=@data[key]delete_entry(key,**options)ifentry&&entry.expired?endendendclear(options = nil)LinkDelete all data stored in a given cache store.Source:show|on GitHub# File activesupport/lib/active_support/cache/memory_store.rb, line 93defclear(options=nil)synchronizedo@data.clear@cache_size=0endenddecrement(name, amount = 1, options = nil)LinkDecrement a cached integer value. Returns the updated value.If the key is unset or has expired, it will be set to-amount.cache.decrement("foo") # => -1To set a specific value, callwrite:cache.write("baz", 5)
cache.decrement("baz") # => 4Source:show|on GitHub# File activesupport/lib/active_support/cache/memory_store.rb, line 164defdecrement(name,amount=1,options=nil)modify_value(name,-amount,options)enddelete_matched(matcher, options = nil)LinkDeletes cache entries if the cache key matches a given pattern.Source:show|on GitHub# File activesupport/lib/active_support/cache/memory_store.rb, line 169defdelete_matched(matcher,options=nil)options=merged_options(options)matcher=key_matcher(matcher,options)instrument(:delete_matched,matcher.inspect)dokeys=synchronize{@data.keys}keys.eachdo|key|delete_entry(key,**options)ifkey.match(matcher)endendendincrement(name, amount = 1, options = nil)LinkIncrement a cached integer value. Returns the updated value.If the key is unset, it will be set toamount:cache.increment("foo") # => 1
cache.increment("bar", 100) # => 100To set a specific value, callwrite:cache.write("baz", 5)
cache.increment("baz") # => 6Source:show|on GitHub# File activesupport/lib/active_support/cache/memory_store.rb, line 149defincrement(name,amount=1,options=nil)modify_value(name,amount,options)endprune(target_size, max_time = nil)LinkTo ensure entries fit within the specified memory prune the cache by removing the least recently accessed entries.Source:show|on GitHub# File activesupport/lib/active_support/cache/memory_store.rb, line 114defprune(target_size,max_time=nil)returnifpruning?@pruning=truebeginstart_time=Process.clock_gettime(Process::CLOCK_MONOTONIC)cleanupinstrument(:prune,target_size,from:@cache_size)dokeys=synchronize{@data.keys}keys.eachdo|key|delete_entry(key,**options)returnif@cache_size<=target_size||(max_time&&Process.clock_gettime(Process::CLOCK_MONOTONIC)-start_time>max_time)endendensure@pruning=falseendendpruning?()LinkReturns true if the cache is currently being pruned.Source:show|on GitHub# File activesupport/lib/active_support/cache/memory_store.rb, line 133defpruning?@pruningend