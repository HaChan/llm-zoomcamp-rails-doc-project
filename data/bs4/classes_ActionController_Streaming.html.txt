Action ControllerStreamingAllows views to be streamed back to the client as they are rendered.By default,Railsrenders views by first rendering the template and then the layout. The response is sent to the client after the whole template is rendered, all queries are made, and the layout is processed.Streaminginverts the rendering flow by rendering the layout first and subsequently each part of the layout as they are processed. This allows the header of the HTML (which is usually in the layout) to be streamed back to client very quickly, enabling JavaScripts and stylesheets to be loaded earlier than usual.Several Rack middlewares may not work and you need to be careful when streaming. This is covered in more detail below, see theMiddlewares atStreamingsection.Streamingcan be added to a given template easily, all you need to do is to pass the:streamoption torender.class PostsController
  def index
    @posts = Post.all
    render stream: true
  end
endWhen to use streamingStreamingmay be considered to be overkill for lightweight actions likeneworedit. The real benefit of streaming is on expensive actions that, for example, do a lot of queries on the database.In such actions, you want to delay queries execution as much as you can. For example, imagine the followingdashboardaction:def dashboard
  @posts = Post.all
  @pages = Page.all
  @articles = Article.all
endMost of the queries here are happening in the controller. In order to benefit from streaming you would want to rewrite it as:def dashboard
  # Allow lazy execution of the queries
  @posts = Post.all
  @pages = Page.all
  @articles = Article.all
  render stream: true
endNotice that:streamonly works with templates.Rendering:jsonor:xmlwith:streamwonât work.Communication between layout and templateWhen streaming, rendering happens top-down instead of inside-out.Railsstarts with the layout, and the template is rendered later, when itsyieldis reached.This means that, if your application currently relies on instance variables set in the template to be used in the layout, they wonât work once you move to streaming. The proper way to communicate between layout and template, regardless of whether you use streaming or not, is by usingcontent_for,provide, andyield.Take a simple example where the layout expects the template to tell which title to use:<html>
  <head><title><%= yield :title %></title></head>
  <body><%= yield %></body>
</html>You would usecontent_forin your template to specify the title:<%= content_for :title, "Main" %>
HelloAnd the final result would be:<html>
  <head><title>Main</title></head>
  <body>Hello</body>
</html>However, ifcontent_foris called several times, the final result would have all calls concatenated. For instance, if we have the following template:<%= content_for :title, "Main" %>
Hello
<%= content_for :title, " page" %>The final result would be:<html>
  <head><title>Main page</title></head>
  <body>Hello</body>
</html>This means that, if you haveyield :titlein your layout and you want to use streaming, you would have to render the whole template (and eventually trigger all queries) before streaming the title and all assets, which defeats the purpose of streaming. Alternatively, you can use a helper calledprovidethat does the same ascontent_forbut tells the layout to stop searching for other entries and continue rendering.For instance, the template above usingprovidewould be:<%= provide :title, "Main" %>
Hello
<%= content_for :title, " page" %>Resulting in:<html>
  <head><title>Main</title></head>
  <body>Hello</body>
</html>That said, when streaming, you need to properly check your templates and choose when to useprovideandcontent_for.See alsoActionView::Helpers::CaptureHelperfor more information.Headers, cookies, session, and flashWhen streaming, the HTTP headers are sent to the client right before it renders the first line. This means that, modifying headers, cookies, session or flash after the template starts rendering will not propagate to the client.MiddlewaresMiddlewares that need to manipulate the body wonât work with streaming. You should disable those middlewares whenever streaming in development or production. For instance,Rack::Bugwonât work when streaming as it needs to inject contents in the HTML body.AlsoRack::Cachewonât work with streaming as it does not support streaming bodies yet. Whenever streamingCache-Controlis automatically set to âno-cacheâ.ErrorsWhen it comes to streaming, exceptions get a bit more complicated. This happens because part of the template was already rendered and streamed to the client, making it impossible to render a whole exception page.Currently, when an exception happens in development or production,Railswill automatically stream to the client:"><script>window.location = "/500.html"</script></html>The first two characters (">) are required in case the exception happens while rendering attributes for a given tag. You can check the real cause for the exception in your logger.Web server supportNot all web servers support streaming out-of-the-box. You need to check the instructions for each of them.UnicornUnicorn supports streaming but it needs to be configured. For this, you need to create a config file as follow:# unicorn.config.rb
listen 3000, tcp_nopush: falseAnd use it on initialization:unicorn_rails --config-file unicorn.config.rbYou may also want to configure other parameters like:tcp_nodelay.For more information, please check the [documentation](bogomips.org/unicorn/Unicorn/Configurator.html#method- i-listen).If you are using Unicorn with NGINX, you may need to tweak NGINX.Streamingshould work out of the box on Rainbows.PassengerPhusion Passenger with NGINX, offers two streaming mechanisms out of the box.NGINX response buffering mechanism which is dependent on the value ofpassenger_buffer_responseoption (default is âoffâ).Passenger buffering system which is always âonâ irrespective of the value ofpassenger_buffer_response.Whenpassenger_buffer_responseis turned âonâ, then streaming would be done at the NGINX level which waits until the application is done sending the response back to the client.For more information, please check the [documentation] (www.phusionpassenger.com/docs/references/config_reference/nginx/#passenger_buffer_response).