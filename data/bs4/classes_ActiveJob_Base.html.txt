Active Job BaseActive Job objects can be configured to work with different backend queuing frameworks. To specify a queue adapter to use:ActiveJob::Base.queue_adapter = :inlineA list of supported adapters can be found inQueueAdapters.Active Job objects can be defined by creating a class that inherits from theActiveJob::Baseclass. The only necessary method to implement is the âperformâ method.To define an Active Job object:class ProcessPhotoJob < ActiveJob::Base
  def perform(photo)
    photo.watermark!('Rails')
    photo.rotate!(90.degrees)
    photo.resize_to_fit!(300, 300)
    photo.upload!
  end
endRecords that are passed in are serialized/deserialized using Global ID. More information can be found inArguments.To enqueue a job to be performed as soon as the queuing system is free:ProcessPhotoJob.perform_later(photo)To enqueue a job to be processed at some point in the future:ProcessPhotoJob.set(wait_until: Date.tomorrow.noon).perform_later(photo)More information can be found inActiveJob::Core::ClassMethods#setA job can also be processed immediately without sending to the queue:ProcessPhotoJob.perform_now(photo)ExceptionsDeserializationError- Error class for deserialization errors.SerializationError- Error class for serialization errors.Included ModulesActiveJob::CoreActiveJob::QueueAdapterActiveJob::QueueNameActiveJob::QueuePriorityActiveJob::EnqueuingActiveJob::ExecutionActiveJob::CallbacksActiveJob::ExceptionsActiveJob::Logging