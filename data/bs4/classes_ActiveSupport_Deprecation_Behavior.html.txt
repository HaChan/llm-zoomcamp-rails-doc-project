Behaviormodule allows to determine how to display deprecation messages. You can create a custom behavior or set any from theDEFAULT_BEHAVIORSconstant. Available behaviors are::raiseRaiseActiveSupport::DeprecationException.:stderrLog all deprecation warnings to$stderr.:logLog all deprecation warnings toRails.logger.:notifyUseActiveSupport::Notificationsto notifydeprecation.rails.:reportUseActiveSupport::ErrorReporterto report deprecations.:silenceDo nothing. On Rails, setconfig.active_support.report_deprecations = falseto disable all behaviors.Setting behaviors only affects deprecations that happen after boot time. For more information you can read the documentation of thebehavior=method.MethodsBbehavior,behavior=Ddisallowed_behavior,disallowed_behavior=Attributes[RW]debugWhether to print a backtrace along with the warning.Instance Public methodsbehavior()LinkReturns the current behavior or if one isnât set, defaults to:stderr.Source:show|on GitHub# File activesupport/lib/active_support/deprecation/behaviors.rb, line 74defbehavior@behavior||=[DEFAULT_BEHAVIORS[:stderr]]endbehavior=(behavior)LinkSets the behavior to the specified value. Can be a single value, array, or an object that responds tocall.Available behaviors::raiseRaiseActiveSupport::DeprecationException.:stderrLog all deprecation warnings to$stderr.:logLog all deprecation warnings toRails.logger.:notifyUseActiveSupport::Notificationsto notifydeprecation.rails.:reportUseActiveSupport::ErrorReporterto report deprecations.:silenceDo nothing.Setting behaviors only affects deprecations that happen after boot time.Deprecationwarnings raised by gems are not affected by this setting because they happen before Rails boots up.deprecator = ActiveSupport::Deprecation.new
deprecator.behavior = :stderr
deprecator.behavior = [:stderr, :log]
deprecator.behavior = MyCustomHandler
deprecator.behavior = ->(message, callstack, deprecation_horizon, gem_name) {
  # custom stuff
}If you are using Rails, you can setconfig.active_support.report_deprecations = falseto disable all deprecation behaviors. This is similar to the:silenceoption but more performant.Source:show|on GitHub# File activesupport/lib/active_support/deprecation/behaviors.rb, line 111defbehavior=(behavior)@behavior=Array(behavior).map{|b|DEFAULT_BEHAVIORS[b]||arity_coerce(b) }enddisallowed_behavior()LinkReturns the current behavior for disallowed deprecations or if one isnât set, defaults to:raise.Source:show|on GitHub# File activesupport/lib/active_support/deprecation/behaviors.rb, line 79defdisallowed_behavior@disallowed_behavior||=[DEFAULT_BEHAVIORS[:raise]]enddisallowed_behavior=(behavior)LinkSets the behavior for disallowed deprecations (those configured byActiveSupport::Deprecation#disallowed_warnings=) to the specified value. As withbehavior=, this can be a single value, array, or an object that responds tocall.Source:show|on GitHub# File activesupport/lib/active_support/deprecation/behaviors.rb, line 119defdisallowed_behavior=(behavior)@disallowed_behavior=Array(behavior).map{|b|DEFAULT_BEHAVIORS[b]||arity_coerce(b) }end