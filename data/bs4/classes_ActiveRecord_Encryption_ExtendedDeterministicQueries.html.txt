Automatically expand encrypted arguments to support querying both encrypted and unencrypted dataActive Record Encryption supports querying the db using deterministic attributes. For example:Contact.find_by(email_address: "jorge@hey.com")The value âjorge@hey.comâ will get encrypted automatically to perform the query. But there is a problem while the data is being encrypted. This wonât work. During that time, you need these queries to be:Contact.find_by(email_address: [ "jorge@hey.com", "<encrypted jorge@hey.com>" ])This patchesActiveRecordto support this automatically. It addresses both:ActiveRecord::Base- Used inContact.find_by_email_address(...)ActiveRecord::Relation- Used inContact.internal.find_by_email_address(...)This module is included if âconfig.active_record.encryption.extend_queries` is `true`.NamespaceMODULEActiveRecord::Encryption::ExtendedDeterministicQueries::CoreQueriesMODULEActiveRecord::Encryption::ExtendedDeterministicQueries::ExtendedEncryptableTypeMODULEActiveRecord::Encryption::ExtendedDeterministicQueries::RelationQueriesCLASSActiveRecord::Encryption::ExtendedDeterministicQueries::AdditionalValueMethodsIinstall_supportClass Public methodsinstall_support()LinkSource:show|on GitHub# File activerecord/lib/active_record/encryption/extended_deterministic_queries.rb, line 24defself.install_support# ActiveRecord::Base relies on ActiveRecord::Relation (ActiveRecord::QueryMethods) but it does# some prepared statements caching. That's why we need to intercept +ActiveRecord::Base+ as soon# as it's invoked (so that the proper prepared statement is cached).ActiveRecord::Relation.prepend(RelationQueries)ActiveRecord::Base.include(CoreQueries)ActiveRecord::Encryption::EncryptedAttributeType.prepend(ExtendedEncryptableType)end