Active Record CalculationsMethodsAasync_average,async_count,async_ids,async_maximum,async_minimum,async_pick,async_pluck,async_sum,averageCcalculate,countIidsMmaximum,minimumPpick,pluckSsumInstance Public methodsasync_average(column_name)LinkSame asaverage, but performs the query asynchronously and returns anActiveRecord::Promise.Source:show|on GitHub# File activerecord/lib/active_record/relation/calculations.rb, line 122defasync_average(column_name)async.average(column_name)endasync_count(column_name = nil)LinkSame ascount, but performs the query asynchronously and returns anActiveRecord::Promise.Source:show|on GitHub# File activerecord/lib/active_record/relation/calculations.rb, line 108defasync_count(column_name=nil)async.count(column_name)endasync_ids()LinkSame asids, but performs the query asynchronously and returns anActiveRecord::Promise.Source:show|on GitHub# File activerecord/lib/active_record/relation/calculations.rb, line 405defasync_idsasync.idsendasync_maximum(column_name)LinkSame asmaximum, but performs the query asynchronously and returns anActiveRecord::Promise.Source:show|on GitHub# File activerecord/lib/active_record/relation/calculations.rb, line 152defasync_maximum(column_name)async.maximum(column_name)endasync_minimum(column_name)LinkSame asminimum, but performs the query asynchronously and returns anActiveRecord::Promise.Source:show|on GitHub# File activerecord/lib/active_record/relation/calculations.rb, line 137defasync_minimum(column_name)async.minimum(column_name)endasync_pick(*column_names)LinkSame aspick, but performs the query asynchronously and returns anActiveRecord::Promise.Source:show|on GitHub# File activerecord/lib/active_record/relation/calculations.rb, line 359defasync_pick(*column_names)async.pick(*column_names)endasync_pluck(*column_names)LinkSame aspluck, but performs the query asynchronously and returns anActiveRecord::Promise.Source:show|on GitHub# File activerecord/lib/active_record/relation/calculations.rb, line 330defasync_pluck(*column_names)async.pluck(*column_names)endasync_sum(identity_or_column = nil)LinkSame assum, but performs the query asynchronously and returns anActiveRecord::Promise.Source:show|on GitHub# File activerecord/lib/active_record/relation/calculations.rb, line 182defasync_sum(identity_or_column=nil)async.sum(identity_or_column)endaverage(column_name)LinkCalculates the average value on a given column. Returnsnilif thereâs no row. Seecalculatefor examples with options.Person.average(:age) # => 35.8Source:show|on GitHub# File activerecord/lib/active_record/relation/calculations.rb, line 116defaverage(column_name)calculate(:average,column_name)endcalculate(operation, column_name)LinkThis calculates aggregate values in the given column. Methods forcount,sum,average,minimum, andmaximumhave been added as shortcuts.Person.calculate(:count, :all) # The same as Person.count
Person.average(:age) # SELECT AVG(age) FROM people...

# Selects the minimum age for any family without any minors
Person.group(:last_name).having("min(age) > 17").minimum(:age)

Person.sum("2 * age")There are two basic forms of output:Single aggregate value: The single value is type cast toIntegerfor COUNT,Floatfor AVG, and the given columnâs type for everything else.Grouped values: This returns an ordered hash of the values and groups them. It takes either a column name, or the name of a belongs_to association.values = Person.group('last_name').maximum(:age)
puts values["Drake"]
# => 43

drake  = Family.find_by(last_name: 'Drake')
values = Person.group(:family).maximum(:age) # Person belongs_to :family
puts values[drake]
# => 43

values.each do |family, max_age|
  ...
endSource:show|on GitHub# File activerecord/lib/active_record/relation/calculations.rb, line 217defcalculate(operation,column_name)operation=operation.to_s.downcaseif@nonecaseoperationwhen"count","sum"result=group_values.any??Hash.new:0return@async?Promise::Complete.new(result):resultwhen"average","minimum","maximum"result=group_values.any??Hash.new:nilreturn@async?Promise::Complete.new(result):resultendendifhas_include?(column_name)relation=apply_join_dependencyifoperation=="count"unlessdistinct_value||distinct_select?(column_name||select_for_count)relation.distinct!relation.select_values=Array(klass.primary_key||table[Arel.star])end# PostgreSQL: ORDER BY expressions must appear in SELECT list when using DISTINCTrelation.order_values= []ifgroup_values.empty?endrelation.calculate(operation,column_name)elseperform_calculation(operation,column_name)endendcount(column_name = nil)LinkCount the records.Person.count
# => the total count of all people

Person.count(:age)
# => returns the total count of all people whose age is present in database

Person.count(:all)
# => performs a COUNT(*) (:all is an alias for '*')

Person.distinct.count(:age)
# => counts the number of different age valuesIfcountis used withRelation#group, it returns aHashwhose keys represent the aggregated column, and the values are the respective amounts:Person.group(:city).count
# => { 'Rome' => 5, 'Paris' => 3 }Ifcountis used withRelation#groupfor multiple columns, it returns aHashwhose keys are an array containing the individual values of each column and the value of each key would be thecount.Article.group(:status, :category).count
# =>  {["draft", "business"]=>10, ["draft", "technology"]=>4, ["published", "technology"]=>2}Ifcountis used withRelation#select, it will count the selected columns:Person.select(:age).count
# => counts the number of different age valuesNote: not all validRelation#selectexpressions are validcountexpressions. The specifics differ between databases. In invalid cases, an error from the database is thrown.When given a block, loads all records in the relation, if the relation hasnât been loaded yet. Calls the block with each record in the relation. Returns the number of records for which the block returns a truthy value.Person.count { |person| person.age > 21 }
# => counts the number of people older that 21Note: If there are a lot of records in the relation, loading all records could result in performance issues.Source:show|on GitHub# File activerecord/lib/active_record/relation/calculations.rb, line 94defcount(column_name=nil)ifblock_given?unlesscolumn_name.nil?raiseArgumentError,"Column name argument is not supported when a block is passed."endsuper()elsecalculate(:count,column_name)endendids()LinkReturns the base modelâs IDâs for the relation using the tableâs primary keyPerson.ids # SELECT people.id FROM people
Person.joins(:company).ids # SELECT people.id FROM people INNER JOIN companies ON companies.id = people.company_idSource:show|on GitHub# File activerecord/lib/active_record/relation/calculations.rb, line 367defidsprimary_key_array=Array(primary_key)ifloaded?result=records.mapdo|record|ifprimary_key_array.one?record._read_attribute(primary_key_array.first)elseprimary_key_array.map{|column|record._read_attribute(column) }endendreturn@async?Promise::Complete.new(result):resultendifhas_include?(primary_key)relation=apply_join_dependency.group(*primary_key_array)returnrelation.idsendcolumns=arel_columns(primary_key_array)relation=spawnrelation.select_values=columnsresult=ifrelation.where_clause.contradiction?ActiveRecord::Result.emptyelseskip_query_cache_if_necessarydoklass.with_connectiondo|c|c.select_all(relation,"#{klass.name} Ids",async:@async)endendendresult.then{|result|type_cast_pluck_values(result,columns) }endmaximum(column_name)LinkCalculates the maximum value on a given column. The value is returned with the same data type of the column, ornilif thereâs no row. Seecalculatefor examples with options.Person.maximum(:age) # => 93Source:show|on GitHub# File activerecord/lib/active_record/relation/calculations.rb, line 146defmaximum(column_name)calculate(:maximum,column_name)endminimum(column_name)LinkCalculates the minimum value on a given column. The value is returned with the same data type of the column, ornilif thereâs no row. Seecalculatefor examples with options.Person.minimum(:age) # => 7Source:show|on GitHub# File activerecord/lib/active_record/relation/calculations.rb, line 131defminimum(column_name)calculate(:minimum,column_name)endpick(*column_names)LinkPick the value(s) from the named column(s) in the current relation. This is short-hand forrelation.limit(1).pluck(*column_names).first, and is primarily useful when you have a relation thatâs already narrowed down to a single row.Just likepluck,pickwill only load the actual value, not the entire record object, so itâs also more efficient. The value is, again like with pluck, typecast by the column type.Person.where(id: 1).pick(:name)
# SELECT people.name FROM people WHERE id = 1 LIMIT 1
# => 'David'

Person.where(id: 1).pick(:name, :email_address)
# SELECT people.name, people.email_address FROM people WHERE id = 1 LIMIT 1
# => [ 'David', 'david@loudthinking.com' ]Source:show|on GitHub# File activerecord/lib/active_record/relation/calculations.rb, line 348defpick(*column_names)ifloaded?&&all_attributes?(column_names)result=records.pick(*column_names)return@async?Promise::Complete.new(result):resultendlimit(1).pluck(*column_names).then(&:first)endpluck(*column_names)LinkUsepluckas a shortcut to select one or more attributes without loading an entire record object per row.Person.pluck(:name)instead ofPerson.all.map(&:name)Pluck returns anArrayof attribute values type-casted to match the plucked column names, if they can be deduced. Plucking an SQL fragment returnsStringvalues by default.Person.pluck(:name)
# SELECT people.name FROM people
# => ['David', 'Jeremy', 'Jose']

Person.pluck(:id, :name)
# SELECT people.id, people.name FROM people
# => [[1, 'David'], [2, 'Jeremy'], [3, 'Jose']]

Person.distinct.pluck(:role)
# SELECT DISTINCT role FROM people
# => ['admin', 'member', 'guest']

Person.where(age: 21).limit(5).pluck(:id)
# SELECT people.id FROM people WHERE people.age = 21 LIMIT 5
# => [2, 3]

Comment.joins(:person).pluck(:id, person: [:id])
# SELECT comments.id, people.id FROM comments INNER JOIN people on comments.person_id = people.id
# => [[1, 2], [2, 2]]

Person.pluck(Arel.sql('DATEDIFF(updated_at, created_at)'))
# SELECT DATEDIFF(updated_at, created_at) FROM people
# => ['0', '27761', '173']See alsoids.Source:show|on GitHub# File activerecord/lib/active_record/relation/calculations.rb, line 287defpluck(*column_names)if@noneif@asyncreturnPromise::Complete.new([])elsereturn[]endendifloaded?&&all_attributes?(column_names)result=records.pluck(*column_names)if@asyncreturnPromise::Complete.new(result)elsereturnresultendendifhas_include?(column_names.first)relation=apply_join_dependencyrelation.pluck(*column_names)elseklass.disallow_raw_sql!(flattened_args(column_names))columns=arel_columns(column_names)relation=spawnrelation.select_values=columnsresult=skip_query_cache_if_necessarydoifwhere_clause.contradiction?ActiveRecord::Result.empty(async:@async)elseklass.with_connectiondo|c|c.select_all(relation.arel,"#{klass.name} Pluck",async:@async)endendendresult.thendo|result|type_cast_pluck_values(result,columns)endendendsum(initial_value_or_column = 0, &block)LinkCalculates the sum of values on a given column. The value is returned with the same data type of the column,0if thereâs no row. Seecalculatefor examples with options.Person.sum(:age) # => 4562When given a block, loads all records in the relation, if the relation hasnât been loaded yet. Calls the block with each record in the relation. Returns the sum ofinitial_value_or_columnand the block return values:Person.sum { |person| person.age } # => 4562
Person.sum(1000) { |person| person.age } # => 5562Note: If there are a lot of records in the relation, loading all records could result in performance issues.Source:show|on GitHub# File activerecord/lib/active_record/relation/calculations.rb, line 172defsum(initial_value_or_column=0,&block)ifblock_given?map(&block).sum(initial_value_or_column)elsecalculate(:sum,initial_value_or_column)endend