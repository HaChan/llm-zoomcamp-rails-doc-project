NamespaceCLASSActionController::Redirecting::UnsafeRedirectErrorMethodsRredirect_back,redirect_back_or_to,redirect_toUurl_fromIncluded ModulesActionController::UrlForConstantsILLEGAL_HEADER_VALUE_REGEX=/[\x00-\x08\x0A-\x1F]/Instance Public methodsredirect_back(fallback_location:, allow_other_host: _allow_other_host, **args)LinkSoft deprecated alias forredirect_back_or_towhere thefallback_locationlocation is supplied as a keyword argument instead of the first positional argument.Source:show|on GitHub# File actionpack/lib/action_controller/metal/redirecting.rb, line 121defredirect_back(fallback_location:,allow_other_host:_allow_other_host,**args)redirect_back_or_tofallback_location,allow_other_host:allow_other_host,**argsendredirect_back_or_to(fallback_location, allow_other_host: _allow_other_host, **options)LinkRedirects the browser to the page that issued the request (the referrer) if possible, otherwise redirects to the provided default fallback location.The referrer information is pulled from the HTTPReferer(sic) header on the request. This is an optional header and its presence on the request is subject to browser security settings and user preferences. If the request is missing this header, thefallback_locationwill be used.redirect_back_or_to({ action: "show", id: 5 })
redirect_back_or_to @post
redirect_back_or_to "http://www.rubyonrails.org"
redirect_back_or_to "/images/screenshot.jpg"
redirect_back_or_to posts_url
redirect_back_or_to proc { edit_post_url(@post) }
redirect_back_or_to '/', allow_other_host: falseOptions:allow_other_host- Allow or disallow redirection to the host that is different to the current host, defaults to true.All other options that can be passed toredirect_toare accepted as options, and the behavior is identical.Source:show|on GitHub# File actionpack/lib/action_controller/metal/redirecting.rb, line 148defredirect_back_or_to(fallback_location,allow_other_host:_allow_other_host,**options)ifrequest.referer&&(allow_other_host||_url_host_allowed?(request.referer))redirect_torequest.referer,allow_other_host:allow_other_host,**optionselse# The method level `allow_other_host` doesn't apply in the fallback case, omit# and let the `redirect_to` handling take over.redirect_tofallback_location,**optionsendendredirect_to(options = {}, response_options = {})LinkRedirects the browser to the target specified inoptions. This parameter can be any one of:Hash- The URL will be generated by calling url_for with theoptions.Record- The URL will be generated by calling url_for with theoptions, which will reference a named URL for that record.Stringstarting withprotocol://(likehttp://) or a protocol relative reference (like//) - Is passed straight through as the target for redirection.Stringnot containing a protocol - The current protocol and host is prepended to the string.Proc- A block that will be executed in the controllerâs context. Should return any option accepted byredirect_to.Examplesredirect_to action: "show", id: 5
redirect_to @post
redirect_to "http://www.rubyonrails.org"
redirect_to "/images/screenshot.jpg"
redirect_to posts_url
redirect_to proc { edit_post_url(@post) }The redirection happens as a302 Foundheader unless otherwise specified using the:statusoption:redirect_to post_url(@post), status: :found
redirect_to action: 'atom', status: :moved_permanently
redirect_to post_url(@post), status: 301
redirect_to action: 'atom', status: 302The status code can either be a standardHTTP Status codeas an integer, or a symbol representing the downcased, underscored and symbolized description. Note that the status code must be a 3xx HTTP code, or redirection will not occur.If you are using XHR requests other than GET or POST and redirecting after the request then some browsers will follow the redirect using the original request method. This may lead to undesirable behavior such as a double DELETE. To work around this you can return a303 See Otherstatus code which will be followed using a GET request.redirect_to posts_url, status: :see_other
redirect_to action: 'index', status: 303It is also possible to assign a flash message as part of the redirection. There are two special accessors for the commonly used flash namesalertandnoticeas well as a general purposeflashbucket.redirect_to post_url(@post), alert: "Watch it, mister!"
redirect_to post_url(@post), status: :found, notice: "Pay attention to the road"
redirect_to post_url(@post), status: 301, flash: { updated_post_id: @post.id }
redirect_to({ action: 'atom' }, alert: "Something serious happened")Statements afterredirect_toin our controller get executed, soredirect_todoesnât stop the execution of the function. To terminate the execution of the function immediately after theredirect_to, use return.redirect_to post_url(@post) and returnOpen Redirect protectionBy default,Railsprotects against redirecting to external hosts for your appâs safety, so called open redirects. Note: this was a new default inRails7.0, after upgrading opt-in by uncommenting the line withraise_on_open_redirectsinconfig/initializers/new_framework_defaults_7_0.rbHereredirect_toautomatically validates the potentially-unsafe URL:redirect_to params[:redirect_url]RaisesUnsafeRedirectErrorin the case of an unsafe redirect.To allow any external redirects passallow_other_host: true, though using a user-provided param in that case is unsafe.redirect_to "https://rubyonrails.org", allow_other_host: trueSeeurl_fromfor more information on what an internal and safe URL is, or how to fall back to an alternate redirect URL in the unsafe case.Source:show|on GitHub# File actionpack/lib/action_controller/metal/redirecting.rb, line 103defredirect_to(options= {},response_options= {})raiseActionControllerError.new("Cannot redirect to nil!")unlessoptionsraiseAbstractController::DoubleRenderErrorifresponse_bodyallow_other_host=response_options.delete(:allow_other_host) {_allow_other_host}self.status=_extract_redirect_to_status(options,response_options)redirect_to_location=_compute_redirect_to_location(request,options)_ensure_url_is_http_header_safe(redirect_to_location)self.location=_enforce_open_redirect_protection(redirect_to_location,allow_other_host:allow_other_host)self.response_body=""endurl_from(location)LinkVerifies the passedlocationis an internal URL thatâs safe to redirect to and returns it, or nil if not. Useful to wrap a params provided redirect URL and fall back to an alternate URL to redirect to:redirect_to url_from(params[:redirect_url]) || root_urlThelocationis considered internal, and safe, if itâs on the same host asrequest.host:# If request.host is example.com:
url_from("https://example.com/profile") # => "https://example.com/profile"
url_from("http://example.com/profile")  # => "http://example.com/profile"
url_from("http://evil.com/profile")     # => nilSubdomains are considered part of the host:# If request.host is on https://example.com or https://app.example.com, you'd get:
url_from("https://dev.example.com/profile") # => nilNOTE: thereâs a similarity withurl_for, which generates an internal URL from various options from within the app, e.g.url_for(@post). However,url_fromis meant to take an external parameter to verify as inurl_from(params[:redirect_url]).Source:show|on GitHub# File actionpack/lib/action_controller/metal/redirecting.rb, line 202defurl_from(location)location=location.presencelocationiflocation&&_url_host_allowed?(location)end