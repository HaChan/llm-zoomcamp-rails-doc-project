Action DispatchResponseRepresents an HTTP response generated by a controller action. Use it to retrieve the current state of the response, or customize the response. It can either represent a real HTTP response (i.e. one that is meant to be sent back to the web browser) or aTestResponse(i.e. one that is generated from integration tests).TheResponseobject for the current request is exposed on controllers asActionController::Metal#response.ActionController::Metalalso provides a few additional methods that delegate to attributes of theResponsesuch asActionController::Metal#headers.Integrationtests will likely also want to inspect responses in more detail. Methods such asIntegration::RequestHelpers#getandIntegration::RequestHelpers#postreturn instances ofTestResponse(which inherits fromResponse) for this purpose.For example, the following demo integration test prints the body of the controller response to the console:class DemoControllerTest < ActionDispatch::IntegrationTest
  def test_print_root_path_to_console
    get('/')
    puts response.body
  end
endNamespaceCLASSActionDispatch::Response::RackBodyMethodsAabort,await_commit,await_sentBbody,body=,body_partsCcharset,charset=,close,code,commit!,committed?,content_type,content_type=,cookies,createDdelete_headerEeachGget_headerHhas_header?Llocation,location=Mmedia_type,merge_default_headers,messageNnewPprepare!Rredirect_url,reset_body!,response_codeSsend_file,sending!,sending?,sending_file=,sent!,sent?,set_header,status=,status_messageTto_aWwriteIncluded ModulesRack::Response::HelpersActionDispatch::Http::FilterRedirectActionDispatch::Http::Cache::ResponseMonitorMixinConstantsCONTENT_TYPE="Content-Type"ContentTypeHeader=Struct.new :mime_type, :charsetHeader=HeadersTo be deprecated:Headers=::Rack::HeadersNO_CONTENT_CODES=[100, 101, 102, 103, 204, 205, 304]NullContentTypeHeader=ContentTypeHeader.new nil, nilSET_COOKIE="Set-Cookie"Attributes[R]headerThe headers for the response.header["Content-Type"] # => "text/plain"
header["Content-Type"] = "application/json"
header["Content-Type"] # => "application/json"Also aliased asheaders.headers["Content-Type"] # => "text/plain"
headers["Content-Type"] = "application/json"
headers["Content-Type"] # => "application/json"Also aliased asheaderfor compatibility.[R]headersThe headers for the response.header["Content-Type"] # => "text/plain"
header["Content-Type"] = "application/json"
header["Content-Type"] # => "application/json"Also aliased asheaders.headers["Content-Type"] # => "text/plain"
headers["Content-Type"] = "application/json"
headers["Content-Type"] # => "application/json"Also aliased asheaderfor compatibility.[RW]requestThe request that the response is responding to.[R]statusThe HTTP status code.[R]streamThe underlying body, as a streamable object.Class Public methodscreate(status = 200, headers = {}, body = [], default_headers: self.default_headers)LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 159defself.create(status=200,headers= {},body= [],default_headers:self.default_headers)headers=merge_default_headers(headers,default_headers)newstatus,headers,bodyendmerge_default_headers(original, default)LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 164defself.merge_default_headers(original,default)default.respond_to?(:merge)?default.merge(original):originalendnew(status = 200, headers = nil, body = [])LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 171definitialize(status=200,headers=nil,body= [])super()@headers=Headers.newheaders&.eachdo|key,value|@headers[key] =valueendself.body,self.status=body,status@cv=new_cond@committed=false@sending=false@sent=falseprepare_cache_control!yieldselfifblock_given?endInstance Public methodsabort()LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 396defabortifstream.respond_to?(:abort)stream.abortelsifstream.respond_to?(:close)# `stream.close` should really be reserved for a close from the other direction,# but we must fall back to it for compatibility.stream.closeendendawait_commit()LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 197defawait_commitsynchronizedo@cv.wait_until{@committed}endendawait_sent()LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 203defawait_sentsynchronize{@cv.wait_until{@sent} }endbody()LinkReturns the content of the response as a string. This contains the contents of any calls torender.Source:show|on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 330defbody@stream.bodyendbody=(body)LinkAllows you to manually set or override the response body.Source:show|on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 339defbody=(body)ifbody.respond_to?(:to_path)@stream=bodyelsesynchronizedo@stream=build_bufferself,munge_body_object(body)endendendbody_parts()LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 383defbody_partsparts= []@stream.each{|x|parts<<x}partsendcharset()LinkThe charset of the response. HTML wants to know the encoding of the content youâre giving them, so we need to send that along.Source:show|on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 300defcharsetheader_info=parsed_content_type_headerheader_info.charset||self.class.default_charsetendcharset=(charset)LinkSets the HTTP character set. In case ofnilparameter it sets the charset todefault_charset.response.charset = 'utf-16' # => 'utf-16'
response.charset = nil      # => 'utf-8'Source:show|on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 289defcharset=(charset)content_type=parsed_content_type_header.mime_typeiffalse==charsetset_content_typecontent_type,nilelseset_content_typecontent_type,charset||self.class.default_charsetendendclose()LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 392defclosestream.closeifstream.respond_to?(:close)endcode()LinkReturns a string to ensure compatibility withNet::HTTPResponse.Source:show|on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 311defcode@status.to_sendcommit!()LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 207defcommit!synchronizedobefore_committed@committed=true@cv.broadcastendendcommitted?()LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 231defcommitted?;synchronize{@committed};endcontent_type()LinkContent type of response.Source:show|on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 269defcontent_typesuper.presenceendcontent_type=(content_type)LinkSets the HTTP responseâs content MIME type. For example, in the controller you could write this:response.content_type = "text/plain"If a character set has been defined for this response (seecharset=) then the character set information will also be included in the content type information.Source:show|on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 259defcontent_type=(content_type)returnunlesscontent_typenew_header_info=parse_content_type(content_type.to_s)prev_header_info=parsed_content_type_headercharset=new_header_info.charset||prev_header_info.charsetcharset||=self.class.default_charsetunlessprev_header_info.mime_typeset_content_typenew_header_info.mime_type,charsetendcookies()LinkReturns the response cookies, converted to aHashof (name => value) pairsassert_equal 'AuthorOfNewPage', r.cookies['author']Source:show|on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 419defcookiescookies= {}ifheader=get_header(SET_COOKIE)header=header.split("\n")ifheader.respond_to?(:to_str)header.eachdo|cookie|ifpair=cookie.split(";").firstkey,value=pair.split("=").map{|v|Rack::Utils.unescape(v) }cookies[key] =valueendendendcookiesenddelete_header(key)LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 195defdelete_header(key);@headers.deletekey;endeach(&block)LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 77defeach(&block)sending!x=@stream.each(&block)sent!xendget_header(key)LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 193defget_header(key);@headers[key];endhas_header?(key)LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 192defhas_header?(key);@headers.key?key;endlocationLinkLocation of the response.Also aliased as:redirect_urlSource:on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 235location=(location)LinkSets the location of the responseSource:on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 240media_type()LinkMedia type of response.Source:show|on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 274defmedia_typeparsed_content_type_header.mime_typeendmessage()LinkReturns the corresponding message for the current HTTP status code:response.status = 200
response.message # => "OK"

response.status = 404
response.message # => "Not Found"Also aliased as:status_messageSource:show|on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 323defmessageRack::Utils::HTTP_STATUS_CODES[@status]endprepare!()LinkAlias for:to_aredirect_urlLinkThe location header weâll be responding with.Alias for:locationreset_body!()LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 379defreset_body!@stream=build_buffer(self, [])endresponse_code()LinkThe response code of the request.Source:show|on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 306defresponse_code@statusendsend_file(path)LinkSend the file stored atpathas the response body.Source:show|on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 374defsend_file(path)commit!@stream=FileBody.new(path)endsending!()LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 215defsending!synchronizedobefore_sending@sending=true@cv.broadcastendendsending?()LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 230defsending?;synchronize{@sending};endsending_file=(v)LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 278defsending_file=(v)iftrue==vself.charset=falseendendsent!()LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 223defsent!synchronizedo@sent=true@cv.broadcastendendsent?()LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 232defsent?;synchronize{@sent};endset_header(key, v)LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 194defset_header(key,v);@headers[key] =v;endstatus=(status)LinkSets the HTTP status code.Source:show|on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 247defstatus=(status)@status=Rack::Utils.status_code(status)endstatus_message()LinkAlias for:messageto_a()LinkTurns theResponseinto a Rack-compatible array of the status, headers, and body. Allows explicit splatting:status, headers, body = *responseAlso aliased as:prepare!Source:show|on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 410defto_acommit!rack_response@status,@headers.to_hashendwrite(string)LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/http/response.rb, line 334defwrite(string)@stream.writestringend