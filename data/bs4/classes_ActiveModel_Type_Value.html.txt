Active Model Value TypeThe base class for all attribute types. This class also serves as the default type for attributes that do not specify a type.Methods#==Aas_json,assert_valid_valueCcast,cast_value,changed?,changed_in_place?DdeserializeEeql?HhashNnewSserializable?,serializeTtypeIncluded ModulesActiveModel::Type::SerializeCastValueAttributes[R]limit[R]precision[R]scaleClass Public methodsnew(precision: nil, limit: nil, scale: nil)LinkInitializes a type with three basic configuration settings: precision, limit, and scale. TheValuebase class does not define behavior for these settings. It uses them for equality comparison and hash key generation only.Source:show|on GitHub# File activemodel/lib/active_model/type/value.rb, line 17definitialize(precision:nil,limit:nil,scale:nil)super()@precision=precision@scale=scale@limit=limitendInstance Public methods==(other)LinkAlso aliased as:eql?Source:show|on GitHub# File activemodel/lib/active_model/type/value.rb, line 121def==(other)self.class==other.class&&precision==other.precision&&scale==other.scale&&limit==other.limitendas_json(*)LinkSource:show|on GitHub# File activemodel/lib/active_model/type/value.rb, line 144defas_json(*)raiseNoMethodErrorendassert_valid_value(_)LinkSource:show|on GitHub# File activemodel/lib/active_model/type/value.rb, line 133defassert_valid_value(_)endcast(value)LinkTypecasts a value from user input (e.g. from a setter). This value may be a string from the form builder, or a ruby object passed to a setter. There is currently no way to differentiate between which source it came from.The return value of this method will be returned fromActiveRecord::AttributeMethods::Read#read_attribute. See also:Value#cast_value.valueThe raw input, as provided to the attribute setter.Source:show|on GitHub# File activemodel/lib/active_model/type/value.rb, line 57defcast(value)cast_value(value)unlessvalue.nil?endchanged?(old_value, new_value, _new_value_before_type_cast)LinkDetermines whether a value has changed for dirty checking.old_valueandnew_valuewill always be type-cast. Types should not need to override this method.Source:show|on GitHub# File activemodel/lib/active_model/type/value.rb, line 84defchanged?(old_value,new_value,_new_value_before_type_cast)old_value!=new_valueendchanged_in_place?(raw_old_value, new_value)LinkDetermines whether the mutable value has been modified since it was read. Returnsfalseby default. If your type returns an object which could be mutated, you should override this method. You will need to either:passnew_valuetoValue#serializeand compare it toraw_old_valueorpassraw_old_valuetoValue#deserializeand compare it tonew_valueraw_old_valueThe original value, before being passed todeserialize.new_valueThe current value, after type casting.Source:show|on GitHub# File activemodel/lib/active_model/type/value.rb, line 105defchanged_in_place?(raw_old_value,new_value)falseenddeserialize(value)LinkConverts a value from database input to the appropriate ruby type. The return value of this method will be returned fromActiveRecord::AttributeMethods::Read#read_attribute. The default implementation just callsValue#cast.valueThe raw input, as provided from the database.Source:show|on GitHub# File activemodel/lib/active_model/type/value.rb, line 43defdeserialize(value)cast(value)endeql?(other)LinkAlias for:==hash()LinkSource:show|on GitHub# File activemodel/lib/active_model/type/value.rb, line 129defhash[self.class,precision,scale,limit].hashendserializable?(value)LinkReturns true if this type can convertvalueto a type that is usable by the database.  For example a boolean type can returntrueif the value parameter is a Ruby boolean, but may returnfalseif the value parameter is some other object.Source:show|on GitHub# File activemodel/lib/active_model/type/value.rb, line 28defserializable?(value)trueendserialize(value)LinkCasts a value from the ruby type to a type that the database knows how to understand. The returned value from this method should be aString,Numeric,Date,Time,Symbol,true,false, ornil.Source:show|on GitHub# File activemodel/lib/active_model/type/value.rb, line 65defserialize(value)valueendtype()LinkReturns the unique type name as aSymbol. Subclasses should override this method.Source:show|on GitHub# File activemodel/lib/active_model/type/value.rb, line 34deftypeendInstance Private methodscast_value(value)LinkConvenience method for types which do not need separate type casting behavior for user and database inputs. Called byValue#castfor values exceptnil.Source:show|on GitHub# File activemodel/lib/active_model/type/value.rb, line 152defcast_value(value)# :doc:valueend