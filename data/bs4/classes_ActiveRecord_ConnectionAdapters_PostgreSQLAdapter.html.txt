Active Record PostgreSQL AdapterThe PostgreSQL adapter works with the native C (github.com/ged/ruby-pg) driver.Options::host- Defaults to a Unix-domain socket in /tmp. On machines without Unix-domain sockets, the default is to connect to localhost.:port- Defaults to 5432.:username- Defaults to be the same as the operating system name of the user running the application.:password- Password to be used if the server demands password authentication.:database- Defaults to be the same as the username.:schema_search_path- An optional schema search path for the connection given as a string of comma-separated schema names. This is backward-compatible with the:schema_orderoption.:encoding- An optional client encoding that is used in aSET client_encoding TO <encoding>call on the connection.:min_messages- An optional client min messages that is used in aSET client_min_messages TO <min_messages>call on the connection.:variables- An optional hash of additional parameters that will be used inSET SESSION key = valcalls on the connection.:insert_returning- An optional boolean to control the use ofRETURNINGforINSERTstatements defaults to true.Any further options are used as connection parameters to libpq. Seewww.postgresql.org/docs/current/static/libpq-connect.htmlfor the list of parameters.In addition, default connection parameters of libpq can be set per environment variables. Seewww.postgresql.org/docs/current/static/libpq-envars.html.MethodsAactive?,add_enum_valueCconnected?,create_enum,create_unlogged_tablesDdatetime_type,dbconsole,decode_dates,disable_extension,disconnect!,drop_enumEenable_extension,enum_types,extension_available?,extension_enabled?,extensionsIindex_algorithmsMmax_identifier_lengthNnew,new_clientRrename_enum,rename_enum_value,reset!Ssession_auth=,set_standard_conforming_strings,supports_advisory_locks?,supports_bulk_alter?,supports_check_constraints?,supports_comments?,supports_common_table_expressions?,supports_datetime_with_precision?,supports_ddl_transactions?,supports_deferrable_constraints?,supports_exclusion_constraints?,supports_explain?,supports_expression_index?,supports_extensions?,supports_foreign_keys?,supports_foreign_tables?,supports_index_include?,supports_index_sort_order?,supports_insert_conflict_target?,supports_insert_on_conflict?,supports_insert_on_duplicate_skip?,supports_insert_on_duplicate_update?,supports_insert_returning?,supports_json?,supports_lazy_transactions?,supports_materialized_views?,supports_nulls_not_distinct?,supports_optimizer_hints?,supports_partial_index?,supports_partitioned_indexes?,supports_pgcrypto_uuid?,supports_restart_db_transaction?,supports_savepoints?,supports_transaction_isolation?,supports_unique_constraints?,supports_validate_constraints?,supports_views?,supports_virtual_columns?Uuse_insert_returning?Included ModulesActiveRecord::ConnectionAdapters::PostgreSQL::QuotingActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatementsActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatementsConstantsADAPTER_NAME="PostgreSQL"DEADLOCK_DETECTED="40P01"DUPLICATE_DATABASE="42P04"FOREIGN_KEY_VIOLATION="23503"LOCK_NOT_AVAILABLE="55P03"NATIVE_DATABASE_TYPES={
primary_key: "bigserial primary key",
string:      { name: "character varying" },
text:        { name: "text" },
integer:     { name: "integer", limit: 4 },
bigint:      { name: "bigint" },
float:       { name: "float" },
decimal:     { name: "decimal" },
datetime:    {}, # set dynamically based on datetime_type
timestamp:   { name: "timestamp" },
timestamptz: { name: "timestamptz" },
time:        { name: "time" },
date:        { name: "date" },
daterange:   { name: "daterange" },
numrange:    { name: "numrange" },
tsrange:     { name: "tsrange" },
tstzrange:   { name: "tstzrange" },
int4range:   { name: "int4range" },
int8range:   { name: "int8range" },
binary:      { name: "bytea" },
boolean:     { name: "boolean" },
xml:         { name: "xml" },
tsvector:    { name: "tsvector" },
hstore:      { name: "hstore" },
inet:        { name: "inet" },
cidr:        { name: "cidr" },
macaddr:     { name: "macaddr" },
uuid:        { name: "uuid" },
json:        { name: "json" },
jsonb:       { name: "jsonb" },
ltree:       { name: "ltree" },
citext:      { name: "citext" },
point:       { name: "point" },
line:        { name: "line" },
lseg:        { name: "lseg" },
box:         { name: "box" },
path:        { name: "path" },
polygon:     { name: "polygon" },
circle:      { name: "circle" },
bit:         { name: "bit" },
bit_varying: { name: "bit varying" },
money:       { name: "money" },
interval:    { name: "interval" },
oid:         { name: "oid" },
enum:        {} # special type https://www.postgresql.org/docs/current/datatype-enum.html
}NOT_NULL_VIOLATION="23502"NUMERIC_VALUE_OUT_OF_RANGE="22003"QUERY_CANCELED="57014"SERIALIZATION_FAILURE="40001"UNIQUE_VIOLATION="23505"VALUE_LIMIT_VIOLATION="22001"Seewww.postgresql.org/docs/current/static/errcodes-appendix.htmlClass Public methodscreate_unlogged_tablesLinkPostgreSQL allows the creation of âunloggedâ tables, which do not record data in the PostgreSQL Write-Ahead Log. This can make the tables faster, but significantly increases the risk of data loss if the database crashes. As a result, this should not be used in production environments. If you would like all created tables to be unlogged in the test environment you can add the following to your test.rb file:ActiveSupport.on_load(:active_record_postgresqladapter) do
  self.create_unlogged_tables = true
endSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 105class_attribute:create_unlogged_tables,default:falsedatetime_typeLinkPostgreSQL supports multiple types for DateTimes. By default, if you usedatetimein migrations, Rails will translate this to a PostgreSQL âtimestamp without time zoneâ. Change this in an initializer to use anotherNATIVE_DATABASE_TYPES. For example, to store DateTimes as âtimestamp with time zoneâ:ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.datetime_type = :timestamptzOr if you are adding a custom type:ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::NATIVE_DATABASE_TYPES[:my_custom_type] = { name: "my_custom_type_name" }
ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.datetime_type = :my_custom_typeIf youâre using:rubyas yourconfig.active_record.schema_formatand you change this setting, you should immediately runbin/rails db:migrateto update the types in your schema.rb.Source:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 123class_attribute:datetime_type,default::timestampdbconsole(config, options = {})LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 73defdbconsole(config,options= {})pg_config=config.configuration_hashENV["PGUSER"]         =pg_config[:username]ifpg_config[:username]ENV["PGHOST"]         =pg_config[:host]ifpg_config[:host]ENV["PGPORT"]         =pg_config[:port].to_sifpg_config[:port]ENV["PGPASSWORD"]     =pg_config[:password].to_sifpg_config[:password]&&options[:include_password]ENV["PGSSLMODE"]      =pg_config[:sslmode].to_sifpg_config[:sslmode]ENV["PGSSLCERT"]      =pg_config[:sslcert].to_sifpg_config[:sslcert]ENV["PGSSLKEY"]       =pg_config[:sslkey].to_sifpg_config[:sslkey]ENV["PGSSLROOTCERT"]  =pg_config[:sslrootcert].to_sifpg_config[:sslrootcert]ifpg_config[:variables]ENV["PGOPTIONS"] =pg_config[:variables].filter_mapdo|name,value|"-c #{name}=#{value.to_s.gsub(/[ \\]/, '\\\\\0')}"unlessvalue==":default"||value==:defaultend.join(" ")endfind_cmd_and_exec("psql",config.database)enddecode_datesLinkToggles automatic decoding of date columns.ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.select_value("select '2024-01-01'::date").class #=> String
ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.decode_dates = true
ActiveRecord::ConnectionAdapters::PostgreSQLAdapter.select_value("select '2024-01-01'::date").class #=> DateSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 132class_attribute:decode_dates,default:falsenew(...)LinkInitializes and connects a PostgreSQL adapter.Source:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 316definitialize(...)superconn_params=@config.compact# Map ActiveRecords param names to PGs.conn_params[:user] =conn_params.delete(:username)ifconn_params[:username]conn_params[:dbname] =conn_params.delete(:database)ifconn_params[:database]# Forward only valid config params to PG::Connection.connect.valid_conn_param_keys=PG::Connection.conndefaults_hash.keys+[:requiressl]conn_params.slice!(*valid_conn_param_keys)@connection_parameters=conn_params@max_identifier_length=nil@type_map=nil@raw_connection=nil@notice_receiver_sql_warnings= []@use_insert_returning=@config.key?(:insert_returning)?self.class.type_cast_config_to_boolean(@config[:insert_returning]):trueendnew_client(conn_params)LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 57defnew_client(conn_params)PG.connect(**conn_params)rescue::PG::Error=>errorifconn_params&&conn_params[:dbname]=="postgres"raiseActiveRecord::ConnectionNotEstablished,error.messageelsifconn_params&&conn_params[:dbname]&&error.message.include?(conn_params[:dbname])raiseActiveRecord::NoDatabaseError.db_error(conn_params[:dbname])elsifconn_params&&conn_params[:user]&&error.message.include?(conn_params[:user])raiseActiveRecord::DatabaseConnectionError.username_error(conn_params[:user])elsifconn_params&&conn_params[:host]&&error.message.include?(conn_params[:host])raiseActiveRecord::DatabaseConnectionError.hostname_error(conn_params[:host])elseraiseActiveRecord::ConnectionNotEstablished,error.messageendendInstance Public methodsactive?()LinkIs this connection alive and ready for queries?Source:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 344defactive?@lock.synchronizedoreturnfalseunless@raw_connection@raw_connection.query";"endtruerescuePG::Errorfalseendadd_enum_value(type_name, value, options = {})LinkAdd enum value to an existing enum type.Source:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 568defadd_enum_value(type_name,value,options= {})before,after=options.values_at(:before,:after)sql=+"ALTER TYPE #{quote_table_name(type_name)} ADD VALUE '#{value}'"ifbefore&&afterraiseArgumentError,"Cannot have both :before and :after at the same time"elsifbeforesql<<" BEFORE '#{before}'"elsifaftersql<<" AFTER '#{after}'"endexecute(sql).tap{reload_type_map}endconnected?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 339defconnected?!(@raw_connection.nil?||@raw_connection.finished?)endcreate_enum(name, values, **options)LinkGiven a name and an array of values, creates an enum type.Source:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 523defcreate_enum(name,values,**options)sql_values=values.map{|s|quote(s) }.join(", ")scope=quoted_scope(name)query=<<~SQLDO $$
          BEGIN
              IF NOT EXISTS (
                SELECT 1
                FROM pg_type t
                JOIN pg_namespace n ON t.typnamespace = n.oid
                WHERE t.typname = #{scope[:name]}
                  AND n.nspname = #{scope[:schema]}
              ) THEN
                  CREATE TYPE #{quote_table_name(name)} AS ENUM (#{sql_values});
              END IF;
          END
          $$;SQLinternal_exec_query(query).tap{reload_type_map}enddisable_extension(name, force: false)LinkRemoves an extension from the database.:forceSet to:cascadeto drop dependent objects as well. Defaults to false.Source:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 481defdisable_extension(name,force:false)internal_exec_query("DROP EXTENSION IF EXISTS \"#{name}\"#{' CASCADE' if force == :cascade}").tap{reload_type_map}enddisconnect!()LinkDisconnects from the database if already connected. Otherwise, this method does nothing.Source:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 381defdisconnect!@lock.synchronizedosuper@raw_connection&.closerescuenil@raw_connection=nilendenddrop_enum(name, values = nil, **options)LinkDrops an enum type.If theif_exists: trueoption is provided, the enum is dropped only if it exists. Otherwise, if the enum doesnât exist, an error is raised.Thevaluesparameter will be ignored if present. It can be helpful to provide this in a migrationâschangemethod so it can be reverted. In that case,valueswill be used bycreate_enum.Source:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 553defdrop_enum(name,values=nil,**options)query=<<~SQLDROP TYPE#{' IF EXISTS' if options[:if_exists]} #{quote_table_name(name)};SQLinternal_exec_query(query).tap{reload_type_map}endenable_extension(name, **)LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 468defenable_extension(name,**)schema,name=name.to_s.split(".").values_at(-2,-1)sql=+"CREATE EXTENSION IF NOT EXISTS \"#{name}\""sql<<" SCHEMA #{schema}"ifschemainternal_exec_query(sql).tap{reload_type_map}endenum_types()LinkReturns a list of defined enum types, and their values.Source:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 500defenum_typesquery=<<~SQLSELECT
            type.typname AS name,
            type.OID AS oid,
            n.nspname AS schema,
            string_agg(enum.enumlabel, ',' ORDER BY enum.enumsortorder) AS value
          FROM pg_enum AS enum
          JOIN pg_type AS type ON (type.oid = enum.enumtypid)
          JOIN pg_namespace n ON type.typnamespace = n.oid
          WHERE n.nspname = ANY (current_schemas(false))
          GROUP BY type.OID, n.nspname, type.typname;SQLinternal_exec_query(query,"SCHEMA",allow_retry:true,materialize_transactions:false).cast_values.each_with_object({})do|row,memo|name,schema=row[0],row[2]schema=nilifschema==current_schemafull_name= [schema,name].compact.join(".")memo[full_name] =row.lastend.to_aendextension_available?(name)LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 487defextension_available?(name)query_value("SELECT true FROM pg_available_extensions WHERE name = #{quote(name)}","SCHEMA")endextension_enabled?(name)LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 491defextension_enabled?(name)query_value("SELECT installed_version IS NOT NULL FROM pg_available_extensions WHERE name = #{quote(name)}","SCHEMA")endextensions()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 495defextensionsinternal_exec_query("SELECT extname FROM pg_extension","SCHEMA",allow_retry:true,materialize_transactions:false).cast_valuesendindex_algorithms()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 287defindex_algorithms{concurrently:"CONCURRENTLY"}endmax_identifier_length()LinkReturns the configured supported identifier length supported by PostgreSQLSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 598defmax_identifier_length@max_identifier_length||=query_value("SHOW max_identifier_length","SCHEMA").to_iendrename_enum(name, options = {})LinkRename an existing enum type to something else.Source:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 561defrename_enum(name,options= {})to=options.fetch(:to) {raiseArgumentError,":to is required"}exec_query("ALTER TYPE #{quote_table_name(name)} RENAME TO #{to}").tap{reload_type_map}endrename_enum_value(type_name, options = {})LinkRename enum value on an existing enum type.Source:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 584defrename_enum_value(type_name,options= {})unlessdatabase_version>=10_00_00# >= 10.0raiseArgumentError,"Renaming enum values is only supported in PostgreSQL 10 or later"endfrom=options.fetch(:from) {raiseArgumentError,":from is required"}to=options.fetch(:to) {raiseArgumentError,":to is required"}execute("ALTER TYPE #{quote_table_name(type_name)} RENAME VALUE '#{from}' TO '#{to}'").tap{reload_type_map}endreset!()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 366defreset!@lock.synchronizedoreturnconnect!unless@raw_connectionunless@raw_connection.transaction_status==::PG::PQTRANS_IDLE@raw_connection.query"ROLLBACK"end@raw_connection.query"DISCARD ALL"superendendsession_auth=(user)LinkSet the authorized user for this sessionSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 603defsession_auth=(user)clear_cache!internal_execute("SET SESSION AUTHORIZATION #{user}",nil,materialize_transactions:true)endset_standard_conforming_strings()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 407defset_standard_conforming_stringsinternal_execute("SET standard_conforming_strings = on")endsupports_advisory_locks?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 415defsupports_advisory_locks?trueendsupports_bulk_alter?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 188defsupports_bulk_alter?trueendsupports_check_constraints?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 220defsupports_check_constraints?trueendsupports_comments?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 252defsupports_comments?trueendsupports_common_table_expressions?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 446defsupports_common_table_expressions?trueendsupports_datetime_with_precision?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 244defsupports_datetime_with_precision?trueendsupports_ddl_transactions?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 411defsupports_ddl_transactions?trueendsupports_deferrable_constraints?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 236defsupports_deferrable_constraints?trueendsupports_exclusion_constraints?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 224defsupports_exclusion_constraints?trueendsupports_explain?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 419defsupports_explain?trueendsupports_expression_index?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 208defsupports_expression_index?trueendsupports_extensions?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 423defsupports_extensions?trueendsupports_foreign_keys?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 216defsupports_foreign_keys?trueendsupports_foreign_tables?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 431defsupports_foreign_tables?trueendsupports_index_include?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 204defsupports_index_include?database_version>=11_00_00# >= 11.0endsupports_index_sort_order?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 192defsupports_index_sort_order?trueendsupports_insert_conflict_target?()LinkAlias for:supports_insert_on_conflict?supports_insert_on_conflict?()LinkAlso aliased as:supports_insert_on_duplicate_skip?,supports_insert_on_duplicate_update?,supports_insert_conflict_target?Source:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 268defsupports_insert_on_conflict?database_version>=9_05_00# >= 9.5endsupports_insert_on_duplicate_skip?()LinkAlias for:supports_insert_on_conflict?supports_insert_on_duplicate_update?()LinkAlias for:supports_insert_on_conflict?supports_insert_returning?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 264defsupports_insert_returning?trueendsupports_json?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 248defsupports_json?trueendsupports_lazy_transactions?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 450defsupports_lazy_transactions?trueendsupports_materialized_views?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 427defsupports_materialized_views?trueendsupports_nulls_not_distinct?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 283defsupports_nulls_not_distinct?database_version>=15_00_00# >= 15.0endsupports_optimizer_hints?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 439defsupports_optimizer_hints?unlessdefined?(@has_pg_hint_plan)@has_pg_hint_plan=extension_available?("pg_hint_plan")end@has_pg_hint_planendsupports_partial_index?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 200defsupports_partial_index?trueendsupports_partitioned_indexes?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 196defsupports_partitioned_indexes?database_version>=11_00_00# >= 11.0endsupports_pgcrypto_uuid?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 435defsupports_pgcrypto_uuid?database_version>=9_04_00# >= 9.4endsupports_restart_db_transaction?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 260defsupports_restart_db_transaction?database_version>=12_00_00# >= 12.0endsupports_savepoints?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 256defsupports_savepoints?trueendsupports_transaction_isolation?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 212defsupports_transaction_isolation?trueendsupports_unique_constraints?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 228defsupports_unique_constraints?trueendsupports_validate_constraints?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 232defsupports_validate_constraints?trueendsupports_views?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 240defsupports_views?trueendsupports_virtual_columns?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 275defsupports_virtual_columns?database_version>=12_00_00# >= 12.0enduse_insert_returning?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 608defuse_insert_returning?@use_insert_returningend