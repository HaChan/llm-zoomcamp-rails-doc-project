MethodsSstore,store_accessor,stored_attributesInstance Public methodsstore(store_attribute, options = {})LinkSource:show|on GitHub# File activerecord/lib/active_record/store.rb, line 106defstore(store_attribute,options= {})coder=build_column_serializer(store_attribute,options[:coder],Object,options[:yaml])serializestore_attribute,coder:IndifferentCoder.new(store_attribute,coder)store_accessor(store_attribute,options[:accessors],**options.slice(:prefix,:suffix))ifoptions.has_key?:accessorsendstore_accessor(store_attribute, *keys, prefix: nil, suffix: nil)LinkSource:show|on GitHub# File activerecord/lib/active_record/store.rb, line 112defstore_accessor(store_attribute,*keys,prefix:nil,suffix:nil)keys=keys.flattenaccessor_prefix=caseprefixwhenString,Symbol"#{prefix}_"whenTrueClass"#{store_attribute}_"else""endaccessor_suffix=casesuffixwhenString,Symbol"_#{suffix}"whenTrueClass"_#{store_attribute}"else""end_store_accessors_module.module_evaldokeys.eachdo|key|accessor_key="#{accessor_prefix}#{key}#{accessor_suffix}"define_method("#{accessor_key}=")do|value|write_store_attribute(store_attribute,key,value)enddefine_method(accessor_key)doread_store_attribute(store_attribute,key)enddefine_method("#{accessor_key}_changed?")doreturnfalseunlessattribute_changed?(store_attribute)prev_store,new_store=changes[store_attribute]prev_store&.dig(key)!=new_store&.dig(key)enddefine_method("#{accessor_key}_change")doreturnunlessattribute_changed?(store_attribute)prev_store,new_store=changes[store_attribute]
        [prev_store&.dig(key),new_store&.dig(key)]enddefine_method("#{accessor_key}_was")doreturnunlessattribute_changed?(store_attribute)prev_store,_new_store=changes[store_attribute]prev_store&.dig(key)enddefine_method("saved_change_to_#{accessor_key}?")doreturnfalseunlesssaved_change_to_attribute?(store_attribute)prev_store,new_store=saved_changes[store_attribute]prev_store&.dig(key)!=new_store&.dig(key)enddefine_method("saved_change_to_#{accessor_key}")doreturnunlesssaved_change_to_attribute?(store_attribute)prev_store,new_store=saved_changes[store_attribute]
        [prev_store&.dig(key),new_store&.dig(key)]enddefine_method("#{accessor_key}_before_last_save")doreturnunlesssaved_change_to_attribute?(store_attribute)prev_store,_new_store=saved_changes[store_attribute]prev_store&.dig(key)endendend# assign new store attribute and create new hash to ensure that each class in the hierarchy# has its own hash of stored attributes.self.local_stored_attributes||={}self.local_stored_attributes[store_attribute]||=[]self.local_stored_attributes[store_attribute]|=keysendstored_attributes()LinkSource:show|on GitHub# File activerecord/lib/active_record/store.rb, line 199defstored_attributesparent=superclass.respond_to?(:stored_attributes)?superclass.stored_attributes:{}iflocal_stored_attributesparent.merge!(local_stored_attributes) {|k,a,b|a|b}endparentend