This is a wrapper for a hash of encryption properties. It is used byKey(public tags) andMessage(headers).Since properties are serialized in messages, it is important for storage efficiency to keep their keys as short as possible. It defines accessors for common properties that will keep these keys very short while exposing a readable name.message.headers.encrypted_data_key # instead of message.headers[:k]SeeProperties::DEFAULT_PROPERTIES,Key,MessageMethods#[]=AaddNnewTto_hVvalidate_value_typeConstantsALLOWED_VALUE_CLASSES=[String, ActiveRecord::Encryption::Message, Numeric, Integer, Float, BigDecimal, TrueClass, FalseClass, Symbol, NilClass]DEFAULT_PROPERTIES={
encrypted_data_key: "k",
encrypted_data_key_id: "i",
compressed: "c",
iv: "iv",
auth_tag: "at",
encoding: "e"
}For each entry it generates an accessor exposing the full nameClass Public methodsnew(initial_properties = {})LinkSource:show|on GitHub# File activerecord/lib/active_record/encryption/properties.rb, line 42definitialize(initial_properties= {})@data= {}add(initial_properties)endInstance Public methods[]=(key, value)LinkSet a value for a given keyIt will raise anEncryptedContentIntegrityif the value existsSource:show|on GitHub# File activerecord/lib/active_record/encryption/properties.rb, line 50def[]=(key,value)raiseErrors::EncryptedContentIntegrity,"Properties can't be overridden: #{key}"ifkey?(key)validate_value_type(value)data[key] =valueendadd(other_properties)LinkSource:show|on GitHub# File activerecord/lib/active_record/encryption/properties.rb, line 62defadd(other_properties)other_properties.eachdo|key,value|self[key.to_sym] =valueendendto_h()LinkSource:show|on GitHub# File activerecord/lib/active_record/encryption/properties.rb, line 68defto_hdataendvalidate_value_type(value)LinkSource:show|on GitHub# File activerecord/lib/active_record/encryption/properties.rb, line 56defvalidate_value_type(value)unlessALLOWED_VALUE_CLASSES.include?(value.class)||ALLOWED_VALUE_CLASSES.any?{|klass|value.is_a?(klass) }raiseActiveRecord::Encryption::Errors::ForbiddenClass,"Can't store a #{value.class}, only properties of type #{ALLOWED_VALUE_CLASSES.inspect} are allowed"endend