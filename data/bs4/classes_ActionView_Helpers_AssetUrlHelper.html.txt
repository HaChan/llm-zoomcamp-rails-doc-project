Action View Asset URL HelpersThis module provides methods for generating asset paths and URLs.image_path("rails.png")
# => "/assets/rails.png"

image_url("rails.png")
# => "http://www.example.com/assets/rails.png"Using asset hostsBy default, Rails links to these assets on the current host in the public folder, but you can direct Rails to link to assets from a dedicated asset server by settingActionController::Base.asset_hostin the application configuration, typically inconfig/environments/production.rb. For example, youâd defineassets.example.comto be your asset host this way, inside theconfigureblock of your environment-specific configuration files orconfig/application.rb:config.action_controller.asset_host = "assets.example.com"Helperstake that into account:image_tag("rails.png")
# => <img src="http://assets.example.com/assets/rails.png" />
stylesheet_link_tag("application")
# => <link href="http://assets.example.com/assets/application.css" rel="stylesheet" />Browsers open a limited number of simultaneous connections to a single host. The exact number varies by browser and version. This limit may cause some asset downloads to wait for previous assets to finish before they can begin. You can use the%dwildcard in theasset_hostto distribute the requests over four hosts. For example,assets%d.example.comwill spread the asset requests over âassets0.example.comâ, â¦, âassets3.example.comâ.image_tag("rails.png")
# => <img src="http://assets0.example.com/assets/rails.png" />
stylesheet_link_tag("application")
# => <link href="http://assets2.example.com/assets/application.css" rel="stylesheet" />This may improve the asset loading performance of your application. It is also possible the combination of additional connection overhead (DNS, SSL) and the overall browser connection limits may result in this solution being slower. You should be sure to measure your actual performance across targeted browsers both before and after this change.To implement the corresponding hosts you can either set up four actual hosts or use wildcard DNS to CNAME the wildcard to a single asset host. You can read more about setting up your DNS CNAME records from your ISP.Note: This is purely a browser performance optimization and is not meant for server load balancing. Seewww.die.net/musings/page_load_time/ for background andwww.browserscope.org/?category=networkfor connection limit data.Alternatively, you can exert more control over the asset host by settingasset_hostto a proc like this:ActionController::Base.asset_host = Proc.new { |source|
  "http://assets#{OpenSSL::Digest::SHA256.hexdigest(source).to_i(16) % 2 + 1}.example.com"
}
image_tag("rails.png")
# => <img src="http://assets1.example.com/assets/rails.png" />
stylesheet_link_tag("application")
# => <link href="http://assets2.example.com/assets/application.css" rel="stylesheet" />The example above generates âassets1.example.comâ and âassets2.example.comâ. This option is useful for example if you need fewer/more than four hosts, custom host names, etc.As you see the proc takes asourceparameter. Thatâs a string with the absolute path of the asset, for example â/assets/rails.pngâ.ActionController::Base.asset_host = Proc.new { |source|
   if source.end_with?('.css')
     "http://stylesheets.example.com"
   else
     "http://assets.example.com"
   end
 }
image_tag("rails.png")
# => <img src="http://assets.example.com/assets/rails.png" />
stylesheet_link_tag("application")
# => <link href="http://stylesheets.example.com/assets/application.css" rel="stylesheet" />Alternatively you may ask for a second parameterrequest. That one is particularly useful for serving assets from an SSL-protected page. The example proc below disables asset hosting for HTTPS connections, while still sending assets for plain HTTP requests from asset hosts. If you donât have SSL certificates for each of the asset hosts this technique allows you to avoid warnings in the client about mixed media. Note that therequestparameter might not be supplied, e.g. when the assets are precompiled with the commandbin/rails assets:precompile. Make sure to use aProcinstead of a lambda, since aProcallows missing parameters and sets them tonil.config.action_controller.asset_host = Proc.new { |source, request|
  if request && request.ssl?
    "#{request.protocol}#{request.host_with_port}"
  else
    "#{request.protocol}assets.example.com"
  end
}You can also implement a custom asset host object that responds tocalland takes either one or two parameters just like the proc.config.action_controller.asset_host = AssetHostingWithMinimumSsl.new(
  "http://asset%d.example.com", "https://asset1.example.com"
)MethodsAasset_path,asset_url,audio_path,audio_urlCcompute_asset_extname,compute_asset_host,compute_asset_pathFfont_path,font_urlIimage_path,image_urlJjavascript_path,javascript_urlPpath_to_asset,path_to_audio,path_to_font,path_to_image,path_to_javascript,path_to_stylesheet,path_to_video,public_compute_asset_pathSstylesheet_path,stylesheet_urlUurl_to_asset,url_to_audio,url_to_font,url_to_image,url_to_javascript,url_to_stylesheet,url_to_videoVvideo_path,video_urlConstantsASSET_EXTENSIONS={
javascript: ".js",
stylesheet: ".css"
}ASSET_PUBLIC_DIRECTORIES={
audio:      "/audios",
font:       "/fonts",
image:      "/images",
javascript: "/javascripts",
stylesheet: "/stylesheets",
video:      "/videos"
}Maps asset types to public directory.URI_REGEXP=%r{^[-a-z]+://|^(?:cid|data):|^//}iInstance Public methodsasset_path(source, options = {})LinkThis is the entry point for all assets. When using an asset pipeline gem (e.g. propshaft or sprockets-rails), the behavior is âenhancedâ. You can bypass the asset pipeline by passing inskip_pipeline: trueto the options.All other asset *_path helpers delegate through this method.With the asset pipelineAll options passed toasset_pathwill be passed tocompute_asset_pathwhich is implemented by asset pipeline gems.asset_path("application.js") # => "/assets/application-60aa4fdc5cea14baf5400fba1abf4f2a46a5166bad4772b1effe341570f07de9.js"
asset_path('application.js', host: 'example.com') # => "//example.com/assets/application.js"
asset_path("application.js", host: 'example.com', protocol: 'https') # => "https://example.com/assets/application.js"Without the asset pipeline (skip_pipeline: true)Accepts atypeoption that can specify the assetâs extension. No error checking is done to verify the source passed intoasset_pathis valid and that the file exists on disk.asset_path("application.js", skip_pipeline: true)                 # => "application.js"
asset_path("filedoesnotexist.png", skip_pipeline: true)           # => "filedoesnotexist.png"
asset_path("application", type: :javascript, skip_pipeline: true) # => "/javascripts/application.js"
asset_path("application", type: :stylesheet, skip_pipeline: true) # => "/stylesheets/application.css"Options applying to all assetsBelow lists scenarios that apply toasset_pathwhether or not youâre using the asset pipeline.All fully qualified URLs are returned immediately. This bypasses the asset pipeline and all other behavior described.asset_path("http://www.example.com/js/xmlhr.js") # => "http://www.example.com/js/xmlhr.js"All assets that begin with a forward slash are assumed to be full URLs and will not be expanded. This will bypass the asset pipeline.asset_path("/foo.png") # => "/foo.png"All blank strings will be returned immediately. This bypasses the asset pipeline and all other behavior described.asset_path("") # => ""Ifconfig.relative_url_rootis specified, all assets will have that root prepended.Rails.application.config.relative_url_root = "bar"
asset_path("foo.js", skip_pipeline: true) # => "bar/foo.js"A different asset host can be specified viaconfig.action_controller.asset_hostthis is commonly used in conjunction with a CDN.Rails.application.config.action_controller.asset_host = "assets.example.com"
asset_path("foo.js", skip_pipeline: true) # => "http://assets.example.com/foo.js"An extension name can be specified manually withextname.asset_path("foo", skip_pipeline: true, extname: ".js")     # => "/foo.js"
asset_path("foo.css", skip_pipeline: true, extname: ".js") # => "/foo.css.js"Also aliased as:path_to_assetSource:show|on GitHub# File actionview/lib/action_view/helpers/asset_url_helper.rb, line 187defasset_path(source,options= {})raiseArgumentError,"nil is not a valid asset source"ifsource.nil?source=source.to_sreturn""ifsource.blank?returnsourceifURI_REGEXP.match?(source)tail,source=source[/([?#].+)$/],source.sub(/([?#].+)$/,"")ifextname=compute_asset_extname(source,options)source="#{source}#{extname}"endunlesssource.start_with?(?/)ifoptions[:skip_pipeline]source=public_compute_asset_path(source,options)elsesource=compute_asset_path(source,options)endendrelative_url_root=defined?(config.relative_url_root)&&config.relative_url_rootifrelative_url_rootsource=File.join(relative_url_root,source)unlesssource.start_with?("#{relative_url_root}/")endifhost=compute_asset_host(source,options)source=File.join(host,source)end"#{source}#{tail}"endasset_url(source, options = {})LinkComputes the full URL to an asset in the public directory. This will useasset_pathinternally, so most of their behaviors will be the same. If:hostoptions is set, it overwrites globalconfig.action_controller.asset_hostsetting.All other options provided are forwarded toasset_pathcall.asset_url "application.js"                                 # => http://example.com/assets/application.js
asset_url "application.js", host: "http://cdn.example.com" # => http://cdn.example.com/assets/application.jsAlso aliased as:url_to_assetSource:show|on GitHub# File actionview/lib/action_view/helpers/asset_url_helper.rb, line 231defasset_url(source,options= {})path_to_asset(source,options.merge(protocol::request))endaudio_path(source, options = {})LinkComputes the path to an audio asset in the public audios directory. Full paths from the document root will be passed through. Used internally byaudio_tagto build the audio path.audio_path("horse")                                            # => /audios/horse
audio_path("horse.wav")                                        # => /audios/horse.wav
audio_path("sounds/horse.wav")                                 # => /audios/sounds/horse.wav
audio_path("/sounds/horse.wav")                                # => /sounds/horse.wav
audio_path("http://www.example.com/sounds/horse.wav")          # => http://www.example.com/sounds/horse.wavAlso aliased as:path_to_audioSource:show|on GitHub# File actionview/lib/action_view/helpers/asset_url_helper.rb, line 430defaudio_path(source,options= {})path_to_asset(source, {type::audio}.merge!(options))endaudio_url(source, options = {})LinkComputes the full URL to an audio asset in the public audios directory. This will useaudio_pathinternally, so most of their behaviors will be the same. Sinceaudio_urlis based onasset_urlmethod you can set:hostoptions. If:hostoptions is set, it overwrites globalconfig.action_controller.asset_hostsetting.audio_url "horse.wav", host: "http://stage.example.com" # => http://stage.example.com/audios/horse.wavAlso aliased as:url_to_audioSource:show|on GitHub# File actionview/lib/action_view/helpers/asset_url_helper.rb, line 442defaudio_url(source,options= {})url_to_asset(source, {type::audio}.merge!(options))endcompute_asset_extname(source, options = {})LinkCompute extname to append to asset path. Returnsnilif nothing should be added.Source:show|on GitHub# File actionview/lib/action_view/helpers/asset_url_helper.rb, line 243defcompute_asset_extname(source,options= {})returnifoptions[:extname]==falseextname=options[:extname]||ASSET_EXTENSIONS[options[:type]]ifextname&&File.extname(source)!=extnameextnameelsenilendendcompute_asset_host(source = "", options = {})LinkPick an asset host for this source. Returnsnilif no host is set, the host if no wildcard is set, the host interpolated with the numbers 0-3 if it contains%d(the number is the source hash mod 4), or the value returned from invoking call on an object responding to call (proc or otherwise).Source:show|on GitHub# File actionview/lib/action_view/helpers/asset_url_helper.rb, line 277defcompute_asset_host(source="",options= {})request=self.requestifrespond_to?(:request)host=options[:host]host||=config.asset_hostifdefined?config.asset_hostifhostifhost.respond_to?(:call)arity=host.respond_to?(:arity)?host.arity:host.method(:call).arityargs= [source]args<<requestifrequest&&(arity>1||arity<0)host=host.call(*args)elsifhost.include?("%d")host=host%(Zlib.crc32(source)%4)endendhost||=request.base_urlifrequest&&options[:protocol]==:requestreturnunlesshostifURI_REGEXP.match?(host)hostelseprotocol=options[:protocol]||config.default_asset_host_protocol||(request?:request::relative)caseprotocolwhen:relative"//#{host}"when:request"#{request.protocol}#{host}"else"#{protocol}://#{host}"endendendcompute_asset_path(source, options = {})LinkComputes asset path to public directory. Plugins and extensions can override this method to point to custom assets or generate digested paths or query strings.Also aliased as:public_compute_asset_pathSource:show|on GitHub# File actionview/lib/action_view/helpers/asset_url_helper.rb, line 266defcompute_asset_path(source,options= {})dir=ASSET_PUBLIC_DIRECTORIES[options[:type]]||""File.join(dir,source)endfont_path(source, options = {})LinkComputes the path to a font asset. Full paths from the document root will be passed through.font_path("font")                                           # => /fonts/font
font_path("font.ttf")                                       # => /fonts/font.ttf
font_path("dir/font.ttf")                                   # => /fonts/dir/font.ttf
font_path("/dir/font.ttf")                                  # => /dir/font.ttf
font_path("http://www.example.com/dir/font.ttf")            # => http://www.example.com/dir/font.ttfAlso aliased as:path_to_fontSource:show|on GitHub# File actionview/lib/action_view/helpers/asset_url_helper.rb, line 455deffont_path(source,options= {})path_to_asset(source, {type::font}.merge!(options))endfont_url(source, options = {})LinkComputes the full URL to a font asset. This will usefont_pathinternally, so most of their behaviors will be the same. Sincefont_urlis based onasset_urlmethod you can set:hostoptions. If:hostoptions is set, it overwrites globalconfig.action_controller.asset_hostsetting.font_url "font.ttf", host: "http://stage.example.com" # => http://stage.example.com/fonts/font.ttfAlso aliased as:url_to_fontSource:show|on GitHub# File actionview/lib/action_view/helpers/asset_url_helper.rb, line 467deffont_url(source,options= {})url_to_asset(source, {type::font}.merge!(options))endimage_path(source, options = {})LinkComputes the path to an image asset. Full paths from the document root will be passed through. Used internally byimage_tagto build the image path:image_path("edit")                                         # => "/assets/edit"
image_path("edit.png")                                     # => "/assets/edit.png"
image_path("icons/edit.png")                               # => "/assets/icons/edit.png"
image_path("/icons/edit.png")                              # => "/icons/edit.png"
image_path("http://www.example.com/img/edit.png")          # => "http://www.example.com/img/edit.png"If you have images as application resources this method may conflict with their named routes. The aliaspath_to_imageis provided to avoid that. Rails uses the alias internally, and plugin authors are encouraged to do so.Also aliased as:path_to_imageSource:show|on GitHub# File actionview/lib/action_view/helpers/asset_url_helper.rb, line 378defimage_path(source,options= {})path_to_asset(source, {type::image}.merge!(options))endimage_url(source, options = {})LinkComputes the full URL to an image asset. This will useimage_pathinternally, so most of their behaviors will be the same. Sinceimage_urlis based onasset_urlmethod you can set:hostoptions. If:hostoptions is set, it overwrites globalconfig.action_controller.asset_hostsetting.image_url "edit.png", host: "http://stage.example.com" # => http://stage.example.com/assets/edit.pngAlso aliased as:url_to_imageSource:show|on GitHub# File actionview/lib/action_view/helpers/asset_url_helper.rb, line 390defimage_url(source,options= {})url_to_asset(source, {type::image}.merge!(options))endjavascript_path(source, options = {})LinkComputes the path to a JavaScript asset in the public javascripts directory. If thesourcefilename has no extension, .js will be appended (except for explicit URIs) Full paths from the document root will be passed through. Used internally byjavascript_include_tagto build the script path.javascript_path "xmlhr"                              # => /assets/xmlhr.js
javascript_path "dir/xmlhr.js"                       # => /assets/dir/xmlhr.js
javascript_path "/dir/xmlhr"                         # => /dir/xmlhr.js
javascript_path "http://www.example.com/js/xmlhr"    # => http://www.example.com/js/xmlhr
javascript_path "http://www.example.com/js/xmlhr.js" # => http://www.example.com/js/xmlhr.jsAlso aliased as:path_to_javascriptSource:show|on GitHub# File actionview/lib/action_view/helpers/asset_url_helper.rb, line 321defjavascript_path(source,options= {})path_to_asset(source, {type::javascript}.merge!(options))endjavascript_url(source, options = {})LinkComputes the full URL to a JavaScript asset in the public javascripts directory. This will usejavascript_pathinternally, so most of their behaviors will be the same. Sincejavascript_urlis based onasset_urlmethod you can set:hostoptions. If:hostoptions is set, it overwrites globalconfig.action_controller.asset_hostsetting.javascript_url "js/xmlhr.js", host: "http://stage.example.com" # => http://stage.example.com/assets/js/xmlhr.jsAlso aliased as:url_to_javascriptSource:show|on GitHub# File actionview/lib/action_view/helpers/asset_url_helper.rb, line 333defjavascript_url(source,options= {})url_to_asset(source, {type::javascript}.merge!(options))endpath_to_asset(source, options = {})LinkAlias for:asset_pathpath_to_audio(source, options = {})LinkAlias for:audio_pathpath_to_font(source, options = {})LinkAlias for:font_pathpath_to_image(source, options = {})LinkAlias for:image_pathpath_to_javascript(source, options = {})LinkAlias for:javascript_pathpath_to_stylesheet(source, options = {})LinkAlias for:stylesheet_pathpath_to_video(source, options = {})LinkAlias for:video_pathpublic_compute_asset_path(source, options = {})LinkAlias for:compute_asset_pathstylesheet_path(source, options = {})LinkComputes the path to a stylesheet asset in the public stylesheets directory. If thesourcefilename has no extension, .css will be appended (except for explicit URIs). Full paths from the document root will be passed through. Used internally bystylesheet_link_tagto build the stylesheet path.stylesheet_path "style"                                  # => /assets/style.css
stylesheet_path "dir/style.css"                          # => /assets/dir/style.css
stylesheet_path "/dir/style.css"                         # => /dir/style.css
stylesheet_path "http://www.example.com/css/style"       # => http://www.example.com/css/style
stylesheet_path "http://www.example.com/css/style.css"   # => http://www.example.com/css/style.cssAlso aliased as:path_to_stylesheetSource:show|on GitHub# File actionview/lib/action_view/helpers/asset_url_helper.rb, line 348defstylesheet_path(source,options= {})path_to_asset(source, {type::stylesheet}.merge!(options))endstylesheet_url(source, options = {})LinkComputes the full URL to a stylesheet asset in the public stylesheets directory. This will usestylesheet_pathinternally, so most of their behaviors will be the same. Sincestylesheet_urlis based onasset_urlmethod you can set:hostoptions. If:hostoptions is set, it overwrites globalconfig.action_controller.asset_hostsetting.stylesheet_url "css/style.css", host: "http://stage.example.com" # => http://stage.example.com/assets/css/style.cssAlso aliased as:url_to_stylesheetSource:show|on GitHub# File actionview/lib/action_view/helpers/asset_url_helper.rb, line 360defstylesheet_url(source,options= {})url_to_asset(source, {type::stylesheet}.merge!(options))endurl_to_asset(source, options = {})LinkAlias for:asset_urlurl_to_audio(source, options = {})LinkAlias for:audio_urlurl_to_font(source, options = {})LinkAlias for:font_urlurl_to_image(source, options = {})LinkAlias for:image_urlurl_to_javascript(source, options = {})LinkAlias for:javascript_urlurl_to_stylesheet(source, options = {})LinkAlias for:stylesheet_urlurl_to_video(source, options = {})LinkAlias for:video_urlvideo_path(source, options = {})LinkComputes the path to a video asset in the public videos directory. Full paths from the document root will be passed through. Used internally byvideo_tagto build the video path.video_path("hd")                                            # => /videos/hd
video_path("hd.avi")                                        # => /videos/hd.avi
video_path("trailers/hd.avi")                               # => /videos/trailers/hd.avi
video_path("/trailers/hd.avi")                              # => /trailers/hd.avi
video_path("http://www.example.com/vid/hd.avi")             # => http://www.example.com/vid/hd.aviAlso aliased as:path_to_videoSource:show|on GitHub# File actionview/lib/action_view/helpers/asset_url_helper.rb, line 404defvideo_path(source,options= {})path_to_asset(source, {type::video}.merge!(options))endvideo_url(source, options = {})LinkComputes the full URL to a video asset in the public videos directory. This will usevideo_pathinternally, so most of their behaviors will be the same. Sincevideo_urlis based onasset_urlmethod you can set:hostoptions. If:hostoptions is set, it overwrites globalconfig.action_controller.asset_hostsetting.video_url "hd.avi", host: "http://stage.example.com" # => http://stage.example.com/videos/hd.aviAlso aliased as:url_to_videoSource:show|on GitHub# File actionview/lib/action_view/helpers/asset_url_helper.rb, line 416defvideo_url(source,options= {})url_to_asset(source, {type::video}.merge!(options))end