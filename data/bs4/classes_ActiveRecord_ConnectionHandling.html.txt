Active Record Connection HandlingMethodsCclear_query_caches_for_current_thread,connected?,connected_to,connected_to?,connected_to_many,connecting_to,connection,connection_db_config,connection_pool,connection_specification_name,connects_toEestablish_connectionLlease_connectionPprohibit_shard_swappingRrelease_connection,remove_connection,retrieve_connectionSshard_swapping_prohibited?Wwhile_preventing_writes,with_connectionConstantsDEFAULT_ENV=-> { RAILS_ENV.call || "default_env" }RAILS_ENV=-> { (Rails.env if defined?(Rails.env)) || ENV["RAILS_ENV"].presence || ENV["RACK_ENV"].presence }Attributes[W]connection_specification_nameInstance Public methodsclear_query_caches_for_current_thread()LinkClears the query cache for all connections associated with the current thread.Source:show|on GitHub# File activerecord/lib/active_record/connection_handling.rb, line 244defclear_query_caches_for_current_threadconnection_handler.each_connection_pooldo|pool|pool.clear_query_cacheendendconnected?()LinkReturnstrueif Active Record is connected.Source:show|on GitHub# File activerecord/lib/active_record/connection_handling.rb, line 337defconnected?connection_handler.connected?(connection_specification_name,role:current_role,shard:current_shard)endconnected_to(role: nil, shard: nil, prevent_writes: false, &blk)LinkConnects to a role (e.g. writing, reading, or a custom role) and/or shard for the duration of the block. At the end of the block the connection will be returned to the original role / shard.If only a role is passed, Active Record will look up the connection based on the requested role. If a non-established role is requested anActiveRecord::ConnectionNotEstablishederror will be raised:ActiveRecord::Base.connected_to(role: :writing) do
  Dog.create! # creates dog using dog writing connection
end

ActiveRecord::Base.connected_to(role: :reading) do
  Dog.create! # throws exception because we're on a replica
endWhen swapping to a shard, the role must be passed as well. If a non-existent shard is passed, anActiveRecord::ConnectionNotEstablishederror will be raised.When a shard and role is passed, Active Record will first lookup the role, and then look up the connection by shard key.ActiveRecord::Base.connected_to(role: :reading, shard: :shard_one_replica) do
  Dog.first # finds first Dog record stored on the shard one replica
endSource:show|on GitHub# File activerecord/lib/active_record/connection_handling.rb, line 134defconnected_to(role:nil,shard:nil,prevent_writes:false,&blk)ifself!=Base&&!abstract_classraiseNotImplementedError,"calling `connected_to` is only allowed on ActiveRecord::Base or abstract classes."endif!connection_class?&&!primary_class?raiseNotImplementedError,"calling `connected_to` is only allowed on the abstract class that established the connection."endunlessrole||shardraiseArgumentError,"must provide a `shard` and/or `role`."endwith_role_and_shard(role,shard,prevent_writes,&blk)endconnected_to?(role:, shard: ActiveRecord::Base.default_shard)LinkReturns true if role is the current connected role and/or current connected shard. If no shard is passed, the default will be used.ActiveRecord::Base.connected_to(role: :writing) do
  ActiveRecord::Base.connected_to?(role: :writing) #=> true
  ActiveRecord::Base.connected_to?(role: :reading) #=> false
end

ActiveRecord::Base.connected_to(role: :reading, shard: :shard_one) do
  ActiveRecord::Base.connected_to?(role: :reading, shard: :shard_one) #=> true
  ActiveRecord::Base.connected_to?(role: :reading, shard: :default) #=> false
  ActiveRecord::Base.connected_to?(role: :writing, shard: :shard_one) #=> true
endSource:show|on GitHub# File activerecord/lib/active_record/connection_handling.rb, line 239defconnected_to?(role:,shard:ActiveRecord::Base.default_shard)current_role==role.to_sym&&current_shard==shard.to_symendconnected_to_many(*classes, role:, shard: nil, prevent_writes: false)LinkConnects a role and/or shard to the provided connection names. Optionallyprevent_writescan be passed to block writes on a connection.readingwill automatically setprevent_writesto true.connected_to_manyis an alternative to deeply nestedconnected_toblocks.Usage:ActiveRecord::Base.connected_to_many(AnimalsRecord, MealsRecord, role: :reading) do
  Dog.first # Read from animals replica
  Dinner.first # Read from meals replica
  Person.first # Read from primary writer
endSource:show|on GitHub# File activerecord/lib/active_record/connection_handling.rb, line 163defconnected_to_many(*classes,role:,shard:nil,prevent_writes:false)classes=classes.flattenifself!=Base||classes.include?(Base)raiseNotImplementedError,"connected_to_many can only be called on ActiveRecord::Base."endprevent_writes=trueifrole==ActiveRecord.reading_roleappend_to_connected_to_stack(role:role,shard:shard,prevent_writes:prevent_writes,klasses:classes)yieldensureconnected_to_stack.popendconnecting_to(role: default_role, shard: default_shard, prevent_writes: false)LinkUse a specified connection.This method is useful for ensuring that a specific connection is being used. For example, when booting a console in readonly mode.It is not recommended to use this method in a request since it does not yield to a block likeconnected_to.Source:show|on GitHub# File activerecord/lib/active_record/connection_handling.rb, line 185defconnecting_to(role:default_role,shard:default_shard,prevent_writes:false)prevent_writes=trueifrole==ActiveRecord.reading_roleappend_to_connected_to_stack(role:role,shard:shard,prevent_writes:prevent_writes,klasses:[self])endconnection()LinkSoft deprecated. Use#with_connectionor#lease_connectioninstead.Source:show|on GitHub# File activerecord/lib/active_record/connection_handling.rb, line 260defconnectionpool=connection_poolifpool.permanent_lease?caseActiveRecord.permanent_connection_checkoutwhen:deprecatedActiveRecord.deprecator.warn<<~MESSAGECalled deprecated `ActiveRecord::Base.connection` method.

            Either use `with_connection` or `lease_connection`.MESSAGEwhen:disallowedraiseActiveRecordError,<<~MESSAGECalled deprecated `ActiveRecord::Base.connection` method.

            Either use `with_connection` or `lease_connection`.MESSAGEendpool.lease_connectionelsepool.active_connectionendendconnection_db_config()LinkReturns the db_config object from the associated connection:ActiveRecord::Base.connection_db_config
  #<ActiveRecord::DatabaseConfigurations::HashConfig:0x00007fd1acbded10 @env_name="development",
    @name="primary", @config={pool: 5, timeout: 5000, database: "storage/development.sqlite3", adapter: "sqlite3"}>Use only for reading.Source:show|on GitHub# File activerecord/lib/active_record/connection_handling.rb, line 320defconnection_db_configconnection_pool.db_configendconnection_pool()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_handling.rb, line 328defconnection_poolconnection_handler.retrieve_connection_pool(connection_specification_name,role:current_role,shard:current_shard,strict:true)endconnection_specification_name()LinkReturns the connection specification name from the current class or its parent.Source:show|on GitHub# File activerecord/lib/active_record/connection_handling.rb, line 302defconnection_specification_nameif@connection_specification_name.nil?returnself==Base?Base.name:superclass.connection_specification_nameend@connection_specification_nameendconnects_to(database: {}, shards: {})LinkConnects a model to the databases specified. Thedatabasekeyword takes a hash consisting of aroleand adatabase_key.This will look up the database config using thedatabase_keyand establish a connection to that config.class AnimalsModel < ApplicationRecord
  self.abstract_class = true

  connects_to database: { writing: :primary, reading: :primary_replica }
endconnects_toalso supports horizontal sharding. The horizontal sharding API supports read replicas as well. You can connect a model to a list of shards like this:class AnimalsModel < ApplicationRecord
  self.abstract_class = true

  connects_to shards: {
    default: { writing: :primary, reading: :primary_replica },
    shard_two: { writing: :primary_shard_two, reading: :primary_shard_replica_two }
  }
endReturns an array of database connections.Source:show|on GitHub# File activerecord/lib/active_record/connection_handling.rb, line 81defconnects_to(database:{},shards:{})raiseNotImplementedError,"`connects_to` can only be called on ActiveRecord::Base or abstract classes"unlessself==Base||abstract_class?ifdatabase.present?&&shards.present?raiseArgumentError,"`connects_to` can only accept a `database` or `shards` argument, but not both arguments."endconnections= []ifshards.empty?shards[:default] =databaseendself.default_shard=shards.keys.firstshards.eachdo|shard,database_keys|database_keys.eachdo|role,database_key|db_config=resolve_config_for_connection(database_key)self.connection_class=trueconnections<<connection_handler.establish_connection(db_config,owner_name:self,role:role,shard:shard.to_sym)endendconnectionsendestablish_connection(config_or_env = nil)LinkEstablishes the connection to the database. Accepts a hash as input where the:adapterkey must be specified with the name of a database adapter (in lower-case) example for regular databases (MySQL, PostgreSQL, etc):ActiveRecord::Base.establish_connection(
  adapter:  "mysql2",
  host:     "localhost",
  username: "myuser",
  password: "mypass",
  database: "somedatabase"
)Example for SQLite database:ActiveRecord::Base.establish_connection(
  adapter:  "sqlite3",
  database: "path/to/dbfile"
)Also accepts keys as strings (for parsing from YAML for example):ActiveRecord::Base.establish_connection(
  "adapter"  => "sqlite3",
  "database" => "path/to/dbfile"
)Or a URL:ActiveRecord::Base.establish_connection(
  "postgres://myuser:mypass@localhost/somedatabase"
)In caseActiveRecord::Base.configurationsis set (Rails automatically loads the contents of config/database.yml into it), a symbol can also be given as argument, representing a key in the configuration hash:ActiveRecord::Base.establish_connection(:production)The exceptionsAdapterNotSpecified,AdapterNotFound, andArgumentErrormay be returned on an error.Source:show|on GitHub# File activerecord/lib/active_record/connection_handling.rb, line 50defestablish_connection(config_or_env=nil)config_or_env||=DEFAULT_ENV.call.to_symdb_config=resolve_config_for_connection(config_or_env)connection_handler.establish_connection(db_config,owner_name:self,role:current_role,shard:current_shard)endlease_connection()LinkReturns the connection currently associated with the class. This can also be used to âborrowâ the connection to do database work unrelated to any of the specific Active Records. The connection will remain leased for the entire duration of the request or job, or until#release_connectionis called.Source:show|on GitHub# File activerecord/lib/active_record/connection_handling.rb, line 255deflease_connectionconnection_pool.lease_connectionendprohibit_shard_swapping(enabled = true)LinkProhibit swapping shards while inside of the passed block.In some cases you may want to be able to swap shards but not allow a nested call toconnected_toorconnected_to_manyto swap again. This is useful in cases youâre using sharding to provide per-request database isolation.Source:show|on GitHub# File activerecord/lib/active_record/connection_handling.rb, line 197defprohibit_shard_swapping(enabled=true)prev_value=ActiveSupport::IsolatedExecutionState[:active_record_prohibit_shard_swapping]ActiveSupport::IsolatedExecutionState[:active_record_prohibit_shard_swapping] =enabledyieldensureActiveSupport::IsolatedExecutionState[:active_record_prohibit_shard_swapping] =prev_valueendrelease_connection()LinkReturn the currently leased connection into the poolSource:show|on GitHub# File activerecord/lib/active_record/connection_handling.rb, line 284defrelease_connectionconnection_pool.release_connectionendremove_connection()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_handling.rb, line 341defremove_connectionname=@connection_specification_nameifdefined?(@connection_specification_name)# if removing a connection that has a pool, we reset the# connection_specification_name so it will use the parent# pool.ifconnection_handler.retrieve_connection_pool(name,role:current_role,shard:current_shard)self.connection_specification_name=nilendconnection_handler.remove_connection_pool(name,role:current_role,shard:current_shard)endretrieve_connection()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_handling.rb, line 332defretrieve_connectionconnection_handler.retrieve_connection(connection_specification_name,role:current_role,shard:current_shard)endshard_swapping_prohibited?()LinkDetermine whether or not shard swapping is currently prohibitedSource:show|on GitHub# File activerecord/lib/active_record/connection_handling.rb, line 206defshard_swapping_prohibited?ActiveSupport::IsolatedExecutionState[:active_record_prohibit_shard_swapping]endwhile_preventing_writes(enabled = true, &block)LinkPrevent writing to the database regardless of role.In some cases you may want to prevent writes to the database even if you are on a database that can write.while_preventing_writeswill prevent writes to the database for the duration of the block.This method does not provide the same protection as a readonly user and is meant to be a safeguard against accidental writes.SeeREAD_QUERYfor the queries that are blocked by this method.Source:show|on GitHub# File activerecord/lib/active_record/connection_handling.rb, line 221defwhile_preventing_writes(enabled=true,&block)connected_to(role:current_role,prevent_writes:enabled,&block)endwith_connection(prevent_permanent_checkout: false, &block)LinkCheckouts a connection from the pool, yield it and then check it back in. If a connection was already leased vialease_connectionor a parent call towith_connection, that same connection is yieled. Iflease_connectionis called inside the block, the connection wonât be checked back in. Ifconnectionis called inside the block, the connection wonât be checked back in unless theprevent_permanent_checkoutargument is set totrue.Source:show|on GitHub# File activerecord/lib/active_record/connection_handling.rb, line 295defwith_connection(prevent_permanent_checkout:false,&block)connection_pool.with_connection(prevent_permanent_checkout:prevent_permanent_checkout,&block)end