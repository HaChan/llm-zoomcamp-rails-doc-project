Sets log tags, logs the request, calls the app, and flushes the logs.Log tags (taggers) can be anArraycontaining: methods that therequestobject responds to, objects that respond toto_sor Proc objects that accept an instance of therequestobject.MethodsCcall,call_app,compute_tagsNnewSstarted_request_messageClass Public methodsnew(app, taggers = nil)LinkSource:show|on GitHub# File railties/lib/rails/rack/logger.rb, line 15definitialize(app,taggers=nil)@app=app@taggers=taggers||[]endInstance Public methodscall(env)LinkSource:show|on GitHub# File railties/lib/rails/rack/logger.rb, line 20defcall(env)request=ActionDispatch::Request.new(env)env["rails.rack_logger_tag_count"] =iflogger.respond_to?(:push_tags)logger.push_tags(*compute_tags(request)).sizeelse0endcall_app(request,env)endInstance Private methodscall_app(request, env)LinkSource:show|on GitHub# File railties/lib/rails/rack/logger.rb, line 33defcall_app(request,env)# :doc:logger_tag_pop_count=env["rails.rack_logger_tag_count"]instrumenter=ActiveSupport::Notifications.instrumenterhandle=instrumenter.build_handle("request.action_dispatch", {request:request})handle.startlogger.info{started_request_message(request) }status,headers,body=response=@app.call(env)body=::Rack::BodyProxy.new(body) {finish_request_instrumentation(handle,logger_tag_pop_count) }ifresponse.frozen?[status,headers,body]elseresponse[2] =bodyresponseendrescueExceptionfinish_request_instrumentation(handle,logger_tag_pop_count)raiseendcompute_tags(request)LinkSource:show|on GitHub# File railties/lib/rails/rack/logger.rb, line 64defcompute_tags(request)# :doc:@taggers.collectdo|tag|casetagwhenProctag.call(request)whenSymbolrequest.send(tag)elsetagendendendstarted_request_message(request)LinkStarted GET â/session/newâ for 127.0.0.1 at 2012-09-26 14:51:42 -0700Source:show|on GitHub# File railties/lib/rails/rack/logger.rb, line 56defstarted_request_message(request)# :doc:sprintf('Started %s "%s" for %s at %s',request.raw_request_method,request.filtered_path,request.remote_ip,Time.now)end