Active Support InflectorTheInflectortransforms words from singular to plural, class names to table names, modularized class names to ones without, and class names to foreign keys. The default inflections for pluralization, singularization, and uncountable words are kept in inflections.rb.The Rails core team has stated patches for the inflections library will not be accepted in order to avoid breaking legacy applications which may be relying on errant inflections. If you discover an incorrect inflection and require it for your application or wish to define rules for languages other than English, please correct or add them yourself (explained below).NamespaceCLASSActiveSupport::Inflector::InflectionsMethodsCcamelize,classify,constantizeDdasherize,deconstantize,demodulize,downcase_firstFforeign_keyHhumanizeIinflectionsOordinal,ordinalizePparameterize,pluralizeSsafe_constantize,singularizeTtableize,titleize,transliterateUunderscore,upcase_firstConstantsALLOWED_ENCODINGS_FOR_TRANSLITERATE=[Encoding::UTF_8, Encoding::US_ASCII, Encoding::GB18030].freezeInstance Public methodscamelize(term, uppercase_first_letter = true)LinkConverts strings to UpperCamelCase. If theuppercase_first_letterparameter is set to false, then produces lowerCamelCase.Also converts â/â to â::â which is useful for converting paths to namespaces.camelize('active_model')                # => "ActiveModel"
camelize('active_model', false)         # => "activeModel"
camelize('active_model/errors')         # => "ActiveModel::Errors"
camelize('active_model/errors', false)  # => "activeModel::Errors"As a rule of thumb you can think ofcamelizeas the inverse ofunderscore, though there are cases where that does not hold:camelize(underscore('SSLError'))        # => "SslError"Source:show|on GitHub# File activesupport/lib/active_support/inflector/methods.rb, line 70defcamelize(term,uppercase_first_letter=true)string=term.to_s# String#camelize takes a symbol (:upper or :lower), so here we also support :lower to keep the methods consistent.if!uppercase_first_letter||uppercase_first_letter==:lowerstring=string.sub(inflections.acronyms_camelize_regex) {|match|match.downcase!||match}elsifstring.match?(/\A[a-z\d]*\z/)returninflections.acronyms[string]&.dup||string.capitalizeelsestring=string.sub(/^[a-z\d]*/) {|match|inflections.acronyms[match]||match.capitalize!||match}endstring.gsub!(/(?:_|(\/))([a-z\d]*)/i)doword=$2substituted=inflections.acronyms[word]||word.capitalize!||word$1?"::#{substituted}":substitutedendstringendclassify(table_name)LinkCreates a class name from a plural table name like Rails does for table names to models. Note that this returns a string and not aClass. (To convert to an actual class followclassifywithconstantize.)classify('ham_and_eggs') # => "HamAndEgg"
classify('posts')        # => "Post"Singular names are not handled correctly:classify('calculus')     # => "Calculu"Source:show|on GitHub# File activesupport/lib/active_support/inflector/methods.rb, line 218defclassify(table_name)# strip out any leading schema namecamelize(singularize(table_name.to_s.sub(/.*\./,"")))endconstantize(camel_cased_word)LinkTries to find a constant with the name specified in the argument string.constantize('Module')   # => Module
constantize('Foo::Bar') # => Foo::BarThe name is assumed to be the one of a top-level constant, no matter whether it starts with â::â or not. No lexical context is taken into account:C = 'outside'
module M
  C = 'inside'
  C                # => 'inside'
  constantize('C') # => 'outside', same as ::C
endNameErroris raised when the name is not in CamelCase or the constant is unknown.Source:show|on GitHub# File activesupport/lib/active_support/inflector/methods.rb, line 289defconstantize(camel_cased_word)Object.const_get(camel_cased_word)enddasherize(underscored_word)LinkReplaces underscores with dashes in the string.dasherize('puni_puni') # => "puni-puni"Source:show|on GitHub# File activesupport/lib/active_support/inflector/methods.rb, line 226defdasherize(underscored_word)underscored_word.tr("_","-")enddeconstantize(path)LinkRemoves the rightmost segment from the constant expression in the string.deconstantize('Net::HTTP')   # => "Net"
deconstantize('::Net::HTTP') # => "::Net"
deconstantize('String')      # => ""
deconstantize('::String')    # => ""
deconstantize('')            # => ""See alsodemodulize.Source:show|on GitHub# File activesupport/lib/active_support/inflector/methods.rb, line 256defdeconstantize(path)path.to_s[0,path.rindex("::")||0]# implementation based on the one in facets' Module#spacenameenddemodulize(path)LinkRemoves the module part from the expression in the string.demodulize('ActiveSupport::Inflector::Inflections') # => "Inflections"
demodulize('Inflections')                           # => "Inflections"
demodulize('::Inflections')                         # => "Inflections"
demodulize('')                                      # => ""See alsodeconstantize.Source:show|on GitHub# File activesupport/lib/active_support/inflector/methods.rb, line 238defdemodulize(path)path=path.to_sifi=path.rindex("::")path[(i+2),path.length]elsepathendenddowncase_first(string)LinkConverts the first character in the string to lowercase.downcase_first('If they enjoyed The Matrix') # => "if they enjoyed The Matrix"
downcase_first('I')                          # => "i"
downcase_first('')                           # => ""Source:show|on GitHub# File activesupport/lib/active_support/inflector/methods.rb, line 175defdowncase_first(string)string.length>0?string[0].downcase.concat(string[1..-1]):+""endforeign_key(class_name, separate_class_name_and_id_with_underscore = true)LinkCreates a foreign key name from a class name.separate_class_name_and_id_with_underscoresets whether the method should put â_â between the name and âidâ.foreign_key('Message')        # => "message_id"
foreign_key('Message', false) # => "messageid"
foreign_key('Admin::Post')    # => "post_id"Source:show|on GitHub# File activesupport/lib/active_support/inflector/methods.rb, line 267defforeign_key(class_name,separate_class_name_and_id_with_underscore=true)underscore(demodulize(class_name))+(separate_class_name_and_id_with_underscore?"_id":"id")endhumanize(lower_case_and_underscored_word, capitalize: true, keep_id_suffix: false)LinkTweaks an attribute name for display to end users.Specifically, performs these transformations:Applies human inflection rules to the argument.Deletes leading underscores, if any.Removes an â_idâ suffix if present.Replaces underscores with spaces, if any.Downcases all words except acronyms.Capitalizes the first word.The capitalization of the first word can be turned off by setting the:capitalizeoption to false (default is true).The trailing â_idâ can be kept and capitalized by setting the optional parameterkeep_id_suffixto true (default is false).humanize('employee_salary')                  # => "Employee salary"
humanize('author_id')                        # => "Author"
humanize('author_id', capitalize: false)     # => "author"
humanize('_id')                              # => "Id"
humanize('author_id', keep_id_suffix: true)  # => "Author id"If âSSLâ was defined to be an acronym:humanize('ssl_error') # => "SSL error"Source:show|on GitHub# File activesupport/lib/active_support/inflector/methods.rb, line 135defhumanize(lower_case_and_underscored_word,capitalize:true,keep_id_suffix:false)result=lower_case_and_underscored_word.to_s.dupinflections.humans.each{|(rule,replacement)|breakifresult.sub!(rule,replacement) }result.tr!("_"," ")result.lstrip!if!keep_id_suffix&&lower_case_and_underscored_word&.end_with?("_id")result.delete_suffix!(" id")endresult.gsub!(/([a-z\d]+)/i)do|match|match.downcase!inflections.acronyms[match]||matchendifcapitalizeresult.sub!(/\A\w/)do|match|match.upcase!matchendendresultendinflections(locale = :en)LinkYields a singleton instance ofInflector::Inflectionsso you can specify additional inflector rules. If passed an optional locale, rules for other languages can be specified. If not specified, defaults to:en. Only rules for English are provided.ActiveSupport::Inflector.inflections(:en) do |inflect|
  inflect.uncountable 'rails'
endSource:show|on GitHub# File activesupport/lib/active_support/inflector/inflections.rb, line 265definflections(locale=:en)ifblock_given?yieldInflections.instance(locale)elseInflections.instance_or_fallback(locale)endendordinal(number)LinkReturns the suffix that should be added to a number to denote the position in an ordered sequence such as 1st, 2nd, 3rd, 4th.ordinal(1)     # => "st"
ordinal(2)     # => "nd"
ordinal(1002)  # => "nd"
ordinal(1003)  # => "rd"
ordinal(-11)   # => "th"
ordinal(-1021) # => "st"Source:show|on GitHub# File activesupport/lib/active_support/inflector/methods.rb, line 334defordinal(number)I18n.translate("number.nth.ordinals",number:number)endordinalize(number)LinkTurns a number into an ordinal string used to denote the position in an ordered sequence such as 1st, 2nd, 3rd, 4th.ordinalize(1)     # => "1st"
ordinalize(2)     # => "2nd"
ordinalize(1002)  # => "1002nd"
ordinalize(1003)  # => "1003rd"
ordinalize(-11)   # => "-11th"
ordinalize(-1021) # => "-1021st"Source:show|on GitHub# File activesupport/lib/active_support/inflector/methods.rb, line 347defordinalize(number)I18n.translate("number.nth.ordinalized",number:number)endparameterize(string, separator: "-", preserve_case: false, locale: nil)LinkReplaces special characters in a string so that it may be used as part of a âprettyâ URL.parameterize("Donald E. Knuth") # => "donald-e-knuth"
parameterize("^trÃ¨s|Jolie-- ")  # => "tres-jolie"To use a custom separator, override theseparatorargument.parameterize("Donald E. Knuth", separator: '_') # => "donald_e_knuth"
parameterize("^trÃ¨s|Jolie__ ", separator: '_')  # => "tres_jolie"To preserve the case of the characters in a string, use thepreserve_caseargument.parameterize("Donald E. Knuth", preserve_case: true) # => "Donald-E-Knuth"
parameterize("^trÃ¨s|Jolie-- ", preserve_case: true) # => "tres-Jolie"It preserves dashes and underscores unless they are used as separators:parameterize("^trÃ¨s|Jolie__ ")                 # => "tres-jolie__"
parameterize("^trÃ¨s|Jolie-- ", separator: "_") # => "tres_jolie--"
parameterize("^trÃ¨s_Jolie-- ", separator: ".") # => "tres_jolie--"If the optional parameterlocaleis specified, the word will be parameterized as a word of that language. By default, this parameter is set toniland it will use the configuredI18n.locale.Source:show|on GitHub# File activesupport/lib/active_support/inflector/transliterate.rb, line 123defparameterize(string,separator:"-",preserve_case:false,locale:nil)# Replace accented chars with their ASCII equivalents.parameterized_string=transliterate(string,locale:locale)# Turn unwanted chars into the separator.parameterized_string.gsub!(/[^a-z0-9\-_]+/i,separator)unlessseparator.nil?||separator.empty?ifseparator=="-"re_duplicate_separator=/-{2,}/re_leading_trailing_separator=/^-|-$/ielsere_sep=Regexp.escape(separator)re_duplicate_separator=/#{re_sep}{2,}/re_leading_trailing_separator=/^#{re_sep}|#{re_sep}$/iend# No more than one of the separator in a row.parameterized_string.gsub!(re_duplicate_separator,separator)# Remove leading/trailing separator.parameterized_string.gsub!(re_leading_trailing_separator,"")endparameterized_string.downcase!unlesspreserve_caseparameterized_stringendpluralize(word, locale = :en)LinkReturns the plural form of the word in the string.If passed an optionallocaleparameter, the word will be pluralized using rules defined for that language. By default, this parameter is set to:en.pluralize('post')             # => "posts"
pluralize('octopus')          # => "octopi"
pluralize('sheep')            # => "sheep"
pluralize('words')            # => "words"
pluralize('CamelOctopus')     # => "CamelOctopi"
pluralize('ley', :es)         # => "leyes"Source:show|on GitHub# File activesupport/lib/active_support/inflector/methods.rb, line 33defpluralize(word,locale=:en)apply_inflections(word,inflections(locale).plurals,locale)endsafe_constantize(camel_cased_word)LinkTries to find a constant with the name specified in the argument string.safe_constantize('Module')   # => Module
safe_constantize('Foo::Bar') # => Foo::BarThe name is assumed to be the one of a top-level constant, no matter whether it starts with â::â or not. No lexical context is taken into account:C = 'outside'
module M
  C = 'inside'
  C                     # => 'inside'
  safe_constantize('C') # => 'outside', same as ::C
endnilis returned when the name is not in CamelCase or the constant (or part of it) is unknown.safe_constantize('blargle')                  # => nil
safe_constantize('UnknownModule')            # => nil
safe_constantize('UnknownModule::Foo::Bar')  # => nilSource:show|on GitHub# File activesupport/lib/active_support/inflector/methods.rb, line 315defsafe_constantize(camel_cased_word)constantize(camel_cased_word)rescueNameError=>eraiseife.name&&!(camel_cased_word.to_s.split("::").include?(e.name.to_s)||e.name.to_s==camel_cased_word.to_s)rescueLoadError=>emessage=e.respond_to?(:original_message)?e.original_message:e.messageraiseunless/Unable to autoload constant #{const_regexp(camel_cased_word)}/.match?(message)endsingularize(word, locale = :en)LinkThe reverse ofpluralize, returns the singular form of a word in a string.If passed an optionallocaleparameter, the word will be singularized using rules defined for that language. By default, this parameter is set to:en.singularize('posts')            # => "post"
singularize('octopi')           # => "octopus"
singularize('sheep')            # => "sheep"
singularize('word')             # => "word"
singularize('CamelOctopi')      # => "CamelOctopus"
singularize('leyes', :es)       # => "ley"Source:show|on GitHub# File activesupport/lib/active_support/inflector/methods.rb, line 50defsingularize(word,locale=:en)apply_inflections(word,inflections(locale).singulars,locale)endtableize(class_name)LinkCreates the name of a table like Rails does for models to table names. This method uses thepluralizemethod on the last word in the string.tableize('RawScaledScorer') # => "raw_scaled_scorers"
tableize('ham_and_egg')     # => "ham_and_eggs"
tableize('fancyCategory')   # => "fancy_categories"Source:show|on GitHub# File activesupport/lib/active_support/inflector/methods.rb, line 204deftableize(class_name)pluralize(underscore(class_name))endtitleize(word, keep_id_suffix: false)LinkCapitalizes all the words and replaces some characters in the string to create a nicer looking title.titleizeis meant for creating pretty output. It is not used in the Rails internals.The trailing â_idâ,âIdâ.. can be kept and capitalized by setting the optional parameterkeep_id_suffixto true. By default, this parameter is false.titleize('man from the boondocks')                       # => "Man From The Boondocks"
titleize('x-men: the last stand')                        # => "X Men: The Last Stand"
titleize('TheManWithoutAPast')                           # => "The Man Without A Past"
titleize('raiders_of_the_lost_ark')                      # => "Raiders Of The Lost Ark"
titleize('string_ending_with_id', keep_id_suffix: true)  # => "String Ending With Id"Source:show|on GitHub# File activesupport/lib/active_support/inflector/methods.rb, line 192deftitleize(word,keep_id_suffix:false)humanize(underscore(word),keep_id_suffix:keep_id_suffix).gsub(/\b(?<!\w['â`()])[a-z]/)do|match|match.capitalizeendendtransliterate(string, replacement = "?", locale: nil)LinkReplaces non-ASCII characters with an ASCII approximation, or if none exists, a replacement character which defaults to â?â.transliterate('ÃrÃ¸skÃ¸bing')
# => "AEroskobing"Default approximations are provided for Western/Latin characters, e.g, âÃ¸â, âÃ±â, âÃ©â, âÃâ, etc.This method is I18n aware, so you can set up custom approximations for a locale. This can be useful, for example, to transliterate Germanâs âÃ¼â and âÃ¶â to âueâ and âoeâ, or to add support for transliterating Russian to ASCII.In order to make your custom transliterations available, you must set them as thei18n.transliterate.rulei18n key:# Store the transliterations in locales/de.yml
i18n:
  transliterate:
    rule:
      Ã¼: "ue"
      Ã¶: "oe"

# Or set them using Ruby
I18n.backend.store_translations(:de, i18n: {
  transliterate: {
    rule: {
      'Ã¼' => 'ue',
      'Ã¶' => 'oe'
    }
  }
})The value fori18n.transliterate.rulecan be a simpleHashthat maps characters to ASCII approximations as shown above, or, for more complex requirements, a Proc:I18n.backend.store_translations(:de, i18n: {
  transliterate: {
    rule: ->(string) { MyTransliterator.transliterate(string) }
  }
})Now you can have different transliterations for each locale:transliterate('JÃ¼rgen', locale: :en)
# => "Jurgen"

transliterate('JÃ¼rgen', locale: :de)
# => "Juergen"Transliteration is restricted to UTF-8, US-ASCII, and GB18030 strings. Other encodings will raise an ArgumentError.Source:show|on GitHub# File activesupport/lib/active_support/inflector/transliterate.rb, line 64deftransliterate(string,replacement="?",locale:nil)raiseArgumentError,"Can only transliterate strings. Received #{string.class.name}"unlessstring.is_a?(String)raiseArgumentError,"Cannot transliterate strings with #{string.encoding} encoding"unlessALLOWED_ENCODINGS_FOR_TRANSLITERATE.include?(string.encoding)returnstring.dupifstring.ascii_only?string=string.dupifstring.frozen?input_encoding=string.encoding# US-ASCII is a subset of UTF-8 so we'll force encoding as UTF-8 if# US-ASCII is given. This way we can let tidy_bytes handle the string# in the same way as we do for UTF-8string.force_encoding(Encoding::UTF_8)ifstring.encoding==Encoding::US_ASCII# GB18030 is Unicode compatible but is not a direct mapping so needs to be# transcoded. Using invalid/undef :replace will result in loss of data in# the event of invalid characters, but since tidy_bytes will replace# invalid/undef with a "?" we're safe to do the same beforehandstring.encode!(Encoding::UTF_8,invalid::replace,undef::replace)ifstring.encoding==Encoding::GB18030transliterated=I18n.transliterate(ActiveSupport::Multibyte::Unicode.tidy_bytes(string).unicode_normalize(:nfc),replacement:replacement,locale:locale)# Restore the string encoding of the input if it was not UTF-8.# Apply invalid/undef :replace as tidy_bytes doestransliterated.encode!(input_encoding,invalid::replace,undef::replace)ifinput_encoding!=transliterated.encodingtransliteratedendunderscore(camel_cased_word)LinkMakes an underscored, lowercase form from the expression in the string.Changes â::â to â/â to convert namespaces to paths.underscore('ActiveModel')         # => "active_model"
underscore('ActiveModel::Errors') # => "active_model/errors"As a rule of thumb you can think ofunderscoreas the inverse ofcamelize, though there are cases where that does not hold:camelize(underscore('SSLError'))  # => "SslError"Source:show|on GitHub# File activesupport/lib/active_support/inflector/methods.rb, line 99defunderscore(camel_cased_word)returncamel_cased_word.to_s.dupunless/[A-Z-]|::/.match?(camel_cased_word)word=camel_cased_word.to_s.gsub("::","/")word.gsub!(inflections.acronyms_underscore_regex) {"#{$1 && '_' }#{$2.downcase}"}word.gsub!(/(?<=[A-Z])(?=[A-Z][a-z])|(?<=[a-z\d])(?=[A-Z])/,"_")word.tr!("-","_")word.downcase!wordendupcase_first(string)LinkConverts the first character in the string to uppercase.upcase_first('what a Lovely Day') # => "What a Lovely Day"
upcase_first('w')                 # => "W"
upcase_first('')                  # => ""Source:show|on GitHub# File activesupport/lib/active_support/inflector/methods.rb, line 166defupcase_first(string)string.length>0?string[0].upcase.concat(string[1..-1]):+""end