Action DispatchHostAuthorizationThis middleware guards from DNS rebinding attacks by explicitly permitting the hosts a request can be sent to, and is passed the options set inconfig.host_authorization.Requests can opt-out of Host Authorization withexclude:config.host_authorization = { exclude: ->(request) { request.path =~ /healthcheck/ } }When a request comes to an unauthorized host, theresponse_appapplication will be executed and rendered. If noresponse_appis given, a default one will run. The default response app logs blocked host info with level âerrorâ and responds with403 Forbidden. The body of the response contains debug info ifconfig.consider_all_requests_localis set to true, otherwise the body is empty.MethodsCcallNnewConstantsALLOWED_HOSTS_IN_DEVELOPMENT=[".localhost", ".test", IPAddr.new("0.0.0.0/0"), IPAddr.new("::/0")]Class Public methodsnew(app, hosts, exclude: nil, response_app: nil)LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/middleware/host_authorization.rb, line 127definitialize(app,hosts,exclude:nil,response_app:nil)@app=app@permissions=Permissions.new(hosts)@exclude=exclude@response_app=response_app||DefaultResponseApp.newendInstance Public methodscall(env)LinkSource:show|on GitHub# File actionpack/lib/action_dispatch/middleware/host_authorization.rb, line 135defcall(env)return@app.call(env)if@permissions.empty?request=Request.new(env)hosts=blocked_hosts(request)ifhosts.empty?||excluded?(request)mark_as_authorized(request)@app.call(env)elseenv["action_dispatch.blocked_hosts"] =hosts@response_app.call(env)endend