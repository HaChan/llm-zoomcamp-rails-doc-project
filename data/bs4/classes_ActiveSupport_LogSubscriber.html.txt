Active Support Log SubscriberActiveSupport::LogSubscriberis an object set to consumeActiveSupport::Notificationswith the sole purpose of logging them. The log subscriber dispatches notifications to a registered object based on its given namespace.An example would be Active Record log subscriber responsible for logging queries:module ActiveRecord
  class LogSubscriber < ActiveSupport::LogSubscriber
    attach_to :active_record

    def sql(event)
      info "#{event.payload[:name]} (#{event.duration}) #{event.payload[:sql]}"
    end
  end
endActiveRecord::LogSubscriber.loggermust be set as well, but it is assigned automatically in a Rails environment.After configured, whenever a"sql.active_record"notification is published, it will properly dispatch the event (ActiveSupport::Notifications::Event) to thesqlmethod.Being anActiveSupport::Notificationsconsumer,ActiveSupport::LogSubscriberexposes a simple interface to check if instrumented code raises an exception. It is common to log a different message in case of an error, and this can be achieved by extending the previous example:module ActiveRecord
  class LogSubscriber < ActiveSupport::LogSubscriber
    def sql(event)
      exception = event.payload[:exception]

      if exception
        exception_object = event.payload[:exception_object]

        error "[ERROR] #{event.payload[:name]}: #{exception.join(', ')} " \
              "(#{exception_object.backtrace.first})"
      else
        # standard logger code
      end
    end
  end
endActiveSupport::LogSubscriberalso has some helpers to deal with logging. For example,ActiveSupport::LogSubscriber.flush_all!will ensure that all logs are flushed, and it is called inRails::Rack::Loggerafter a request finishes.NamespaceMODULEActiveSupport::LogSubscriber::TestHelperMethodsCcall,colorFflush_all!Llog_subscribers,logger,loggerNnewPpublish_eventSsilenced?ConstantsBLACK="\e[30m"ANSI sequence colorsBLUE="\e[34m"CYAN="\e[36m"GREEN="\e[32m"LEVEL_CHECKS={
debug: -> (logger) { !logger.debug? },
info: -> (logger) { !logger.info? },
error: -> (logger) { !logger.error? },
}MAGENTA="\e[35m"MODES={
clear:     0,
bold:      1,
italic:    3,
underline: 4,
}ANSI sequence modesRED="\e[31m"WHITE="\e[37m"YELLOW="\e[33m"Attributes[W]loggerClass Public methodsflush_all!()LinkFlush alllog_subscribersâ logger.Source:show|on GitHub# File activesupport/lib/active_support/log_subscriber.rb, line 112defflush_all!logger.flushiflogger.respond_to?(:flush)endlog_subscribers()LinkSource:show|on GitHub# File activesupport/lib/active_support/log_subscriber.rb, line 107deflog_subscriberssubscribersendlogger()LinkSource:show|on GitHub# File activesupport/lib/active_support/log_subscriber.rb, line 93deflogger@logger||=ifdefined?(Rails)&&Rails.respond_to?(:logger)Rails.loggerendendnew()LinkSource:show|on GitHub# File activesupport/lib/active_support/log_subscriber.rb, line 133definitializesuper@event_levels= {}endInstance Public methodscall(event)LinkSource:show|on GitHub# File activesupport/lib/active_support/log_subscriber.rb, line 146defcall(event)superifloggerrescue=>elog_exception(event.name,e)endlogger()LinkSource:show|on GitHub# File activesupport/lib/active_support/log_subscriber.rb, line 138defloggerLogSubscriber.loggerendpublish_event(event)LinkSource:show|on GitHub# File activesupport/lib/active_support/log_subscriber.rb, line 152defpublish_event(event)superifloggerrescue=>elog_exception(event.name,e)endsilenced?(event)LinkSource:show|on GitHub# File activesupport/lib/active_support/log_subscriber.rb, line 142defsilenced?(event)logger.nil?||@event_levels[event]&.call(logger)endInstance Private methodscolor(text, color, mode_options = {})LinkSet color by using a symbol or one of the defined constants. Set modes by specifying bold, italic, or underline options. Inspired by Highline, this method will automatically clear formatting at the end of the returnedString.Source:show|on GitHub# File activesupport/lib/active_support/log_subscriber.rb, line 172defcolor(text,color,mode_options= {})# :doc:returntextunlesscolorize_loggingcolor=self.class.const_get(color.upcase)ifcolor.is_a?(Symbol)mode=mode_from(mode_options)clear="\e[#{MODES[:clear]}m""#{mode}#{color}#{text}#{clear}"end