Active Support DurationProvides accurate date and time measurements usingDate#advanceandTime#advance, respectively. It mainly supports the methods onNumeric.1.month.ago       # equivalent to Time.now.advance(months: -1)NamespaceCLASSActiveSupport::Duration::ISO8601ParserMethods#%,*,+,-,/,<=>,==Aafter,agoBbefore,buildEeql?Ffrom_nowHhashIin_days,in_hours,in_minutes,in_months,in_seconds,in_weeks,in_years,iso8601Pparse,partsSsinceTto_i,to_sUuntilConstantsPARTS=[:years, :months, :weeks, :days, :hours, :minutes, :seconds].freezePARTS_IN_SECONDS={
seconds: 1,
minutes: SECONDS_PER_MINUTE,
hours:   SECONDS_PER_HOUR,
days:    SECONDS_PER_DAY,
weeks:   SECONDS_PER_WEEK,
months:  SECONDS_PER_MONTH,
years:   SECONDS_PER_YEAR
}.freezeSECONDS_PER_DAY=86400SECONDS_PER_HOUR=3600SECONDS_PER_MINUTE=60SECONDS_PER_MONTH=2629746SECONDS_PER_WEEK=604800SECONDS_PER_YEAR=31556952VARIABLE_PARTS=[:years, :months, :weeks, :days].freezeAttributes[R]valueClass Public methodsbuild(value)LinkCreates a newDurationfrom a seconds value that is converted to the individual parts:ActiveSupport::Duration.build(31556952).parts # => {:years=>1}
ActiveSupport::Duration.build(2716146).parts  # => {:months=>1, :days=>1}Source:show|on GitHub# File activesupport/lib/active_support/duration.rb, line 189defbuild(value)unlessvalue.is_a?(::Numeric)raiseTypeError,"can't build an #{self.name} from a #{value.class.name}"endparts= {}remainder_sign=value<=>0remainder=value.round(9).absvariable=falsePARTS.eachdo|part|unlesspart==:secondspart_in_seconds=PARTS_IN_SECONDS[part]parts[part] =remainder.div(part_in_seconds)*remainder_signremainder%=part_in_secondsunlessparts[part].zero?variable||=VARIABLE_PARTS.include?(part)endendendunlessvalue==0parts[:seconds] =remainder*remainder_signnew(value,parts,variable)endparse(iso8601duration)LinkCreates a newDurationfrom string formatted according to ISO 8601Duration.SeeISO 8601for more information. This method allows negative parts to be present in pattern. If invalid string is provided, it will raiseActiveSupport::Duration::ISO8601Parser::ParsingError.Source:show|on GitHub# File activesupport/lib/active_support/duration.rb, line 144defparse(iso8601duration)parts=ISO8601Parser.new(iso8601duration).parse!new(calculate_total_seconds(parts),parts)endInstance Public methods%(other)LinkReturns the modulo of thisDurationby anotherDurationorNumeric.Numericvalues are treated as seconds.Source:show|on GitHub# File activesupport/lib/active_support/duration.rb, line 312def%(other)ifDuration===other||Scalar===otherDuration.build(value%other.value)elsifNumeric===otherDuration.build(value%other)elseraise_type_error(other)endend*(other)LinkMultiplies thisDurationby aNumericand returns a newDuration.Source:show|on GitHub# File activesupport/lib/active_support/duration.rb, line 287def*(other)ifScalar===other||Duration===otherDuration.new(value*other.value,@parts.transform_values{|number|number*other.value},@variable||other.variable?)elsifNumeric===otherDuration.new(value*other,@parts.transform_values{|number|number*other},@variable)elseraise_type_error(other)endend+(other)LinkAdds anotherDurationor aNumericto thisDuration.Numericvalues are treated as seconds.Source:show|on GitHub# File activesupport/lib/active_support/duration.rb, line 268def+(other)ifDuration===otherparts=@parts.merge(other._parts)do|_key,value,other_value|value+other_valueendDuration.new(value+other.value,parts,@variable||other.variable?)elseseconds=@parts.fetch(:seconds,0)+otherDuration.new(value+other,@parts.merge(seconds:seconds),@variable)endend-(other)LinkSubtracts anotherDurationor aNumericfrom thisDuration.Numericvalues are treated as seconds.Source:show|on GitHub# File activesupport/lib/active_support/duration.rb, line 282def-(other)self+(-other)end/(other)LinkDivides thisDurationby aNumericand returns a newDuration.Source:show|on GitHub# File activesupport/lib/active_support/duration.rb, line 298def/(other)ifScalar===otherDuration.new(value/other.value,@parts.transform_values{|number|number/other.value},@variable)elsifDuration===othervalue/other.valueelsifNumeric===otherDuration.new(value/other,@parts.transform_values{|number|number/other},@variable)elseraise_type_error(other)endend<=>(other)LinkCompares oneDurationwith another or aNumericto thisDuration.Numericvalues are treated as seconds.Source:show|on GitHub# File activesupport/lib/active_support/duration.rb, line 258def<=>(other)ifDuration===othervalue<=>other.valueelsifNumeric===othervalue<=>otherendend==(other)LinkReturnstrueifotheris also aDurationinstance with the samevalue, or ifother == value.Source:show|on GitHub# File activesupport/lib/active_support/duration.rb, line 341def==(other)ifDuration===otherother.value==valueelseother==valueendendafter(time = ::Time.current)LinkAlias for:sinceago(time = ::Time.current)LinkCalculates a newTimeorDatethat is as far in the past as thisDurationrepresents.Also aliased as:until,beforeSource:show|on GitHub# File activesupport/lib/active_support/duration.rb, line 444defago(time=::Time.current)sum(-1,time)endbefore(time = ::Time.current)LinkAlias for:agoeql?(other)LinkReturnstrueifotheris also aDurationinstance, which has the same parts as this one.Source:show|on GitHub# File activesupport/lib/active_support/duration.rb, line 426defeql?(other)Duration===other&&other.value.eql?(value)endfrom_now(time = ::Time.current)LinkAlias for:sincehash()LinkSource:show|on GitHub# File activesupport/lib/active_support/duration.rb, line 430defhash@value.hashendin_days()LinkReturns the amount of days a duration covers as a float12.hours.in_days # => 0.5Source:show|on GitHub# File activesupport/lib/active_support/duration.rb, line 399defin_daysin_seconds/SECONDS_PER_DAY.to_fendin_hours()LinkReturns the amount of hours a duration covers as a float1.day.in_hours # => 24.0Source:show|on GitHub# File activesupport/lib/active_support/duration.rb, line 392defin_hoursin_seconds/SECONDS_PER_HOUR.to_fendin_minutes()LinkReturns the amount of minutes a duration covers as a float1.day.in_minutes # => 1440.0Source:show|on GitHub# File activesupport/lib/active_support/duration.rb, line 385defin_minutesin_seconds/SECONDS_PER_MINUTE.to_fendin_months()LinkReturns the amount of months a duration covers as a float9.weeks.in_months # => 2.07Source:show|on GitHub# File activesupport/lib/active_support/duration.rb, line 413defin_monthsin_seconds/SECONDS_PER_MONTH.to_fendin_seconds()LinkAlias for:to_iin_weeks()LinkReturns the amount of weeks a duration covers as a float2.months.in_weeks # => 8.696Source:show|on GitHub# File activesupport/lib/active_support/duration.rb, line 406defin_weeksin_seconds/SECONDS_PER_WEEK.to_fendin_years()LinkReturns the amount of years a duration covers as a float30.days.in_years # => 0.082Source:show|on GitHub# File activesupport/lib/active_support/duration.rb, line 420defin_yearsin_seconds/SECONDS_PER_YEAR.to_fendiso8601(precision: nil)LinkBuild ISO 8601Durationstring for this duration. Theprecisionparameter can be used to limit secondsâ precision of duration.Source:show|on GitHub# File activesupport/lib/active_support/duration.rb, line 473defiso8601(precision:nil)ISO8601Serializer.new(self,precision:precision).serializeendparts()LinkReturns a copy of the parts hash that defines the duration.5.minutes.parts # => {:minutes=>5}
3.years.parts # => {:years=>3}Source:show|on GitHub# File activesupport/lib/active_support/duration.rb, line 241defparts@parts.dupendsince(time = ::Time.current)LinkCalculates a newTimeorDatethat is as far in the future as thisDurationrepresents.Also aliased as:from_now,afterSource:show|on GitHub# File activesupport/lib/active_support/duration.rb, line 436defsince(time=::Time.current)sum(1,time)endto_i()LinkReturns the number of seconds that thisDurationrepresents.1.minute.to_i   # => 60
1.hour.to_i     # => 3600
1.day.to_i      # => 86400Note that this conversion makes some assumptions about the duration of some periods, e.g. months are always 1/12 of year and years are 365.2425 days:# equivalent to (1.year / 12).to_i
1.month.to_i    # => 2629746

# equivalent to 365.2425.days.to_i
1.year.to_i     # => 31556952In such cases, Rubyâs coreDateandTimeshould be used for precision date and time arithmetic.Also aliased as:in_secondsSource:show|on GitHub# File activesupport/lib/active_support/duration.rb, line 377defto_i@value.to_iendto_s()LinkReturns the amount of seconds a duration covers as a string. For more information checkto_imethod.1.day.to_s # => "86400"Source:show|on GitHub# File activesupport/lib/active_support/duration.rb, line 353defto_s@value.to_senduntil(time = ::Time.current)LinkAlias for:ago