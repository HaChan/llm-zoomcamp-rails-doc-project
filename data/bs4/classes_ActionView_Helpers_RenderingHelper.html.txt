Action View Rendering HelpersImplements methods that allow rendering from a view context. In order to use this module, all you need is to implement view_renderer that returns anActionView::Rendererobject.Methods#_layout_forRrenderInstance Public methods_layout_for(*args, &block)LinkOverrides_layout_forin the context object so it supports the case a block is passed to a partial. Returns the contents that are yielded to a layout, given a name or a block.You can think of a layout as a method that is called with a block. If the user callsyield :some_name, the block, by default, returnscontent_for(:some_name). If the user calls simplyyield, the default block returnscontent_for(:layout).The user can override this default by passing a block to the layout:# The template
<%= render layout: "my_layout" do %>
  Content
<% end %>

# The layout
<html>
  <%= yield %>
</html>In this case, instead of the default block, which would returncontent_for(:layout), this method returns the block that was passed in torender :layout, and the response would be<html>
  Content
</html>Finally, the block can take block arguments, which can be passed in byyield:# The template
<%= render layout: "my_layout" do |customer| %>
  Hello <%= customer.name %>
<% end %>

# The layout
<html>
  <%= yield Struct.new(:name).new("David") %>
</html>In this case, the layout would receive the block passed intorender :layout, and the struct specified would be passed into the block as an argument. The result would be<html>
  Hello David
</html>Source:show|on GitHub# File actionview/lib/action_view/helpers/rendering_helper.rb, line 97def_layout_for(*args,&block)name=args.firstifblock&&!name.is_a?(Symbol)capture(*args,&block)elsesuperendendrender(options = {}, locals = {}, &block)LinkReturns the result of a render thatâs dictated by the options hash. The primary options are::partial- SeeActionView::PartialRenderer.:file- Renders an explicit template file (this used to be the old default), add:localsto pass in those.:inline- Renders an inline template similar to how itâs done in the controller.:plain- Renders the text passed in out. Setting the content type astext/plain.:html- Renders the HTML safe string passed in out, otherwise performs HTML escape on the string first. Setting the content type astext/html.:body- Renders the text passed in, and inherits the content type oftext/plainfromActionDispatch::Responseobject.If nooptionshash is passed or if:updateis specified, then:If an object responding torender_inis passed,render_inis called on the object, passing in the current view context.Otherwise, a partial is rendered using the second parameter as the locals hash.Source:show|on GitHub# File actionview/lib/action_view/helpers/rendering_helper.rb, line 30defrender(options= {},locals= {},&block)caseoptionswhenHashin_rendering_context(options)do|renderer|ifblock_given?view_renderer.render_partial(self,options.merge(partial:options[:layout]),&block)elseview_renderer.render(self,options)endendelseifoptions.respond_to?(:render_in)options.render_in(self,&block)elseview_renderer.render_partial(self,partial:options,locals:locals,&block)endendend