MethodsBbatch_sizeDdelete_all,destroy_allEeach,each_recordTtouch_allUupdate_allIncluded ModulesEnumerableAttributes[R]finishThe primary key value at which theBatchEnumeratorends, inclusive of the value.[R]relationThe relation from which theBatchEnumeratoryields batches.[R]startThe primary key value from which theBatchEnumeratorstarts, inclusive of the value.Instance Public methodsbatch_size()LinkThe size of the batches yielded by theBatchEnumerator.Source:show|on GitHub# File activerecord/lib/active_record/relation/batches/batch_enumerator.rb, line 27defbatch_size@ofenddelete_all()LinkDeletes records in batches. Returns the total number of rows affected.Person.in_batches.delete_allSeeRelation#delete_allfor details of how each batch is deleted.Source:show|on GitHub# File activerecord/lib/active_record/relation/batches/batch_enumerator.rb, line 65defdelete_allsum(&:delete_all)enddestroy_all()LinkDestroys records in batches. Returns the total number of rows affected.Person.where("age < 10").in_batches.destroy_allSeeRelation#destroy_allfor details of how each batch is destroyed.Source:show|on GitHub# File activerecord/lib/active_record/relation/batches/batch_enumerator.rb, line 96defdestroy_allsumdo|relation|relation.destroy_all.count(&:destroyed?)endendeach(&block)LinkYields anActiveRecord::Relationobject for each batch of records.Person.in_batches.each do |relation|
  relation.update_all(awesome: true)
endSource:show|on GitHub# File activerecord/lib/active_record/relation/batches/batch_enumerator.rb, line 107defeach(&block)enum=@relation.to_enum(:in_batches,of:@of,start:@start,finish:@finish,load:false,order:@order,use_ranges:@use_ranges)returnenum.each(&block)ifblock_given?enumendeach_record(&block)LinkLooping through a collection of records from the database (using theallmethod, for example) is very inefficient since it will try to instantiate all the objects at once.In that case, batch processing methods allow you to work with the records in batches, thereby greatly reducing memory consumption.Person.in_batches.each_record do |person|
  person.do_awesome_stuff
end

Person.where("age > 21").in_batches(of: 10).each_record do |person|
  person.party_all_night!
endIf you do not provide a block toeach_record, it will return an Enumerator for chaining with other methods:Person.in_batches.each_record.with_index do |person, index|
  person.award_trophy(index + 1)
endSource:show|on GitHub# File activerecord/lib/active_record/relation/batches/batch_enumerator.rb, line 52defeach_record(&block)returnto_enum(:each_record)unlessblock_given?@relation.to_enum(:in_batches,of:@of,start:@start,finish:@finish,load:true,order:@order).eachdo|relation|relation.records.each(&block)endendtouch_all(...)LinkTouches records in batches. Returns the total number of rows affected.Person.in_batches.touch_allSeeRelation#touch_allfor details of how each batch is touched.Source:show|on GitHub# File activerecord/lib/active_record/relation/batches/batch_enumerator.rb, line 85deftouch_all(...)sumdo|relation|relation.touch_all(...)endendupdate_all(updates)LinkUpdates records in batches. Returns the total number of rows affected.Person.in_batches.update_all("age = age + 1")SeeRelation#update_allfor details of how each batch is updated.Source:show|on GitHub# File activerecord/lib/active_record/relation/batches/batch_enumerator.rb, line 74defupdate_all(updates)sumdo|relation|relation.update_all(updates)endend