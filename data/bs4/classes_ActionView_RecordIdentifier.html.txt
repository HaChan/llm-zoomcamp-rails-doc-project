Action View Record IdentifierRecordIdentifierencapsulates methods used by variousActionViewhelpers to associate records with DOM elements.Consider for example the following code that form of post:<%= form_for(post) do |f| %>
  <%= f.text_field :body %>
<% end %>Whenpostis a new, unsavedActiveRecord::Baseinstance, the resulting HTML is:<form class="new_post" id="new_post" action="/posts" accept-charset="UTF-8" method="post">
  <input type="text" name="post[body]" id="post_body" />
</form>Whenpostis a persistedActiveRecord::Baseinstance, the resulting HTML is:<form class="edit_post" id="edit_post_42" action="/posts/42" accept-charset="UTF-8" method="post">
  <input type="text" value="What a wonderful world!" name="post[body]" id="post_body" />
</form>In both cases, theidandclassof the wrapping DOM element are automatically generated, following naming conventions encapsulated by theRecordIdentifiermethodsdom_idanddom_class:dom_id(Post)             # => "new_post"
dom_class(Post)          # => "post"
dom_id(Post.new)         # => "new_post"
dom_class(Post.new)      # => "post"
dom_id(Post.find 42)     # => "post_42"
dom_class(Post.find 42)  # => "post"Note that these methods do not strictly requirePostto be a subclass ofActiveRecord::Base. AnyPostclass will work as long as its instances respond toto_keyandmodel_name, given thatmodel_nameresponds toparam_key. For instance:class Post
  attr_accessor :to_key

  def model_name
    OpenStruct.new param_key: 'post'
  end

  def self.find(id)
    new.tap { |post| post.to_key = [id] }
  end
endMethodsDdom_class,dom_idRrecord_key_for_dom_idConstantsJOIN="_"NEW="new"Instance Public methodsdom_class(record_or_class, prefix = nil)LinkThe DOM class convention is to use the singular form of an object or class.dom_class(post)   # => "post"
dom_class(Person) # => "person"If you need to address multiple instances of the same class in the same view, you can prefix thedom_class:dom_class(post, :edit)   # => "edit_post"
dom_class(Person, :edit) # => "edit_person"Source:show|on GitHub# File actionview/lib/action_view/record_identifier.rb, line 78defdom_class(record_or_class,prefix=nil)singular=model_name_from_record_or_class(record_or_class).param_keyprefix?"#{prefix}#{JOIN}#{singular}":singularenddom_id(record_or_class, prefix = nil)LinkThe DOM id convention is to use the singular form of an object or class with the id following an underscore. If no id is found, prefix with ânew_â instead.dom_id(Post.find(45)) # => "post_45"
dom_id(Post)          # => "new_post"If you need to address multiple instances of the same class in the same view, you can prefix thedom_id:dom_id(Post.find(45), :edit) # => "edit_post_45"
dom_id(Post, :custom)        # => "custom_post"Source:show|on GitHub# File actionview/lib/action_view/record_identifier.rb, line 93defdom_id(record_or_class,prefix=nil)raiseArgumentError,"dom_id must be passed a record_or_class as the first argument, you passed #{record_or_class.inspect}"unlessrecord_or_classrecord_id=record_key_for_dom_id(record_or_class)unlessrecord_or_class.is_a?(Class)ifrecord_id"#{dom_class(record_or_class, prefix)}#{JOIN}#{record_id}"elsedom_class(record_or_class,prefix||NEW)endendInstance Private methodsrecord_key_for_dom_id(record)LinkReturns a string representation of the key attribute(s) that is suitable for use in an HTML DOM id. This can be overwritten to customize the default generated string representation if desired. If you need to read back a key from adom_idin order to query for the underlying database record, you should write a helper like âperson_record_from_dom_idâ that will extract the key either based on the default implementation (which just joins all key attributes with â_â) or on your own overwritten version of the method. By default, this implementation passes the key string through a method that replaces all characters that are invalid inside DOM ids, with valid ones. You need to make sure yourself that your dom ids are valid, in case you override this method.Source:show|on GitHub# File actionview/lib/action_view/record_identifier.rb, line 113defrecord_key_for_dom_id(record)# :doc:key=convert_to_model(record).to_keykey&&key.all??key.join(JOIN):nilend