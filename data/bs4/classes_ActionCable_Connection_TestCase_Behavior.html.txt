NamespaceMODULEActionCable::Connection::TestCase::Behavior::ClassMethodsMethodsCconnect,cookiesDdisconnectIncluded ModulesActiveSupport::Testing::ConstantLookupActionCable::Connection::AssertionsConstantsDEFAULT_PATH="/cable"Attributes[R]connectionInstance Public methodsconnect(path = ActionCable.server.config.mount_path, **request_params)LinkPerforms connection attempt to exertconnecton the connection under test.Accepts request path as the first argument and the following request options:params â URL parameters (Hash)headers â request headers (Hash)session â session data (Hash)env â additional Rack env configuration (Hash)Source:show|on GitHub# File actioncable/lib/action_cable/connection/test_case.rb, line 195defconnect(path=ActionCable.server.config.mount_path,**request_params)path||=DEFAULT_PATHconnection=self.class.connection_class.allocateconnection.singleton_class.include(TestConnection)connection.send(:initialize,build_test_request(path,**request_params))connection.connectifconnection.respond_to?(:connect)# Only set instance variable if connected successfully@connection=connectionendcookies()LinkSource:show|on GitHub# File actioncable/lib/action_cable/connection/test_case.rb, line 215defcookies@cookie_jar||=TestCookieJar.newenddisconnect()LinkExertdisconnecton the connection under test.Source:show|on GitHub# File actioncable/lib/action_cable/connection/test_case.rb, line 208defdisconnectraise"Must be connected!"ifconnection.nil?connection.disconnectifconnection.respond_to?(:disconnect)@connection=nilend