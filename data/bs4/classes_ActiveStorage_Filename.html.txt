Active Storage FilenameEncapsulates a string representing a filename to provide convenient access to parts of it and sanitization. AFilenameinstance is returned byActiveStorage::Blob#filename, and is comparable so it can be used for sorting.Methods#<=>Aas_jsonBbaseEextension,extension_with_delimiter,extension_without_delimiterNnewSsanitizedTto_sWwrapIncluded ModulesComparableClass Public methodsnew(filename)LinkSource:show|on GitHub# File activestorage/app/models/active_storage/filename.rb, line 18definitialize(filename)@filename=filenameendwrap(filename)LinkReturns aFilenameinstance based on the given filename. If the filename is aFilename, it is returned unmodified. If it is aString, it is passed toActiveStorage::Filename.new.Source:show|on GitHub# File activestorage/app/models/active_storage/filename.rb, line 13defwrap(filename)filename.kind_of?(self)?filename:new(filename)endInstance Public methods<=>(other)LinkSource:show|on GitHub# File activestorage/app/models/active_storage/filename.rb, line 72def<=>(other)to_s.downcase<=>other.to_s.downcaseendas_json(*)LinkSource:show|on GitHub# File activestorage/app/models/active_storage/filename.rb, line 68defas_json(*)to_sendbase()LinkReturns the part of the filename preceding any extension.ActiveStorage::Filename.new("racecar.jpg").base # => "racecar"
ActiveStorage::Filename.new("racecar").base     # => "racecar"
ActiveStorage::Filename.new(".gitignore").base  # => ".gitignore"Source:show|on GitHub# File activestorage/app/models/active_storage/filename.rb, line 27defbaseFile.basename@filename,extension_with_delimiterendextension()LinkAlias for:extension_without_delimiterextension_with_delimiter()LinkReturns the extension of the filename (i.e. the substring following the last dot, excluding a dot at the beginning) with the dot that precedes it. If the filename has no extension, an empty string is returned.ActiveStorage::Filename.new("racecar.jpg").extension_with_delimiter # => ".jpg"
ActiveStorage::Filename.new("racecar").extension_with_delimiter     # => ""
ActiveStorage::Filename.new(".gitignore").extension_with_delimiter  # => ""Source:show|on GitHub# File activestorage/app/models/active_storage/filename.rb, line 37defextension_with_delimiterFile.extname@filenameendextension_without_delimiter()LinkReturns the extension of the filename (i.e. the substring following the last dot, excluding a dot at the beginning). If the filename has no extension, an empty string is returned.ActiveStorage::Filename.new("racecar.jpg").extension_without_delimiter # => "jpg"
ActiveStorage::Filename.new("racecar").extension_without_delimiter     # => ""
ActiveStorage::Filename.new(".gitignore").extension_without_delimiter  # => ""Also aliased as:extensionSource:show|on GitHub# File activestorage/app/models/active_storage/filename.rb, line 47defextension_without_delimiterextension_with_delimiter.from(1).to_sendsanitized()LinkReturns the sanitized filename.ActiveStorage::Filename.new("foo:bar.jpg").sanitized # => "foo-bar.jpg"
ActiveStorage::Filename.new("foo/bar.jpg").sanitized # => "foo-bar.jpg"Characters considered unsafe for storage (e.g. , $, and the RTL override character) are replaced with a dash.Source:show|on GitHub# File activestorage/app/models/active_storage/filename.rb, line 59defsanitized@filename.encode(Encoding::UTF_8,invalid::replace,undef::replace,replace:"ï¿½").strip.tr("\u{202E}%$|:;/\t\r\n\\","-")endto_s()LinkReturns the sanitized version of the filename.Source:show|on GitHub# File activestorage/app/models/active_storage/filename.rb, line 64defto_ssanitized.to_send