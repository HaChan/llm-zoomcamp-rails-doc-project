Active Support Time ZoneTheTimeZoneclass serves as a wrapper aroundTZInfo::Timezoneinstances. It allows us to do the following:Limit the set of zones provided by TZInfo to a meaningful subset of 134 zones.Retrieve and display zones with a friendlier name (e.g., âEasternTime(US & Canada)â instead of âAmerica/New_Yorkâ).Lazily loadTZInfo::Timezoneinstances only when theyâre needed.CreateActiveSupport::TimeWithZoneinstances via TimeZoneâslocal,parse,at, andnowmethods.If you setconfig.time_zonein the Rails Application, you can access thisTimeZoneobject viaTime.zone:# application.rb:
class Application < Rails::Application
  config.time_zone = 'Eastern Time (US & Canada)'
end

Time.zone      # => #<ActiveSupport::TimeZone:0x514834...>
Time.zone.name # => "Eastern Time (US & Canada)"
Time.zone.now  # => Sun, 18 May 2008 14:30:44 EDT -04:00Methods#<=>,=~,[]Aall,atCcountry_zones,createFfind_tzinfo,formatted_offsetIiso8601Llocal,local_to_utcMmatch?Nnew,nowPparse,period_for_local,period_for_utcRrfc3339Sseconds_to_utc_offset,strptimeTto_s,today,tomorrowUus_zones,utc_offset,utc_to_localYyesterdayIncluded ModulesComparableConstantsMAPPING={
"International Date Line West" => "Etc/GMT+12",
"Midway Island"                => "Pacific/Midway",
"American Samoa"               => "Pacific/Pago_Pago",
"Hawaii"                       => "Pacific/Honolulu",
"Alaska"                       => "America/Juneau",
"Pacific Time (US & Canada)"   => "America/Los_Angeles",
"Tijuana"                      => "America/Tijuana",
"Mountain Time (US & Canada)"  => "America/Denver",
"Arizona"                      => "America/Phoenix",
"Chihuahua"                    => "America/Chihuahua",
"Mazatlan"                     => "America/Mazatlan",
"Central Time (US & Canada)"   => "America/Chicago",
"Saskatchewan"                 => "America/Regina",
"Guadalajara"                  => "America/Mexico_City",
"Mexico City"                  => "America/Mexico_City",
"Monterrey"                    => "America/Monterrey",
"Central America"              => "America/Guatemala",
"Eastern Time (US & Canada)"   => "America/New_York",
"Indiana (East)"               => "America/Indiana/Indianapolis",
"Bogota"                       => "America/Bogota",
"Lima"                         => "America/Lima",
"Quito"                        => "America/Lima",
"Atlantic Time (Canada)"       => "America/Halifax",
"Caracas"                      => "America/Caracas",
"La Paz"                       => "America/La_Paz",
"Santiago"                     => "America/Santiago",
"Newfoundland"                 => "America/St_Johns",
"Brasilia"                     => "America/Sao_Paulo",
"Buenos Aires"                 => "America/Argentina/Buenos_Aires",
"Montevideo"                   => "America/Montevideo",
"Georgetown"                   => "America/Guyana",
"Puerto Rico"                  => "America/Puerto_Rico",
"Greenland"                    => "America/Godthab",
"Mid-Atlantic"                 => "Atlantic/South_Georgia",
"Azores"                       => "Atlantic/Azores",
"Cape Verde Is."               => "Atlantic/Cape_Verde",
"Dublin"                       => "Europe/Dublin",
"Edinburgh"                    => "Europe/London",
"Lisbon"                       => "Europe/Lisbon",
"London"                       => "Europe/London",
"Casablanca"                   => "Africa/Casablanca",
"Monrovia"                     => "Africa/Monrovia",
"UTC"                          => "Etc/UTC",
"Belgrade"                     => "Europe/Belgrade",
"Bratislava"                   => "Europe/Bratislava",
"Budapest"                     => "Europe/Budapest",
"Ljubljana"                    => "Europe/Ljubljana",
"Prague"                       => "Europe/Prague",
"Sarajevo"                     => "Europe/Sarajevo",
"Skopje"                       => "Europe/Skopje",
"Warsaw"                       => "Europe/Warsaw",
"Zagreb"                       => "Europe/Zagreb",
"Brussels"                     => "Europe/Brussels",
"Copenhagen"                   => "Europe/Copenhagen",
"Madrid"                       => "Europe/Madrid",
"Paris"                        => "Europe/Paris",
"Amsterdam"                    => "Europe/Amsterdam",
"Berlin"                       => "Europe/Berlin",
"Bern"                         => "Europe/Zurich",
"Zurich"                       => "Europe/Zurich",
"Rome"                         => "Europe/Rome",
"Stockholm"                    => "Europe/Stockholm",
"Vienna"                       => "Europe/Vienna",
"West Central Africa"          => "Africa/Algiers",
"Bucharest"                    => "Europe/Bucharest",
"Cairo"                        => "Africa/Cairo",
"Helsinki"                     => "Europe/Helsinki",
"Kyiv"                         => "Europe/Kiev",
"Riga"                         => "Europe/Riga",
"Sofia"                        => "Europe/Sofia",
"Tallinn"                      => "Europe/Tallinn",
"Vilnius"                      => "Europe/Vilnius",
"Athens"                       => "Europe/Athens",
"Istanbul"                     => "Europe/Istanbul",
"Minsk"                        => "Europe/Minsk",
"Jerusalem"                    => "Asia/Jerusalem",
"Harare"                       => "Africa/Harare",
"Pretoria"                     => "Africa/Johannesburg",
"Kaliningrad"                  => "Europe/Kaliningrad",
"Moscow"                       => "Europe/Moscow",
"St. Petersburg"               => "Europe/Moscow",
"Volgograd"                    => "Europe/Volgograd",
"Samara"                       => "Europe/Samara",
"Kuwait"                       => "Asia/Kuwait",
"Riyadh"                       => "Asia/Riyadh",
"Nairobi"                      => "Africa/Nairobi",
"Baghdad"                      => "Asia/Baghdad",
"Tehran"                       => "Asia/Tehran",
"Abu Dhabi"                    => "Asia/Muscat",
"Muscat"                       => "Asia/Muscat",
"Baku"                         => "Asia/Baku",
"Tbilisi"                      => "Asia/Tbilisi",
"Yerevan"                      => "Asia/Yerevan",
"Kabul"                        => "Asia/Kabul",
"Ekaterinburg"                 => "Asia/Yekaterinburg",
"Islamabad"                    => "Asia/Karachi",
"Karachi"                      => "Asia/Karachi",
"Tashkent"                     => "Asia/Tashkent",
"Chennai"                      => "Asia/Kolkata",
"Kolkata"                      => "Asia/Kolkata",
"Mumbai"                       => "Asia/Kolkata",
"New Delhi"                    => "Asia/Kolkata",
"Kathmandu"                    => "Asia/Kathmandu",
"Dhaka"                        => "Asia/Dhaka",
"Sri Jayawardenepura"          => "Asia/Colombo",
"Almaty"                       => "Asia/Almaty",
"Astana"                       => "Asia/Almaty",
"Novosibirsk"                  => "Asia/Novosibirsk",
"Rangoon"                      => "Asia/Rangoon",
"Bangkok"                      => "Asia/Bangkok",
"Hanoi"                        => "Asia/Bangkok",
"Jakarta"                      => "Asia/Jakarta",
"Krasnoyarsk"                  => "Asia/Krasnoyarsk",
"Beijing"                      => "Asia/Shanghai",
"Chongqing"                    => "Asia/Chongqing",
"Hong Kong"                    => "Asia/Hong_Kong",
"Urumqi"                       => "Asia/Urumqi",
"Kuala Lumpur"                 => "Asia/Kuala_Lumpur",
"Singapore"                    => "Asia/Singapore",
"Taipei"                       => "Asia/Taipei",
"Perth"                        => "Australia/Perth",
"Irkutsk"                      => "Asia/Irkutsk",
"Ulaanbaatar"                  => "Asia/Ulaanbaatar",
"Seoul"                        => "Asia/Seoul",
"Osaka"                        => "Asia/Tokyo",
"Sapporo"                      => "Asia/Tokyo",
"Tokyo"                        => "Asia/Tokyo",
"Yakutsk"                      => "Asia/Yakutsk",
"Darwin"                       => "Australia/Darwin",
"Adelaide"                     => "Australia/Adelaide",
"Canberra"                     => "Australia/Canberra",
"Melbourne"                    => "Australia/Melbourne",
"Sydney"                       => "Australia/Sydney",
"Brisbane"                     => "Australia/Brisbane",
"Hobart"                       => "Australia/Hobart",
"Vladivostok"                  => "Asia/Vladivostok",
"Guam"                         => "Pacific/Guam",
"Port Moresby"                 => "Pacific/Port_Moresby",
"Magadan"                      => "Asia/Magadan",
"Srednekolymsk"                => "Asia/Srednekolymsk",
"Solomon Is."                  => "Pacific/Guadalcanal",
"New Caledonia"                => "Pacific/Noumea",
"Fiji"                         => "Pacific/Fiji",
"Kamchatka"                    => "Asia/Kamchatka",
"Marshall Is."                 => "Pacific/Majuro",
"Auckland"                     => "Pacific/Auckland",
"Wellington"                   => "Pacific/Auckland",
"Nuku'alofa"                   => "Pacific/Tongatapu",
"Tokelau Is."                  => "Pacific/Fakaofo",
"Chatham Is."                  => "Pacific/Chatham",
"Samoa"                        => "Pacific/Apia"
}Keys are RailsTimeZonenames, values are TZInfo identifiers.Attributes[R]name[R]tzinfoClass Public methods[](arg)LinkLocate a specific time zone object. If the argument is a string, it is interpreted to mean the name of the timezone to locate. If it is a numeric value it is either the hour offset, or the second offset, of the timezone to find. (The first one with that offset will be returned.) Returnsnilif no such time zone is known to the system.Source:show|on GitHub# File activesupport/lib/active_support/values/time_zone.rb, line 234def[](arg)caseargwhenselfargwhenStringbegin@lazy_zones_map[arg]||=create(arg)rescueTZInfo::InvalidTimezoneIdentifiernilendwhenTZInfo::Timezone@lazy_zones_map[arg.name]||=create(arg.name,nil,arg)whenNumeric,ActiveSupport::Durationarg*=3600ifarg.abs<=13all.find{|z|z.utc_offset==arg.to_i}elseraiseArgumentError,"invalid argument to TimeZone[]: #{arg.inspect}"endendall()LinkReturns an array of allTimeZoneobjects. There are multipleTimeZoneobjects per time zone, in many cases, to make it easier for users to find their own time zone.Source:show|on GitHub# File activesupport/lib/active_support/values/time_zone.rb, line 225defall@zones||=zones_map.values.sortendcountry_zones(country_code)LinkA convenience method for returning a collection ofTimeZoneobjects for time zones in the country specified by its ISO 3166-1 Alpha2 code.Source:show|on GitHub# File activesupport/lib/active_support/values/time_zone.rb, line 262defcountry_zones(country_code)code=country_code.to_s.upcase@country_zones[code]||=load_country_zones(code)endcreate(name, utc_offset = nil, tzinfo = nil)LinkCreate a newTimeZoneobject with the given name and offset. The offset is the number of seconds that this time zone is offset from UTC (GMT). Seconds were chosen as the offset unit because that is the unit that Ruby uses to represent time zone offsets (see Time#utc_offset).Source:on GitHub# File activesupport/lib/active_support/values/time_zone.rb, line 302find_tzinfo(name)LinkSource:show|on GitHub# File activesupport/lib/active_support/values/time_zone.rb, line 207deffind_tzinfo(name)TZInfo::Timezone.get(MAPPING[name]||name)endnew(name)LinkReturns aTimeZoneinstance with the given name, ornilif no suchTimeZoneinstance exists. (This exists to support the use of this class with thecomposed_ofmacro.)Source:show|on GitHub# File activesupport/lib/active_support/values/time_zone.rb, line 218defnew(name)self[name]endseconds_to_utc_offset(seconds, colon = true)LinkAssumes self represents an offset from UTC in seconds (as returned from Time#utc_offset) and turns this into an +HH:MM formatted string.ActiveSupport::TimeZone.seconds_to_utc_offset(-21_600) # => "-06:00"Source:show|on GitHub# File activesupport/lib/active_support/values/time_zone.rb, line 199defseconds_to_utc_offset(seconds,colon=true)format=colon?UTC_OFFSET_WITH_COLON:UTC_OFFSET_WITHOUT_COLONsign= (seconds<0?"-":"+")hours=seconds.abs/3600minutes= (seconds.abs%3600)/60format%[sign,hours,minutes]endus_zones()LinkA convenience method for returning a collection ofTimeZoneobjects for time zones in the USA.Source:show|on GitHub# File activesupport/lib/active_support/values/time_zone.rb, line 256defus_zonescountry_zones(:us)endInstance Public methods<=>(zone)LinkCompare this time zone to the parameter. The two are compared first on their offsets, and then by name.Source:show|on GitHub# File activesupport/lib/active_support/values/time_zone.rb, line 335def<=>(zone)returnunlesszone.respond_to?:utc_offsetresult= (utc_offset<=>zone.utc_offset)result= (name<=>zone.name)ifresult==0resultend=~(re)LinkComparenameand TZInfo identifier to a supplied regexp, returningtrueif a match is found.Source:show|on GitHub# File activesupport/lib/active_support/values/time_zone.rb, line 344def=~(re)re===name||re===MAPPING[name]endat(*args)LinkMethodfor creating newActiveSupport::TimeWithZoneinstance in time zone ofselffrom number of seconds since the Unix epoch.Time.zone = 'Hawaii'        # => "Hawaii"
Time.utc(2000).to_f         # => 946684800.0
Time.zone.at(946684800.0)   # => Fri, 31 Dec 1999 14:00:00 HST -10:00A second argument can be supplied to specify sub-second precision.Time.zone = 'Hawaii'                # => "Hawaii"
Time.at(946684800, 123456.789).nsec # => 123456789Source:show|on GitHub# File activesupport/lib/active_support/values/time_zone.rb, line 381defat(*args)Time.at(*args).utc.in_time_zone(self)endformatted_offset(colon = true, alternate_utc_string = nil)LinkReturns a formatted string of the offset from UTC, or an alternative string if the time zone is already UTC.zone = ActiveSupport::TimeZone['Central Time (US & Canada)']
zone.formatted_offset        # => "-06:00"
zone.formatted_offset(false) # => "-0600"Source:show|on GitHub# File activesupport/lib/active_support/values/time_zone.rb, line 329defformatted_offset(colon=true,alternate_utc_string=nil)utc_offset==0&&alternate_utc_string||self.class.seconds_to_utc_offset(utc_offset,colon)endiso8601(str)LinkMethodfor creating newActiveSupport::TimeWithZoneinstance in time zone ofselffrom an ISO 8601 string.Time.zone = 'Hawaii'                     # => "Hawaii"
Time.zone.iso8601('1999-12-31T14:00:00') # => Fri, 31 Dec 1999 14:00:00 HST -10:00If the time components are missing then they will be set to zero.Time.zone = 'Hawaii'            # => "Hawaii"
Time.zone.iso8601('1999-12-31') # => Fri, 31 Dec 1999 00:00:00 HST -10:00If the string is invalid then anArgumentErrorwill be raised unlikeparsewhich usually returnsnilwhen given an invalid date string.Source:show|on GitHub# File activesupport/lib/active_support/values/time_zone.rb, line 398defiso8601(str)# Historically `Date._iso8601(nil)` returns `{}`, but in the `date` gem versions `3.2.1`, `3.1.2`, `3.0.2`,# and `2.0.1`, `Date._iso8601(nil)` raises `TypeError` https://github.com/ruby/date/issues/39# Future `date` releases are expected to revert back to the original behavior.raiseArgumentError,"invalid date"ifstr.nil?parts=Date._iso8601(str)year=parts.fetch(:year)ifparts.key?(:yday)ordinal_date=Date.ordinal(year,parts.fetch(:yday))month=ordinal_date.monthday=ordinal_date.dayelsemonth=parts.fetch(:mon)day=parts.fetch(:mday)endtime=Time.new(year,month,day,parts.fetch(:hour,0),parts.fetch(:min,0),parts.fetch(:sec,0)+parts.fetch(:sec_fraction,0),parts.fetch(:offset,0)
  )ifparts[:offset]TimeWithZone.new(time.utc,self)elseTimeWithZone.new(nil,self,time)endrescueDate::Error,KeyErrorraiseArgumentError,"invalid date"endlocal(*args)LinkMethodfor creating newActiveSupport::TimeWithZoneinstance in time zone ofselffrom given values.Time.zone = 'Hawaii'                    # => "Hawaii"
Time.zone.local(2007, 2, 1, 15, 30, 45) # => Thu, 01 Feb 2007 15:30:45 HST -10:00Source:show|on GitHub# File activesupport/lib/active_support/values/time_zone.rb, line 365deflocal(*args)time=Time.utc(*args)ActiveSupport::TimeWithZone.new(nil,self,time)endlocal_to_utc(time, dst = true)LinkAdjust the given time to the simultaneous time in UTC. Returns a Time.utc() instance.Source:show|on GitHub# File activesupport/lib/active_support/values/time_zone.rb, line 553deflocal_to_utc(time,dst=true)tzinfo.local_to_utc(time,dst)endmatch?(re)LinkComparenameand TZInfo identifier to a supplied regexp, returningtrueif a match is found.Source:show|on GitHub# File activesupport/lib/active_support/values/time_zone.rb, line 350defmatch?(re)
  (re==name)||(re==MAPPING[name])||((Regexp===re)&&(re.match?(name)||re.match?(MAPPING[name])))endnow()LinkReturns anActiveSupport::TimeWithZoneinstance representing the current time in the time zone represented byself.Time.zone = 'Hawaii'  # => "Hawaii"
Time.zone.now         # => Wed, 23 Jan 2008 20:24:27 HST -10:00Source:show|on GitHub# File activesupport/lib/active_support/values/time_zone.rb, line 518defnowtime_now.utc.in_time_zone(self)endparse(str, now = now())LinkMethodfor creating newActiveSupport::TimeWithZoneinstance in time zone ofselffrom parsed string.Time.zone = 'Hawaii'                   # => "Hawaii"
Time.zone.parse('1999-12-31 14:00:00') # => Fri, 31 Dec 1999 14:00:00 HST -10:00If upper components are missing from the string, they are supplied fromTimeZone#now:Time.zone.now               # => Fri, 31 Dec 1999 14:00:00 HST -10:00
Time.zone.parse('22:30:00') # => Fri, 31 Dec 1999 22:30:00 HST -10:00However, if the date component is not provided, but any other upper components are supplied, then the day of the month defaults to 1:Time.zone.parse('Mar 2000') # => Wed, 01 Mar 2000 00:00:00 HST -10:00If the string is invalid then anArgumentErrorcould be raised.Source:show|on GitHub# File activesupport/lib/active_support/values/time_zone.rb, line 455defparse(str,now=now())parts_to_time(Date._parse(str,false),now)endperiod_for_local(time, dst = true)LinkAvailable so thatTimeZoneinstances respond likeTZInfo::Timezoneinstances.Source:show|on GitHub# File activesupport/lib/active_support/values/time_zone.rb, line 565defperiod_for_local(time,dst=true)tzinfo.period_for_local(time,dst) {|periods|periods.last}endperiod_for_utc(time)LinkAvailable so thatTimeZoneinstances respond likeTZInfo::Timezoneinstances.Source:show|on GitHub# File activesupport/lib/active_support/values/time_zone.rb, line 559defperiod_for_utc(time)tzinfo.period_for_utc(time)endrfc3339(str)LinkMethodfor creating newActiveSupport::TimeWithZoneinstance in time zone ofselffrom an RFC 3339 string.Time.zone = 'Hawaii'                     # => "Hawaii"
Time.zone.rfc3339('2000-01-01T00:00:00Z') # => Fri, 31 Dec 1999 14:00:00 HST -10:00If the time or zone components are missing then anArgumentErrorwill be raised. This is much stricter than eitherparseoriso8601which allow for missing components.Time.zone = 'Hawaii'            # => "Hawaii"
Time.zone.rfc3339('1999-12-31') # => ArgumentError: invalid dateSource:show|on GitHub# File activesupport/lib/active_support/values/time_zone.rb, line 471defrfc3339(str)parts=Date._rfc3339(str)raiseArgumentError,"invalid date"ifparts.empty?time=Time.new(parts.fetch(:year),parts.fetch(:mon),parts.fetch(:mday),parts.fetch(:hour),parts.fetch(:min),parts.fetch(:sec)+parts.fetch(:sec_fraction,0),parts.fetch(:offset)
  )TimeWithZone.new(time.utc,self)endstrptime(str, format, now = now())LinkParsesstraccording toformatand returns anActiveSupport::TimeWithZone.Assumes thatstris a time in the time zoneself, unlessformatincludes an explicit time zone. (This is the same behavior asparse.) In either case, the returnedTimeWithZonehas the timezone ofself.Time.zone = 'Hawaii'                   # => "Hawaii"
Time.zone.strptime('1999-12-31 14:00:00', '%Y-%m-%d %H:%M:%S') # => Fri, 31 Dec 1999 14:00:00 HST -10:00If upper components are missing from the string, they are supplied fromTimeZone#now:Time.zone.now                              # => Fri, 31 Dec 1999 14:00:00 HST -10:00
Time.zone.strptime('22:30:00', '%H:%M:%S') # => Fri, 31 Dec 1999 22:30:00 HST -10:00However, if the date component is not provided, but any other upper components are supplied, then the day of the month defaults to 1:Time.zone.strptime('Mar 2000', '%b %Y') # => Wed, 01 Mar 2000 00:00:00 HST -10:00Source:show|on GitHub# File activesupport/lib/active_support/values/time_zone.rb, line 509defstrptime(str,format,now=now())parts_to_time(DateTime._strptime(str,format),now)endto_s()LinkReturns a textual representation of this time zone.Source:show|on GitHub# File activesupport/lib/active_support/values/time_zone.rb, line 356defto_s"(GMT#{formatted_offset}) #{name}"endtoday()LinkReturns the current date in this time zone.Source:show|on GitHub# File activesupport/lib/active_support/values/time_zone.rb, line 523deftodaytzinfo.now.to_dateendtomorrow()LinkReturns the next date in this time zone.Source:show|on GitHub# File activesupport/lib/active_support/values/time_zone.rb, line 528deftomorrowtoday+1endutc_offset()LinkReturns the offset of this time zone from UTC in seconds.Source:show|on GitHub# File activesupport/lib/active_support/values/time_zone.rb, line 319defutc_offset@utc_offset||tzinfo&.current_period&.base_utc_offsetendutc_to_local(time)LinkAdjust the given time to the simultaneous time in the time zone represented byself. Returns a local time with the appropriate offset â if you want anActiveSupport::TimeWithZoneinstance, useTime#in_time_zone()instead.As of tzinfo 2,utc_to_localreturns aTimewith a non-zero utc_offset. See theutc_to_local_returns_utc_offset_timesconfig for more info.Source:show|on GitHub# File activesupport/lib/active_support/values/time_zone.rb, line 544defutc_to_local(time)tzinfo.utc_to_local(time).yield_selfdo|t|ActiveSupport.utc_to_local_returns_utc_offset_times?t:Time.utc(t.year,t.month,t.day,t.hour,t.min,t.sec,t.sec_fraction*1_000_000)endendyesterday()LinkReturns the previous date in this time zone.Source:show|on GitHub# File activesupport/lib/active_support/values/time_zone.rb, line 533defyesterdaytoday-1end