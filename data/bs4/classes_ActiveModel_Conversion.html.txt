Active Model ConversionHandles default conversions:to_model,to_key,to_param, and to_partial_path.Letâs take for example this non-persisted object.class ContactMessage
  include ActiveModel::Conversion

  # ContactMessage are never persisted in the DB
  def persisted?
    false
  end
end

cm = ContactMessage.new
cm.to_model == cm  # => true
cm.to_key          # => nil
cm.to_param        # => nil
cm.to_partial_path # => "contact_messages/contact_message"MethodsPparam_delimiterTto_key,to_model,to_param,to_partial_pathClass Public methodsparam_delimiterLinkAccepts a string that will be used as a delimiter of objectâs key values in the âto_param` method.Source:show|on GitHub# File activemodel/lib/active_model/conversion.rb, line 32class_attribute:param_delimiter,instance_reader:false,default:"-"Instance Public methodsto_key()LinkReturns anArrayof all key attributes if any of the attributes is set, whether or not the object is persisted. Returnsnilif there are no key attributes.class Person
  include ActiveModel::Conversion
  attr_accessor :id

  def initialize(id)
    @id = id
  end
end

person = Person.new(1)
person.to_key # => [1]Source:show|on GitHub# File activemodel/lib/active_model/conversion.rb, line 67defto_keykey=respond_to?(:id)&&idkey?Array(key):nilendto_model()LinkIf your object is already designed to implement all of the Active Model you can use the default:to_modelimplementation, which simply returnsself.class Person
  include ActiveModel::Conversion
end

person = Person.new
person.to_model == person # => trueIf your model does not act like an Active Model object, then you should define:to_modelyourself returning a proxy object that wraps your object with Active Model compliant methods.Source:show|on GitHub# File activemodel/lib/active_model/conversion.rb, line 49defto_modelselfendto_param()LinkReturns astringrepresenting the objectâs key suitable for use in URLs, ornilifpersisted?isfalse.class Person
  include ActiveModel::Conversion
  attr_accessor :id

  def initialize(id)
    @id = id
  end

  def persisted?
    true
  end
end

person = Person.new(1)
person.to_param # => "1"Source:show|on GitHub# File activemodel/lib/active_model/conversion.rb, line 90defto_param(persisted?&&(key=to_key)&&key.all?)?key.join(self.class.param_delimiter):nilendto_partial_path()LinkReturns astringidentifying the path associated with the object. ActionPack uses this to find a suitable partial to represent the object.class Person
  include ActiveModel::Conversion
end

person = Person.new
person.to_partial_path # => "people/person"Source:show|on GitHub# File activemodel/lib/active_model/conversion.rb, line 103defto_partial_pathself.class._to_partial_pathend