Active Record Connection Adapters QuotingMethodsQquote,quote_column_name,quote_string,quote_table_name,quote_table_name_for_assignment,quoted_date,quoted_false,quoted_trueTtype_castUunquoted_false,unquoted_trueInstance Public methodsquote(value)LinkQuotes the column value to help preventSQL injection attacks.Source:show|on GitHub# File activerecord/lib/active_record/connection_adapters/abstract/quoting.rb, line 73defquote(value)casevaluewhenString,Symbol,ActiveSupport::Multibyte::Chars"'#{quote_string(value.to_s)}'"whentruethenquoted_truewhenfalsethenquoted_falsewhennilthen"NULL"# BigDecimals need to be put in a non-normalized form and quoted.whenBigDecimalthenvalue.to_s("F")whenNumericthenvalue.to_swhenType::Binary::Datathenquoted_binary(value)whenType::Time::Valuethen"'#{quoted_time(value)}'"whenDate,Timethen"'#{quoted_date(value)}'"whenClassthen"'#{value}'"elseraiseTypeError,"can't quote #{value.class.name}"endendquote_column_name(column_name)LinkQuotes the column name.Source:show|on GitHub# File activerecord/lib/active_record/connection_adapters/abstract/quoting.rb, line 136defquote_column_name(column_name)self.class.quote_column_name(column_name)endquote_string(s)LinkQuotes a string, escaping any â (single quote) and \ (backslash) characters.Source:show|on GitHub# File activerecord/lib/active_record/connection_adapters/abstract/quoting.rb, line 131defquote_string(s)s.gsub("\\",'\&\&').gsub("'","''")# ' (for ruby-mode)endquote_table_name(table_name)LinkQuotes the table name.Source:show|on GitHub# File activerecord/lib/active_record/connection_adapters/abstract/quoting.rb, line 141defquote_table_name(table_name)self.class.quote_table_name(table_name)endquote_table_name_for_assignment(table, attr)LinkOverride to return the quoted table name for assignment. Defaults to table quoting.This works forMySQLwhere table.column can be used to resolve ambiguity.We override this in the sqlite3 and postgresql adapters to use only the column name (as per syntax requirements).Source:show|on GitHub# File activerecord/lib/active_record/connection_adapters/abstract/quoting.rb, line 153defquote_table_name_for_assignment(table,attr)quote_table_name("#{table}.#{attr}")endquoted_date(value)LinkQuote date/time values for use in SQL input. Includes microseconds if the value is aTimeresponding to usec.Source:show|on GitHub# File activerecord/lib/active_record/connection_adapters/abstract/quoting.rb, line 184defquoted_date(value)ifvalue.acts_like?(:time)ifdefault_timezone==:utcvalue=value.getutcif!value.utc?elsevalue=value.getlocalendendresult=value.to_fs(:db)ifvalue.respond_to?(:usec)&&value.usec>0result<<"."<<sprintf("%06d",value.usec)elseresultendendquoted_false()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/abstract/quoting.rb, line 174defquoted_false"FALSE"endquoted_true()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/abstract/quoting.rb, line 166defquoted_true"TRUE"endtype_cast(value)LinkCast avalueto a type that the database understands. For example, SQLite does not understand dates, so this method will convert aDateto aString.Source:show|on GitHub# File activerecord/lib/active_record/connection_adapters/abstract/quoting.rb, line 94deftype_cast(value)casevaluewhenSymbol,ActiveSupport::Multibyte::Chars,Type::Binary::Datavalue.to_swhentruethenunquoted_truewhenfalsethenunquoted_false# BigDecimals need to be put in a non-normalized form and quoted.whenBigDecimalthenvalue.to_s("F")whennil,Numeric,StringthenvaluewhenType::Time::Valuethenquoted_time(value)whenDate,Timethenquoted_date(value)elseraiseTypeError,"can't cast #{value.class.name}"endendunquoted_false()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/abstract/quoting.rb, line 178defunquoted_falsefalseendunquoted_true()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/abstract/quoting.rb, line 170defunquoted_truetrueend