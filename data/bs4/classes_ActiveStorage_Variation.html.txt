Active Storage VariationA set of transformations that can be applied to a blob to create a variant. This class is exposed via theActiveStorage::Blob#variantmethod and should rarely be used directly.In case you do need to use this directly, itâs instantiated using a hash of transformations where the key is the command and the value is the arguments. Example:ActiveStorage::Variation.new(resize_to_limit: [100, 100], colourspace: "b-w", rotate: "-90", saver: { trim: true })The options map directly toImageProcessingcommands.MethodsCcontent_typeDdecode,default_to,digestEencodeFformatKkeyNnewTtransformWwrapAttributes[R]transformationsClass Public methodsdecode(key)LinkReturns aVariationinstance with the transformations that were encoded byencode.Source:show|on GitHub# File activestorage/app/models/active_storage/variation.rb, line 35defdecode(key)newActiveStorage.verifier.verify(key,purpose::variation)endencode(transformations)LinkReturns a signed key for thetransformations, which can be used to refer to a specific variation in a URL or combined key (likeActiveStorage::Variant#key).Source:show|on GitHub# File activestorage/app/models/active_storage/variation.rb, line 41defencode(transformations)ActiveStorage.verifier.generate(transformations,purpose::variation)endnew(transformations)LinkSource:show|on GitHub# File activestorage/app/models/active_storage/variation.rb, line 46definitialize(transformations)@transformations=transformations.deep_symbolize_keysendwrap(variator)LinkReturns aVariationinstance based on the given variator. If the variator is aVariation, it is returned unmodified. If it is aString, it is passed toActiveStorage::Variation.decode. Otherwise, it is assumed to be a transformationsHashand is passed directly to the constructor.Source:show|on GitHub# File activestorage/app/models/active_storage/variation.rb, line 23defwrap(variator)casevariatorwhenselfvariatorwhenStringdecodevariatorelsenewvariatorendendInstance Public methodscontent_type()LinkSource:show|on GitHub# File activestorage/app/models/active_storage/variation.rb, line 70defcontent_typeMarcel::MimeType.for(extension:format.to_s)enddefault_to(defaults)LinkSource:show|on GitHub# File activestorage/app/models/active_storage/variation.rb, line 50defdefault_to(defaults)self.class.newtransformations.reverse_merge(defaults)enddigest()LinkSource:show|on GitHub# File activestorage/app/models/active_storage/variation.rb, line 79defdigestOpenSSL::Digest::SHA1.base64digestMarshal.dump(transformations)endformat()LinkSource:show|on GitHub# File activestorage/app/models/active_storage/variation.rb, line 62defformattransformations.fetch(:format,:png).tapdo|format|ifMarcel::Magic.by_extension(format.to_s).nil?raiseArgumentError,"Invalid variant format (#{format.inspect})"endendendkey()LinkReturns a signed key for all thetransformationsthat this variation was instantiated with.Source:show|on GitHub# File activestorage/app/models/active_storage/variation.rb, line 75defkeyself.class.encode(transformations)endtransform(file, &block)LinkAccepts aFileobject, performs thetransformationsagainst it, and saves the transformed image into a temporary file.Source:show|on GitHub# File activestorage/app/models/active_storage/variation.rb, line 56deftransform(file,&block)ActiveSupport::Notifications.instrument("transform.active_storage")dotransformer.transform(file,format:format,&block)endend