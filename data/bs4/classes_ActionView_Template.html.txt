Action View TemplateNamespaceMODULEActionView::Template::HandlersMODULEActionView::Template::SourcesMethodsEencode!Iinspect,instrumentLlocal_assigns,localsMmime_types_implementation=NnewRrenderSshort_identifier,source,strict_locals!,strict_locals?,supports_streaming?Ttranslate_location,typeConstantsNONE=Object.newSTRICT_LOCALS_REGEX=/\#\s+locals:\s+\((.*)\)/Attributes[R]format[RW]frozen_string_literal[R]handler[R]identifier[R]variable[R]variant[R]virtual_pathClass Public methodsmime_types_implementation=(implementation)LinkSource:show|on GitHub# File actionview/lib/action_view/template.rb, line 185defmime_types_implementation=(implementation)# This method isn't thread-safe, but it's not supposed# to be called after initializationifself::Types!=implementationremove_const(:Types)const_set(:Types,implementation)endendnew(source, identifier, handler, locals:, format: nil, variant: nil, virtual_path: nil)LinkSource:show|on GitHub# File actionview/lib/action_view/template.rb, line 200definitialize(source,identifier,handler,locals:,format:nil,variant:nil,virtual_path:nil)@source=source.dup@identifier=identifier@handler=handler@compiled=false@locals=locals@virtual_path=virtual_path@variable=if@virtual_pathbase=@virtual_path.end_with?("/")?"":::File.basename(@virtual_path)base=~/\A_?(.*?)(?:\.\w+)*\z/$1.to_symend@format=format@variant=variant@compile_mutex=Mutex.new@strict_locals=NONE@strict_local_keys=nil@type=nilendInstance Public methodsencode!()LinkThis method is responsible for properly setting the encoding of the source. Until this point, we assume that the source is BINARY data. If no additional information is supplied, we assume the encoding is the same asEncoding.default_external.The user can also specify the encoding via a comment on the first line of the template (# encoding: NAME-OF-ENCODING). This will work with any template engine, as we process out the encoding comment before passing the source on to the template engine, leaving a blank line in its stead.Source:show|on GitHub# File actionview/lib/action_view/template.rb, line 312defencode!source=self.sourcereturnsourceunlesssource.encoding==Encoding::BINARY# Look for # encoding: *. If we find one, we'll encode the# String in that encoding, otherwise, we'll use the# default external encoding.ifsource.sub!(LEADING_ENCODING_REGEXP,"")encoding=magic_encoding=$1elseencoding=Encoding.default_externalend# Tag the source with the default external encoding# or the encoding specified in the filesource.force_encoding(encoding)# If the user didn't specify an encoding, and the handler# handles encodings, we simply pass the String as is to# the handler (with the default_external tag)if!magic_encoding&&@handler.respond_to?(:handles_encoding?)&&@handler.handles_encoding?source# Otherwise, if the String is valid in the encoding,# encode immediately to default_internal. This means# that if a handler doesn't handle encodings, it will# always get Strings in the default_internalelsifsource.valid_encoding?source.encode!# Otherwise, since the String is invalid in the encoding# specified, raise an exceptionelseraiseWrongEncodingError.new(source,encoding)endendinspect()LinkSource:show|on GitHub# File actionview/lib/action_view/template.rb, line 291definspect"#<#{self.class.name} #{short_identifier} locals=#{locals.inspect}>"endlocal_assignsLinkReturns a hash with the defined local variables.Given this sub template rendering:<%= render "application/header", { headline: "Welcome", person: person } %>You can uselocal_assignsin the sub templates to access the local variables:local_assigns[:headline] # => "Welcome"Each key inlocal_assignsis available as a partial-local variable:local_assigns[:headline] # => "Welcome"
headline                 # => "Welcome"Sincelocal_assignsis aHash, itâs compatible with Ruby 3.1âs pattern matching assignment operator:local_assigns => { headline:, **options }
headline                 # => "Welcome"
options                  # => {}Pattern matching assignment also supports variable renaming:local_assigns => { headline: title }
title                    # => "Welcome"If a template refers to a variable that isnât passed into the view as part of thelocals: { ... }Hash, the template will raise anActionView::Template::Error:<%# => raises ActionView::Template::Error %>
<% alerts.each do |alert| %>
  <p><%= alert %></p>
<% end %>Sincelocal_assignsreturns aHashinstance, you can conditionally read a variable, then fall back to a default value when the key isnât part of thelocals: { ... }options:<% local_assigns.fetch(:alerts, []).each do |alert| %>
  <p><%= alert %></p>
<% end %>Combining Ruby 3.1âs pattern matching assignment with calls to +Hash#with_defaults+ enables compact partial-local variable assignments:<% local_assigns.with_defaults(alerts: []) => { headline:, alerts: } %>

<h1><%= headline %></h1>

<% alerts.each do |alert| %>
  <p><%= alert %></p>
<% end %>By default, templates will accept anylocalsas keyword arguments and make them available tolocal_assigns. To restrict whatlocal_assignsa template will accept, add alocals:magic comment:<%# locals: (headline:, alerts: []) %>

<h1><%= headline %></h1>

<% alerts.each do |alert| %>
  <p><%= alert %></p>
<% end %>Read more about strict locals inAction View Overviewin the guides.Source:show|on GitHub# File actionview/lib/action_view/template.rb, line 166eager_autoloaddoautoload:Errorautoload:RawFileautoload:Renderableautoload:Handlersautoload:HTMLautoload:Inlineautoload:Typesautoload:Sourcesautoload:Textautoload:Typesendlocals()LinkThe locals this template has been or will be compiled for, or nil if this is a strict locals template.Source:show|on GitHub# File actionview/lib/action_view/template.rb, line 224deflocalsifstrict_locals?nilelse@localsendendrender(view, locals, buffer = nil, implicit_locals: [], add_to_stack: true, &block)LinkRender a template. If the template was not compiled yet, it is done exactly before rendering.This method is instrumented as â!render_template.action_viewâ. Notice that we use a bang in this instrumentation because you donât want to consume this in production. This is only slow if itâs being listened to.Source:show|on GitHub# File actionview/lib/action_view/template.rb, line 262defrender(view,locals,buffer=nil,implicit_locals:[],add_to_stack:true,&block)instrument_render_templatedocompile!(view)ifstrict_locals?&&@strict_local_keys&&!implicit_locals.empty?locals_to_ignore=implicit_locals-@strict_local_keyslocals.except!(*locals_to_ignore)endifbufferview._run(method_name,self,locals,buffer,add_to_stack:add_to_stack,has_strict_locals:strict_locals?,&block)nilelseresult=view._run(method_name,self,locals,OutputBuffer.new,add_to_stack:add_to_stack,has_strict_locals:strict_locals?,&block)result.is_a?(OutputBuffer)?result.to_s:resultendendrescue=>ehandle_render_error(view,e)endshort_identifier()LinkSource:show|on GitHub# File actionview/lib/action_view/template.rb, line 287defshort_identifier@short_identifier||=defined?(Rails.root)?identifier.delete_prefix("#{Rails.root}/"):identifierendsource()LinkSource:show|on GitHub# File actionview/lib/action_view/template.rb, line 295defsource@source.to_sendstrict_locals!()LinkThis method is responsible for marking a template as having strict locals which means the template can only accept the locals defined in a magic comment. For example, if your template acceps the localstitleandcomment_count, add the following to your template file:<%# locals: (title: "Default title", comment_count: 0) %>Strict locals are useful for validating template arguments and for specifying defaults.Source:show|on GitHub# File actionview/lib/action_view/template.rb, line 357defstrict_locals!if@strict_locals==NONEself.source.sub!(STRICT_LOCALS_REGEX,"")@strict_locals=$1returnif@strict_locals.nil?# Magic comment not found@strict_locals="**nil"if@strict_locals.blank?end@strict_localsendstrict_locals?()LinkReturns whether a template is using strict locals.Source:show|on GitHub# File actionview/lib/action_view/template.rb, line 371defstrict_locals?strict_locals!endsupports_streaming?()LinkReturns whether the underlying handler supports streaming. If so, a streaming buffermaybe passed when it starts rendering.Source:show|on GitHub# File actionview/lib/action_view/template.rb, line 252defsupports_streaming?handler.respond_to?(:supports_streaming?)&&handler.supports_streaming?endtranslate_location(backtrace_location, spot)LinkTranslate an error location returned by ErrorHighlight to the correct source location inside the template.Source:show|on GitHub# File actionview/lib/action_view/template.rb, line 242deftranslate_location(backtrace_location,spot)ifhandler.respond_to?(:translate_location)handler.translate_location(spot,backtrace_location,encode!)||spotelsespotendendtype()LinkSource:show|on GitHub# File actionview/lib/action_view/template.rb, line 283deftype@type||=Types[format]endInstance Private methodsinstrument(action, &block)LinkSource:show|on GitHub# File actionview/lib/action_view/template.rb, line 569definstrument(action,&block)# :doc:ActiveSupport::Notifications.instrument("#{action}.action_view",instrument_payload,&block)end