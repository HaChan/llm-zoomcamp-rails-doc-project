Active Record Nested AttributesNested attributes allow you to save attributes on associated records through the parent. By default nested attribute updating is turned off and you can enable it using theaccepts_nested_attributes_forclass method. When you enable nested attributes an attribute writer is defined on the model.The attribute writer is named after the association, which means that in the following example, two new methods are added to your model:author_attributes=(attributes)andpages_attributes=(attributes).class Book < ActiveRecord::Base
  has_one :author
  has_many :pages

  accepts_nested_attributes_for :author, :pages
endNote that the:autosaveoption is automatically enabled on every association thataccepts_nested_attributes_foris used for.One-to-oneConsider a Member model that has one Avatar:class Member < ActiveRecord::Base
  has_one :avatar
  accepts_nested_attributes_for :avatar
endEnabling nested attributes on a one-to-one association allows you to create the member and avatar in one go:params = { member: { name: 'Jack', avatar_attributes: { icon: 'smiling' } } }
member = Member.create(params[:member])
member.avatar.id # => 2
member.avatar.icon # => 'smiling'It also allows you to update the avatar through the member:params = { member: { avatar_attributes: { id: '2', icon: 'sad' } } }
member.update params[:member]
member.avatar.icon # => 'sad'If you want to update the current avatar without providing the id, you must add:update_onlyoption.class Member < ActiveRecord::Base
  has_one :avatar
  accepts_nested_attributes_for :avatar, update_only: true
end

params = { member: { avatar_attributes: { icon: 'sad' } } }
member.update params[:member]
member.avatar.id # => 2
member.avatar.icon # => 'sad'By default you will only be able to set and update attributes on the associated model. If you want to destroy the associated model through the attributes hash, you have to enable it first using the:allow_destroyoption.class Member < ActiveRecord::Base
  has_one :avatar
  accepts_nested_attributes_for :avatar, allow_destroy: true
endNow, when you add the_destroykey to the attributes hash, with a value that evaluates totrue, you will destroy the associated model:member.avatar_attributes = { id: '2', _destroy: '1' }
member.avatar.marked_for_destruction? # => true
member.save
member.reload.avatar # => nilNote that the model willnotbe destroyed until the parent is saved.Also note that the model will not be destroyed unless you also specify its id in the updated hash.One-to-manyConsider a member that has a number of posts:class Member < ActiveRecord::Base
  has_many :posts
  accepts_nested_attributes_for :posts
endYou can now set or update attributes on the associated posts through an attribute hash for a member: include the key:posts_attributeswith an array of hashes of post attributes as a value.For each hash that doesnothave anidkey a new record will be instantiated, unless the hash also contains a_destroykey that evaluates totrue.params = { member: {
  name: 'joe', posts_attributes: [
    { title: 'Kari, the awesome Ruby documentation browser!' },
    { title: 'The egalitarian assumption of the modern citizen' },
    { title: '', _destroy: '1' } # this will be ignored
  ]
}}

member = Member.create(params[:member])
member.posts.length # => 2
member.posts.first.title # => 'Kari, the awesome Ruby documentation browser!'
member.posts.second.title # => 'The egalitarian assumption of the modern citizen'You may also set a:reject_ifproc to silently ignore any new record hashes if they fail to pass your criteria. For example, the previous example could be rewritten as:class Member < ActiveRecord::Base
  has_many :posts
  accepts_nested_attributes_for :posts, reject_if: proc { |attributes| attributes['title'].blank? }
end

params = { member: {
  name: 'joe', posts_attributes: [
    { title: 'Kari, the awesome Ruby documentation browser!' },
    { title: 'The egalitarian assumption of the modern citizen' },
    { title: '' } # this will be ignored because of the :reject_if proc
  ]
}}

member = Member.create(params[:member])
member.posts.length # => 2
member.posts.first.title # => 'Kari, the awesome Ruby documentation browser!'
member.posts.second.title # => 'The egalitarian assumption of the modern citizen'Alternatively,:reject_ifalso accepts a symbol for using methods:class Member < ActiveRecord::Base
  has_many :posts
  accepts_nested_attributes_for :posts, reject_if: :new_record?
end

class Member < ActiveRecord::Base
  has_many :posts
  accepts_nested_attributes_for :posts, reject_if: :reject_posts

  def reject_posts(attributes)
    attributes['title'].blank?
  end
endIf the hash contains anidkey that matches an already associated record, the matching record will be modified:member.attributes = {
  name: 'Joe',
  posts_attributes: [
    { id: 1, title: '[UPDATED] An, as of yet, undisclosed awesome Ruby documentation browser!' },
    { id: 2, title: '[UPDATED] other post' }
  ]
}

member.posts.first.title # => '[UPDATED] An, as of yet, undisclosed awesome Ruby documentation browser!'
member.posts.second.title # => '[UPDATED] other post'However, the above applies if the parent model is being updated as well. For example, if you wanted to create amembernamedjoeand wanted to update thepostsat the same time, that would give anActiveRecord::RecordNotFounderror.By default the associated records are protected from being destroyed. If you want to destroy any of the associated records through the attributes hash, you have to enable it first using the:allow_destroyoption. This will allow you to also use the_destroykey to destroy existing records:class Member < ActiveRecord::Base
  has_many :posts
  accepts_nested_attributes_for :posts, allow_destroy: true
end

params = { member: {
  posts_attributes: [{ id: '2', _destroy: '1' }]
}}

member.attributes = params[:member]
member.posts.detect { |p| p.id == 2 }.marked_for_destruction? # => true
member.posts.length # => 2
member.save
member.reload.posts.length # => 1Nested attributes for an associated collection can also be passed in the form of a hash of hashes instead of an array of hashes:Member.create(
  name: 'joe',
  posts_attributes: {
    first:  { title: 'Foo' },
    second: { title: 'Bar' }
  }
)has the same effect asMember.create(
  name: 'joe',
  posts_attributes: [
    { title: 'Foo' },
    { title: 'Bar' }
  ]
)The keys of the hash which is the value for:posts_attributesare ignored in this case. However, it is not allowed to use'id'or:idfor one of such keys, otherwise the hash will be wrapped in an array and interpreted as an attribute hash for a single post.Passing attributes for an associated collection in the form of a hash of hashes can be used with hashes generated from HTTP/HTML parameters, where there may be no natural way to submit an array of hashes.SavingAll changes to models, including the destruction of those marked for destruction, are saved and destroyed automatically and atomically when the parent model is saved. This happens inside the transaction initiated by the parentâs save method. SeeActiveRecord::AutosaveAssociation.Validating the presence of a parent modelThebelongs_toassociation validates the presence of the parent model by default. You can disable this behavior by specifyingoptional: true. This can be used, for example, when conditionally validating the presence of the parent model:class Veterinarian < ActiveRecord::Base
  has_many :patients, inverse_of: :veterinarian
  accepts_nested_attributes_for :patients
end

class Patient < ActiveRecord::Base
  belongs_to :veterinarian, inverse_of: :patients, optional: true
  validates :veterinarian, presence: true, unless: -> { awaiting_intake }
endNote that if you do not specify the:inverse_ofoption, then Active Record will try to automatically guess the inverse association based on heuristics.For one-to-one nested associations, if you build the new (in-memory) child object yourself before assignment, then this module will not overwrite it, e.g.:class Member < ActiveRecord::Base
  has_one :avatar
  accepts_nested_attributes_for :avatar

  def avatar
    super || build_avatar(width: 200)
  end
end

member = Member.new
member.avatar_attributes = {icon: 'sad'}
member.avatar.width # => 200Creating forms with nested attributesUseActionView::Helpers::FormHelper#fields_forto create form elements for nested attributes.Integrationtest params should reflect the structure of the form. For example:post members_path, params: {
  member: {
    name: 'joe',
    posts_attributes: {
      '0' => { title: 'Foo' },
      '1' => { title: 'Bar' }
    }
  }
}MethodsAaccepts_nested_attributes_forConstantsREJECT_ALL_BLANK_PROC=proc { |attributes| attributes.all? { |key, value| key == "_destroy" || value.blank? } }Instance Public methodsaccepts_nested_attributes_for(*attr_names)LinkDefines an attributes writer for the specified association(s).Supported options::allow_destroyIf true, destroys any members from the attributes hash with a_destroykey and a value that evaluates totrue(e.g. 1, â1â, true, or âtrueâ). This option is false by default.:reject_ifAllows you to specify a Proc or aSymbolpointing to a method that checks whether a record should be built for a certain attribute hash. The hash is passed to the supplied Proc or the method and it should return eithertrueorfalse. When no:reject_ifis specified, a record will be built for all attribute hashes that do not have a_destroyvalue that evaluates to true. Passing:all_blankinstead of a Proc will create a proc that will reject a record where all the attributes are blank excluding any value for_destroy.:limitAllows you to specify the maximum number of associated records that can be processed with the nested attributes. Limit also can be specified as a Proc or aSymbolpointing to a method that should return a number. If the size of the nested attributes array exceeds the specified limit,NestedAttributes::TooManyRecordsexception is raised. If omitted, any number of associations can be processed. Note that the:limitoption is only applicable to one-to-many associations.:update_onlyFor a one-to-one association, this option allows you to specify how nested attributes are going to be used when an associated record already exists. In general, an existing record may either be updated with the new set of attribute values or be replaced by a wholly new record containing those values. By default the:update_onlyoption is false and the nested attributes are used to update the existing record only if they include the recordâs:idvalue. Otherwise a new record will be instantiated and used to replace the existing one. However if the:update_onlyoption is true, the nested attributes are used to update the recordâs attributes always, regardless of whether the:idis present. The option is ignored for collection associations.Examples:# creates avatar_attributes=
accepts_nested_attributes_for :avatar, reject_if: proc { |attributes| attributes['name'].blank? }
# creates avatar_attributes=
accepts_nested_attributes_for :avatar, reject_if: :all_blank
# creates avatar_attributes= and posts_attributes=
accepts_nested_attributes_for :avatar, :posts, allow_destroy: trueSource:show|on GitHub# File activerecord/lib/active_record/nested_attributes.rb, line 351defaccepts_nested_attributes_for(*attr_names)options= {allow_destroy:false,update_only:false}options.update(attr_names.extract_options!)options.assert_valid_keys(:allow_destroy,:reject_if,:limit,:update_only)options[:reject_if] =REJECT_ALL_BLANK_PROCifoptions[:reject_if]==:all_blankattr_names.eachdo|association_name|ifreflection=_reflect_on_association(association_name)reflection.autosave=truedefine_autosave_validation_callbacks(reflection)nested_attributes_options=self.nested_attributes_options.dupnested_attributes_options[association_name.to_sym] =optionsself.nested_attributes_options=nested_attributes_optionstype= (reflection.collection??:collection::one_to_one)generate_association_writer(association_name,type)elseraiseArgumentError,"No association found for name `#{association_name}'. Has it been defined yet?"endendend