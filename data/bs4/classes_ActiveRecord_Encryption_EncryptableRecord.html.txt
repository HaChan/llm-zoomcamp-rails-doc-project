This is the concern mixed in Active Record models to make them encryptable. It adds theencryptsattribute declaration, as well as the API to encrypt and decrypt records.MethodsAadd_length_validation_for_encrypted_columnsCciphertext_forDdecrypt,deterministic_encrypted_attributesEencrypt,encrypt_attribute,encrypted_attribute?,encryptsGglobal_previous_schemes_forOoverride_accessors_to_preserve_originalPpreserve_original_encryptedSscheme_for,source_attribute_from_preserved_attributeVvalidate_column_sizeConstantsORIGINAL_ATTRIBUTE_PREFIX="original_"Instance Public methodsadd_length_validation_for_encrypted_columns()LinkSource:show|on GitHub# File activerecord/lib/active_record/encryption/encryptable_record.rb, line 132defadd_length_validation_for_encrypted_columnsencrypted_attributes&.eachdo|attribute_name|validate_column_sizeattribute_nameendendciphertext_for(attribute_name)LinkReturns the ciphertext forattribute_name.Source:show|on GitHub# File activerecord/lib/active_record/encryption/encryptable_record.rb, line 157defciphertext_for(attribute_name)ifencrypted_attribute?(attribute_name)read_attribute_before_type_cast(attribute_name)elseread_attribute_for_database(attribute_name)endenddecrypt()LinkDecrypts all the encryptable attributes and saves the changes.Source:show|on GitHub# File activerecord/lib/active_record/encryption/encryptable_record.rb, line 171defdecryptdecrypt_attributesifhas_encrypted_attributes?enddeterministic_encrypted_attributes()LinkReturns the list of deterministic encryptable attributes in the model class.Source:show|on GitHub# File activerecord/lib/active_record/encryption/encryptable_record.rb, line 58defdeterministic_encrypted_attributes@deterministic_encrypted_attributes||=encrypted_attributes&.find_alldo|attribute_name|type_for_attribute(attribute_name).deterministic?endendencrypt()LinkEncrypts all the encryptable attributes and saves the changes.Source:show|on GitHub# File activerecord/lib/active_record/encryption/encryptable_record.rb, line 166defencryptencrypt_attributesifhas_encrypted_attributes?endencrypt_attribute(name, key_provider: nil, key: nil, deterministic: false, support_unencrypted_data: nil, downcase: false, ignore_case: false, previous: [], **context_properties)LinkSource:show|on GitHub# File activerecord/lib/active_record/encryption/encryptable_record.rb, line 84defencrypt_attribute(name,key_provider:nil,key:nil,deterministic:false,support_unencrypted_data:nil,downcase:false,ignore_case:false,previous:[],**context_properties)encrypted_attributes<<name.to_symdecorate_attributes([name])do|name,cast_type|scheme=scheme_forkey_provider:key_provider,key:key,deterministic:deterministic,support_unencrypted_data:support_unencrypted_data, \downcase:downcase,ignore_case:ignore_case,previous:previous,**context_propertiesActiveRecord::Encryption::EncryptedAttributeType.new(scheme:scheme,cast_type:cast_type,default:columns_hash[name.to_s]&.default)endpreserve_original_encrypted(name)ifignore_caseActiveRecord::Encryption.encrypted_attribute_was_declared(self,name)endencrypted_attribute?(attribute_name)LinkReturns whether a given attribute is encrypted or not.Source:show|on GitHub# File activerecord/lib/active_record/encryption/encryptable_record.rb, line 146defencrypted_attribute?(attribute_name)name=attribute_name.to_sname=self.class.attribute_aliases[name]||namereturnfalseunlessself.class.encrypted_attributes&.include?name.to_symtype=type_for_attribute(name)type.encrypted?read_attribute_before_type_cast(name)endencrypts(*names, key_provider: nil, key: nil, deterministic: false, support_unencrypted_data: nil, downcase: false, ignore_case: false, previous: [], **context_properties)LinkEncrypts thenameattribute.Options:key_provider- A key provider to provide encryption and decryption keys. Defaults toActiveRecord::Encryption.key_provider.:key- A password to derive the key from. Itâs a shorthand for a:key_providerthat serves derivated keys. Both options canât be used at the same time.:deterministic- By default, encryption is not deterministic. It will use a random initialization vector for each encryption operation. This means that encrypting the same content with the same key twice will generate different ciphertexts. When set totrue, it will generate the initialization vector based on the encrypted content. This means that the same content will generate the same ciphertexts. This enables querying encrypted text with Active Record. Deterministic encryption will use the oldest encryption scheme to encrypt new data by default. You can change this by settingdeterministic: { fixed: false }. That will make it use the newest encryption scheme for encrypting new data.:support_unencrypted_data- If âconfig.active_record.encryption.support_unencrypted_data` istrue, you can set this tofalseto opt out of unencrypted data support for this attribute. This is useful for scenarios where you encrypt one column, and want to disable support for unencrypted data without having to tweak the global setting.:downcase- When true, it converts the encrypted content to downcase automatically. This allows to effectively ignore case when querying data. Notice that the case is lost. Use:ignore_caseif you are interested in preserving it.:ignore_case- When true, it behaves like:downcasebut, it also preserves the original case in a specially designated column +original_<name>+. When reading the encrypted content, the version with the original case is served. But you can still execute queries that will ignore the case. This option can only be used when:deterministicis true.:context_properties- Additional properties that will overrideContextsettings when this attribute is encrypted and decrypted. E.g:encryptor:,cipher:,message_serializer:, etc.:previous- List of previous encryption schemes. When provided, they will be used in order when trying to read the attribute. Each entry of the list can contain the properties supported byencrypts. Also, when deterministic encryption is used, they will be used to generate additional ciphertexts to check in the queries.Source:show|on GitHub# File activerecord/lib/active_record/encryption/encryptable_record.rb, line 49defencrypts(*names,key_provider:nil,key:nil,deterministic:false,support_unencrypted_data:nil,downcase:false,ignore_case:false,previous:[],**context_properties)self.encrypted_attributes||=Set.new# not using :default because the instance would be shared across classesnames.eachdo|name|encrypt_attributename,key_provider:key_provider,key:key,deterministic:deterministic,support_unencrypted_data:support_unencrypted_data,downcase:downcase,ignore_case:ignore_case,previous:previous,**context_propertiesendendglobal_previous_schemes_for(scheme)LinkSource:show|on GitHub# File activerecord/lib/active_record/encryption/encryptable_record.rb, line 78defglobal_previous_schemes_for(scheme)ActiveRecord::Encryption.config.previous_schemes.filter_mapdo|previous_scheme|scheme.merge(previous_scheme)ifscheme.compatible_with?(previous_scheme)endendoverride_accessors_to_preserve_original(name, original_attribute_name)LinkSource:show|on GitHub# File activerecord/lib/active_record/encryption/encryptable_record.rb, line 109defoverride_accessors_to_preserve_original(name,original_attribute_name)include(Module.newdodefine_methodnamedoif((value=super())&&encrypted_attribute?(name))||!ActiveRecord::Encryption.config.support_unencrypted_datasend(original_attribute_name)elsevalueendenddefine_method"#{name}="do|value|self.send"#{original_attribute_name}=",valuesuper(value)endend)endpreserve_original_encrypted(name)LinkSource:show|on GitHub# File activerecord/lib/active_record/encryption/encryptable_record.rb, line 98defpreserve_original_encrypted(name)original_attribute_name="#{ORIGINAL_ATTRIBUTE_PREFIX}#{name}".to_symif!ActiveRecord::Encryption.config.support_unencrypted_data&&!column_names.include?(original_attribute_name.to_s)raiseErrors::Configuration,"To use :ignore_case for '#{name}' you must create an additional column named '#{original_attribute_name}'"endencryptsoriginal_attribute_nameoverride_accessors_to_preserve_originalname,original_attribute_nameendscheme_for(key_provider: nil, key: nil, deterministic: false, support_unencrypted_data: nil, downcase: false, ignore_case: false, previous: [], **context_properties)LinkSource:show|on GitHub# File activerecord/lib/active_record/encryption/encryptable_record.rb, line 70defscheme_for(key_provider:nil,key:nil,deterministic:false,support_unencrypted_data:nil,downcase:false,ignore_case:false,previous:[],**context_properties)ActiveRecord::Encryption::Scheme.new(key_provider:key_provider,key:key,deterministic:deterministic,support_unencrypted_data:support_unencrypted_data,downcase:downcase,ignore_case:ignore_case,**context_properties).tapdo|scheme|scheme.previous_schemes=global_previous_schemes_for(scheme)+Array.wrap(previous).collect{|scheme_config|ActiveRecord::Encryption::Scheme.new(**scheme_config) }endendsource_attribute_from_preserved_attribute(attribute_name)LinkGiven a attribute name, it returns the name of the source attribute when itâs a preserved one.Source:show|on GitHub# File activerecord/lib/active_record/encryption/encryptable_record.rb, line 65defsource_attribute_from_preserved_attribute(attribute_name)attribute_name.to_s.sub(ORIGINAL_ATTRIBUTE_PREFIX,"")ifattribute_name.start_with?(ORIGINAL_ATTRIBUTE_PREFIX)endvalidate_column_size(attribute_name)LinkSource:show|on GitHub# File activerecord/lib/active_record/encryption/encryptable_record.rb, line 138defvalidate_column_size(attribute_name)iflimit=columns_hash[attribute_name.to_s]&.limitvalidates_length_ofattribute_name,maximum:limitendend