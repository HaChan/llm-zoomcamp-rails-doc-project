Active Support BroadcastLoggerThe Broadcast logger is a logger used to write messages to multipleIO. It is commonly used in development to display messages on STDOUT and also write them to a file (development.log). With the Broadcast logger, you can broadcast your logs to a unlimited number of sinks.TheBroadcastLoggeracts as a standard logger and all methods you are used to are available. However, all the methods on this logger will propagate and be delegated to the other loggers that are part of the broadcast.Broadcasting your logs.stdout_logger = Logger.new(STDOUT)
file_logger   = Logger.new("development.log")
broadcast = BroadcastLogger.new(stdout_logger, file_logger)

broadcast.info("Hello world!") # Writes the log to STDOUT and the development.log file.Add a logger to the broadcast.stdout_logger = Logger.new(STDOUT)
broadcast = BroadcastLogger.new(stdout_logger)
file_logger   = Logger.new("development.log")
broadcast.broadcast_to(file_logger)

broadcast.info("Hello world!") # Writes the log to STDOUT and the development.log file.Modifying the log level for all broadcasted loggers.stdout_logger = Logger.new(STDOUT)
file_logger   = Logger.new("development.log")
broadcast = BroadcastLogger.new(stdout_logger, file_logger)

broadcast.level = Logger::FATAL # Modify the log level for the whole broadcast.Stop broadcasting log to a sink.stdout_logger = Logger.new(STDOUT)
file_logger   = Logger.new("development.log")
broadcast = BroadcastLogger.new(stdout_logger, file_logger)
broadcast.info("Hello world!") # Writes the log to STDOUT and the development.log file.

broadcast.stop_broadcasting_to(file_logger)
broadcast.info("Hello world!") # Writes the log *only* to STDOUT.At least one sink has to be part of the broadcast. Otherwise, your logs will not be written anywhere. For instance:broadcast = BroadcastLogger.new
broadcast.info("Hello world") # The log message will appear nowhere.If you are adding a custom logger with custom methods to the broadcast, the âBroadcastLogger` will proxy them and return the raw value, or an array of raw values, depending on how many loggers in the broadcasts responded to the method:class MyLogger < ::Logger
  def loggable?
    true
  end
end

logger = BroadcastLogger.new
logger.loggable? # => A NoMethodError exception is raised because no loggers in the broadcasts could respond.

logger.broadcast_to(MyLogger.new(STDOUT))
logger.loggable? # => true
logger.broadcast_to(MyLogger.new(STDOUT))
puts logger.broadcasts # => [MyLogger, MyLogger]
logger.loggable? # [true, true]Methods#<<AaddBbroadcast_toCcloseDdebug,debug!,debug?Eerror,error!,error?Ffatal,fatal!,fatal?,formatter=Iinfo,info!,info?,initialize_copyLlevel,level=,local_level=,logNnewSsev_threshold=,stop_broadcasting_toUunknownWwarn,warn!,warn?Included ModulesActiveSupport::LoggerSilenceAttributes[R]broadcastsReturns all the logger that are part of this broadcast.[R]formatter[RW]prognameClass Public methodsnew(*loggers)LinkSource:show|on GitHub# File activesupport/lib/active_support/broadcast_logger.rb, line 82definitialize(*loggers)@broadcasts= []@progname="Broadcast"broadcast_to(*loggers)endInstance Public methods<<(message)LinkSource:show|on GitHub# File activesupport/lib/active_support/broadcast_logger.rb, line 112def<<(message)dispatch{|logger|logger.<<(message) }endadd(*args, &block)LinkAlso aliased as:logSource:show|on GitHub# File activesupport/lib/active_support/broadcast_logger.rb, line 116defadd(*args,&block)dispatch{|logger|logger.add(*args,&block) }endbroadcast_to(*loggers)LinkAdd logger(s) to the broadcast.broadcast_logger = ActiveSupport::BroadcastLogger.new
broadcast_logger.broadcast_to(Logger.new(STDOUT), Logger.new(STDERR))Source:show|on GitHub# File activesupport/lib/active_support/broadcast_logger.rb, line 93defbroadcast_to(*loggers)@broadcasts.concat(loggers)endclose()LinkSource:show|on GitHub# File activesupport/lib/active_support/broadcast_logger.rb, line 162defclosedispatch{|logger|logger.close}enddebug(*args, &block)LinkSource:show|on GitHub# File activesupport/lib/active_support/broadcast_logger.rb, line 121defdebug(*args,&block)dispatch{|logger|logger.debug(*args,&block) }enddebug!()LinkSets the log level to Logger::DEBUG for the whole broadcast.Source:show|on GitHub# File activesupport/lib/active_support/broadcast_logger.rb, line 173defdebug!dispatch{|logger|logger.debug!}enddebug?()LinkTrueif the log level allows entries with severity Logger::DEBUG to be written to at least one broadcast.Falseotherwise.Source:show|on GitHub# File activesupport/lib/active_support/broadcast_logger.rb, line 168defdebug?@broadcasts.any?{|logger|logger.debug?}enderror(*args, &block)LinkSource:show|on GitHub# File activesupport/lib/active_support/broadcast_logger.rb, line 133deferror(*args,&block)dispatch{|logger|logger.error(*args,&block) }enderror!()LinkSets the log level to Logger::ERROR for the whole broadcast.Source:show|on GitHub# File activesupport/lib/active_support/broadcast_logger.rb, line 206deferror!dispatch{|logger|logger.error!}enderror?()LinkTrueif the log level allows entries with severity Logger::ERROR to be written to at least one broadcast.Falseotherwise.Source:show|on GitHub# File activesupport/lib/active_support/broadcast_logger.rb, line 201deferror?@broadcasts.any?{|logger|logger.error?}endfatal(*args, &block)LinkSource:show|on GitHub# File activesupport/lib/active_support/broadcast_logger.rb, line 137deffatal(*args,&block)dispatch{|logger|logger.fatal(*args,&block) }endfatal!()LinkSets the log level to Logger::FATAL for the whole broadcast.Source:show|on GitHub# File activesupport/lib/active_support/broadcast_logger.rb, line 217deffatal!dispatch{|logger|logger.fatal!}endfatal?()LinkTrueif the log level allows entries with severity Logger::FATAL to be written to at least one broadcast.Falseotherwise.Source:show|on GitHub# File activesupport/lib/active_support/broadcast_logger.rb, line 212deffatal?@broadcasts.any?{|logger|logger.fatal?}endformatter=(formatter)LinkSource:show|on GitHub# File activesupport/lib/active_support/broadcast_logger.rb, line 145defformatter=(formatter)dispatch{|logger|logger.formatter=formatter}@formatter=formatterendinfo(*args, &block)LinkSource:show|on GitHub# File activesupport/lib/active_support/broadcast_logger.rb, line 125definfo(*args,&block)dispatch{|logger|logger.info(*args,&block) }endinfo!()LinkSets the log level to Logger::INFO for the whole broadcast.Source:show|on GitHub# File activesupport/lib/active_support/broadcast_logger.rb, line 184definfo!dispatch{|logger|logger.info!}endinfo?()LinkTrueif the log level allows entries with severity Logger::INFO to be written to at least one broadcast.Falseotherwise.Source:show|on GitHub# File activesupport/lib/active_support/broadcast_logger.rb, line 179definfo?@broadcasts.any?{|logger|logger.info?}endinitialize_copy(other)LinkSource:show|on GitHub# File activesupport/lib/active_support/broadcast_logger.rb, line 221definitialize_copy(other)@broadcasts= []@progname=other.progname.dup@formatter=other.formatter.dupbroadcast_to(*other.broadcasts.map(&:dup))endlevel()LinkSource:show|on GitHub# File activesupport/lib/active_support/broadcast_logger.rb, line 108deflevel@broadcasts.map(&:level).minendlevel=(level)LinkAlso aliased as:sev_threshold=Source:show|on GitHub# File activesupport/lib/active_support/broadcast_logger.rb, line 151deflevel=(level)dispatch{|logger|logger.level=level}endlocal_level=(level)LinkSource:show|on GitHub# File activesupport/lib/active_support/broadcast_logger.rb, line 156deflocal_level=(level)dispatchdo|logger|logger.local_level=leveliflogger.respond_to?(:local_level=)endendlog(*args, &block)LinkAlias for:addsev_threshold=(level)LinkAlias for:level=stop_broadcasting_to(logger)LinkRemove a logger from the broadcast. When a logger is removed, messages sent to the broadcast will no longer be written to its sink.sink = Logger.new(STDOUT)
broadcast_logger = ActiveSupport::BroadcastLogger.new

broadcast_logger.stop_broadcasting_to(sink)Source:show|on GitHub# File activesupport/lib/active_support/broadcast_logger.rb, line 104defstop_broadcasting_to(logger)@broadcasts.delete(logger)endunknown(*args, &block)LinkSource:show|on GitHub# File activesupport/lib/active_support/broadcast_logger.rb, line 141defunknown(*args,&block)dispatch{|logger|logger.unknown(*args,&block) }endwarn(*args, &block)LinkSource:show|on GitHub# File activesupport/lib/active_support/broadcast_logger.rb, line 129defwarn(*args,&block)dispatch{|logger|logger.warn(*args,&block) }endwarn!()LinkSets the log level to Logger::WARN for the whole broadcast.Source:show|on GitHub# File activesupport/lib/active_support/broadcast_logger.rb, line 195defwarn!dispatch{|logger|logger.warn!}endwarn?()LinkTrueif the log level allows entries with severity Logger::WARN to be written to at least one broadcast.Falseotherwise.Source:show|on GitHub# File activesupport/lib/active_support/broadcast_logger.rb, line 190defwarn?@broadcasts.any?{|logger|logger.warn?}end