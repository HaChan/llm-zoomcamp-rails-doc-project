Active RecordSQLite3AdapterTheSQLite3adapter works with the sqlite3-ruby drivers (available as gem fromrubygems.org/gems/sqlite3).Options::database- Path to the database file.MethodsAactive?,add_timestampsCconnected?Ddatabase_exists?,dbconsole,disconnect!EencodingFforeign_keysNnew,new_clientRrename_table,requires_reloading?Sstrict_strings_by_default,supports_check_constraints?,supports_common_table_expressions?,supports_concurrent_connections?,supports_datetime_with_precision?,supports_ddl_transactions?,supports_deferrable_constraints?,supports_explain?,supports_expression_index?,supports_foreign_keys?,supports_index_sort_order?,supports_insert_conflict_target?,supports_insert_on_conflict?,supports_insert_on_duplicate_skip?,supports_insert_on_duplicate_update?,supports_insert_returning?,supports_json?,supports_lazy_transactions?,supports_partial_index?,supports_savepoints?,supports_transaction_isolation?,supports_views?,supports_virtual_columns?Uuse_insert_returning?Included ModulesActiveRecord::ConnectionAdapters::SQLite3::DatabaseStatementsConstantsADAPTER_NAME="SQLite"COLLATE_REGEX=/.*"(\w+)".*collate\s+"(\w+)".*/iDEFAULT_PRAGMAS={
"foreign_keys"        => true,
"journal_mode"        => :wal,
"synchronous"         => :normal,
"mmap_size"           => 134217728, # 128 megabytes
"journal_size_limit"  => 67108864, # 64 megabytes
"cache_size"          => 2000
}DEFERRABLE_REGEX=/DEFERRABLE INITIALLY (\w+)/EXTENDED_TYPE_MAPS=Concurrent::Map.newFINAL_CLOSE_PARENS_REGEX=/\);*\z/FK_REGEX=/.*FOREIGN KEY\s+\("(\w+)"\)\s+REFERENCES\s+"(\w+)"\s+\("(\w+)"\)/GENERATED_ALWAYS_AS_REGEX=/.*"(\w+)".+GENERATED ALWAYS AS \((.+)\) (?:STORED|VIRTUAL)/iNATIVE_DATABASE_TYPES={
primary_key:  "integer PRIMARY KEY AUTOINCREMENT NOT NULL",
string:       { name: "varchar" },
text:         { name: "text" },
integer:      { name: "integer" },
float:        { name: "float" },
decimal:      { name: "decimal" },
datetime:     { name: "datetime" },
time:         { name: "time" },
date:         { name: "date" },
binary:       { name: "blob" },
boolean:      { name: "boolean" },
json:         { name: "json" },
}PRIMARY_KEY_AUTOINCREMENT_REGEX=/.*"(\w+)".+PRIMARY KEY AUTOINCREMENT/iTYPE_MAP=Type::TypeMap.new.tap { |m| initialize_type_map(m) }UNQUOTED_OPEN_PARENS_REGEX=/\((?![^'"]*['"][^'"]*$)/Class Public methodsdbconsole(config, options = {})LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 41defdbconsole(config,options= {})args= []args<<"-#{options[:mode]}"ifoptions[:mode]args<<"-header"ifoptions[:header]args<<File.expand_path(config.database,Rails.respond_to?(:root)?Rails.root:nil)find_cmd_and_exec("sqlite3",*args)endnew(...)LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 99definitialize(...)super@memory_database=falsecase@config[:database].to_swhen""raiseArgumentError,"No database file specified. Missing argument: database"when":memory:"@memory_database=truewhen/\Afile:/else# Otherwise we have a path relative to Rails.root@config[:database] =File.expand_path(@config[:database],Rails.root)ifdefined?(Rails.root)dirname=File.dirname(@config[:database])unlessFile.directory?(dirname)beginFileUtils.mkdir_p(dirname)rescueSystemCallErrorraiseActiveRecord::NoDatabaseError.new(connection_pool:@pool)endendend@config[:strict] =ConnectionAdapters::SQLite3Adapter.strict_strings_by_defaultunless@config.key?(:strict)@connection_parameters=@config.merge(database:@config[:database].to_s,results_as_hash:true)@use_insert_returning=@config.key?(:insert_returning)?self.class.type_cast_config_to_boolean(@config[:insert_returning]):trueendnew_client(config)LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 31defnew_client(config)::SQLite3::Database.new(config[:database].to_s,config)rescueErrno::ENOENT=>erroriferror.message.include?("No such file or directory")raiseActiveRecord::NoDatabaseErrorelseraiseendendstrict_strings_by_defaultLinkConfigure theSQLite3Adapterto be used in a strict strings mode. This will disable double-quoted string literals, because otherwise typos can silently go unnoticed. For example, it is possible to create an index for a non existing column. If you wish to enable this mode you can add the following line to your application.rb file:config.active_record.sqlite3_adapter_strict_strings_by_default = trueSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 64class_attribute:strict_strings_by_default,default:falseInstance Public methodsactive?()LinkAlias for:connected?add_timestamps(table_name, **options)LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 352defadd_timestamps(table_name,**options)options[:null] =falseifoptions[:null].nil?if!options.key?(:precision)options[:precision] =6endalter_table(table_name)do|definition|definition.column:created_at,:datetime,**optionsdefinition.column:updated_at,:datetime,**optionsendendconnected?()LinkAlso aliased as:active?Source:show|on GitHub# File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 198defconnected?!(@raw_connection.nil?||@raw_connection.closed?)enddatabase_exists?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 127defdatabase_exists?@config[:database]==":memory:"||File.exist?(@config[:database].to_s)enddisconnect!()LinkDisconnects from the database if already connected. Otherwise, this method does nothing.Source:show|on GitHub# File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 208defdisconnect!super@raw_connection&.closerescuenil@raw_connection=nilendencoding()LinkReturns the current database encoding format as a string, e.g. âUTF-8âSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 224defencodingany_raw_connection.encoding.to_sendforeign_keys(table_name)LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 372defforeign_keys(table_name)# SQLite returns 1 row for each column of composite foreign keys.fk_info=internal_exec_query("PRAGMA foreign_key_list(#{quote(table_name)})","SCHEMA")# Deferred or immediate foreign keys can only be seen in the CREATE TABLE sqlfk_defs=table_structure_sql(table_name)
              .selectdo|column_string|column_string.start_with?("CONSTRAINT")&&column_string.include?("FOREIGN KEY")end.to_hdo|fk_string|_,from,table,to=fk_string.match(FK_REGEX).to_a_,mode=fk_string.match(DEFERRABLE_REGEX).to_adeferred=mode&.downcase&.to_sym||false[[table,from,to],deferred]endgrouped_fk=fk_info.group_by{|row|row["id"] }.values.each{|group|group.sort_by!{|row|row["seq"] } }grouped_fk.mapdo|group|row=group.firstoptions= {on_delete:extract_foreign_key_action(row["on_delete"]),on_update:extract_foreign_key_action(row["on_update"]),deferrable:fk_defs[[row["table"],row["from"],row["to"]]]
    }ifgroup.one?options[:column] =row["from"]options[:primary_key] =row["to"]elseoptions[:column] =group.map{|row|row["from"] }options[:primary_key] =group.map{|row|row["to"] }endForeignKeyDefinition.new(table_name,row["table"],options)endendrename_table(table_name, new_name, **options)LinkRenames a table.Example:rename_table('octopuses', 'octopi')Source:show|on GitHub# File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 285defrename_table(table_name,new_name,**options)validate_table_length!(new_name)unlessoptions[:_uses_legacy_table_name]schema_cache.clear_data_source_cache!(table_name.to_s)schema_cache.clear_data_source_cache!(new_name.to_s)exec_query"ALTER TABLE #{quote_table_name(table_name)} RENAME TO #{quote_table_name(new_name)}"rename_table_indexes(table_name,new_name,**options)endrequires_reloading?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 151defrequires_reloading?trueendsupports_check_constraints?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 159defsupports_check_constraints?trueendsupports_common_table_expressions?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 175defsupports_common_table_expressions?database_version>="3.8.3"endsupports_concurrent_connections?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 190defsupports_concurrent_connections?!@memory_databaseendsupports_datetime_with_precision?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 167defsupports_datetime_with_precision?trueendsupports_ddl_transactions?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 131defsupports_ddl_transactions?trueendsupports_deferrable_constraints?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 236defsupports_deferrable_constraints?trueendsupports_explain?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 228defsupports_explain?trueendsupports_expression_index?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 147defsupports_expression_index?database_version>="3.9.0"endsupports_foreign_keys?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 155defsupports_foreign_keys?trueendsupports_index_sort_order?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 215defsupports_index_sort_order?trueendsupports_insert_conflict_target?()LinkAlias for:supports_insert_on_conflict?supports_insert_on_conflict?()LinkAlso aliased as:supports_insert_on_duplicate_skip?,supports_insert_on_duplicate_update?,supports_insert_conflict_target?Source:show|on GitHub# File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 183defsupports_insert_on_conflict?database_version>="3.24.0"endsupports_insert_on_duplicate_skip?()LinkAlias for:supports_insert_on_conflict?supports_insert_on_duplicate_update?()LinkAlias for:supports_insert_on_conflict?supports_insert_returning?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 179defsupports_insert_returning?database_version>="3.35.0"endsupports_json?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 171defsupports_json?trueendsupports_lazy_transactions?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 232defsupports_lazy_transactions?trueendsupports_partial_index?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 143defsupports_partial_index?trueendsupports_savepoints?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 135defsupports_savepoints?trueendsupports_transaction_isolation?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 139defsupports_transaction_isolation?trueendsupports_views?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 163defsupports_views?trueendsupports_virtual_columns?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 194defsupports_virtual_columns?database_version>="3.31.0"enduse_insert_returning?()LinkSource:show|on GitHub# File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 431defuse_insert_returning?@use_insert_returningend