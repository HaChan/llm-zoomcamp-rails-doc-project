Action View Capture HelpersCaptureHelper exposes methods to let you extract generated markup which can be used in other parts of a template or layout file.It provides a method to capture blocks into variables throughcaptureand a way to capture a block of markup for use in a layout throughcontent_for.As well as provides a method when using streaming responses throughprovide. SeeActionController::Streamingfor more information.MethodsCcapture,content_for,content_for?PprovideInstance Public methodscapture(*args, &block)LinkThe capture method extracts part of a template as a string object. You can then use this object anywhere in your templates, layout, or helpers.The capture method can be used in ERB templatesâ¦<% @greeting = capture do %>
  Welcome to my shiny new web page!  The date and time is
  <%= Time.now %>
<% end %>â¦and Builder (RXML) templates.@timestamp = capture do
  "The current timestamp is #{Time.now}."
endYou can then use that variable anywhere else. For example:<html>
<head><title><%= @greeting %></title></head>
<body>
<b><%= @greeting %></b>
</body>
</html>The return of capture is the string generated by the block. For Example:@greeting # => "Welcome to my shiny new web page! The date and time is 2018-09-06 11:09:16 -0500"Source:show|on GitHub# File actionview/lib/action_view/helpers/capture_helper.rb, line 47defcapture(*args,&block)value=nil@output_buffer||=ActionView::OutputBuffer.newbuffer=@output_buffer.capture{value=yield(*args) }string=if@output_buffer.equal?(value)bufferelsebuffer.presence||valueendcasestringwhenOutputBufferstring.to_swhenActiveSupport::SafeBufferstringwhenStringERB::Util.html_escape(string)endendcontent_for(name, content = nil, options = {}, &block)LinkCallingcontent_forstores a block of markup in an identifier for later use. In order to access this stored content in other templates, helper modules or the layout, you would pass the identifier as an argument tocontent_for.Note:yieldcan still be used to retrieve the stored content, but callingyielddoesnât work in helper modules, whilecontent_fordoes.<% content_for :not_authorized do %>
  alert('You are not authorized to do that!')
<% end %>You can then usecontent_for :not_authorizedanywhere in your templates.<%= content_for :not_authorized if current_user.nil? %>This is equivalent to:<%= yield :not_authorized if current_user.nil? %>content_for, however, can also be used in helper modules.module StorageHelper
  def stored_content
    content_for(:storage) || "Your storage is empty"
  end
endThis helper works just like normal helpers.<%= stored_content %>You can also use theyieldsyntax alongside an existing call toyieldin a layout. For example:<%# This is the layout %>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>My Website</title>
  <%= yield :script %>
</head>
<body>
  <%= yield %>
</body>
</html>And now, weâll create a view that has acontent_forcall that creates thescriptidentifier.<%# This is our view %>
Please login!

<% content_for :script do %>
  <script>alert('You are not authorized to view this page!')</script>
<% end %>Then, in another view, you could to do something like this:<%= link_to 'Logout', action: 'logout', remote: true %>

<% content_for :script do %>
  <%= javascript_include_tag :defaults %>
<% end %>That will placescripttags for your default set of JavaScript files on the page; this technique is useful if youâll only be using these scripts in a few views.Note thatcontent_forconcatenates (default) the blocks it is given for a particular identifier in order. For example:<% content_for :navigation do %>
  <li><%= link_to 'Home', action: 'index' %></li>
<% end %>And in another place:<% content_for :navigation do %>
  <li><%= link_to 'Login', action: 'login' %></li>
<% end %>Then, in another template or layout, this code would render both links in order:<ul><%= content_for :navigation %></ul>If the flush parameter istruecontent_forreplaces the blocks it is given. For example:<% content_for :navigation do %>
  <li><%= link_to 'Home', action: 'index' %></li>
<% end %>

<%# Add some other content, or use a different template: %>

<% content_for :navigation, flush: true do %>
  <li><%= link_to 'Login', action: 'login' %></li>
<% end %>Then, in another template or layout, this code would render only the last link:<ul><%= content_for :navigation %></ul>Lastly, simple content can be passed as a parameter:<% content_for :script, javascript_include_tag(:defaults) %>WARNING:content_foris ignored in caches. So you shouldnât use it for elements that will be fragment cached.Source:show|on GitHub# File actionview/lib/action_view/helpers/capture_helper.rb, line 172defcontent_for(name,content=nil,options= {},&block)ifcontent||block_given?ifblock_given?options=contentifcontentcontent=capture(&block)endifcontentoptions[:flush]?@view_flow.set(name,content):@view_flow.append(name,content)endnilelse@view_flow.get(name).presenceendendcontent_for?(name)Linkcontent_for?checks whether any content has been captured yet usingcontent_for.Useful to render parts of your layout differently based on what is in your views.<%# This is the layout %>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>My Website</title>
  <%= yield :script %>
</head>
<body class="<%= content_for?(:right_col) ? 'two-column' : 'one-column' %>">
  <%= yield %>
  <%= yield :right_col %>
</body>
</html>Source:show|on GitHub# File actionview/lib/action_view/helpers/capture_helper.rb, line 215defcontent_for?(name)@view_flow.get(name).present?endprovide(name, content = nil, &block)LinkThe same ascontent_forbut when used with streaming flushes straight back to the layout. In other words, if you want to concatenate several times to the same buffer when rendering a given template, you should usecontent_for, if not, useprovideto tell the layout to stop looking for more contents.SeeActionController::Streamingfor more information.Source:show|on GitHub# File actionview/lib/action_view/helpers/capture_helper.rb, line 194defprovide(name,content=nil,&block)content=capture(&block)ifblock_given?result=@view_flow.append!(name,content)ifcontentresultunlesscontentend