MethodsGgenerates_token_forInstance Public methodsgenerates_token_for(purpose, expires_in: nil, &block)LinkDefines the behavior of tokens generated for a specificpurpose. A token can be generated by callingTokenFor#generate_token_foron a record. Later, that record can be fetched by calling find_by_token_for (or find_by_token_for!) with the same purpose and token.Tokens are signed so that they are tamper-proof. Thus they can be exposed to outside world as, for example, password reset tokens.By default, tokens do not expire. They can be configured to expire by specifying a duration via theexpires_inoption. The duration becomes part of the tokenâs signature, so changing the value ofexpires_inwill automatically invalidate previously generated tokens.A block may also be specified. When generating a token withTokenFor#generate_token_for, the block will be evaluated in the context of the record, and its return value will be embedded in the token as JSON. Later, when fetching the record with find_by_token_for, the block will be evaluated again in the context of the fetched record. If the two JSON values do not match, the token will be treated as invalid. Note that the value returned by the blockshould not contain sensitive informationbecause it will be embedded in the token ashuman-readable plaintext JSON.Examplesclass User < ActiveRecord::Base
  has_secure_password

  generates_token_for :password_reset, expires_in: 15.minutes do
    # Last 10 characters of password salt, which changes when password is updated:
    password_salt&.last(10)
  end
end

user = User.first

token = user.generate_token_for(:password_reset)
User.find_by_token_for(:password_reset, token) # => user
# 16 minutes later...
User.find_by_token_for(:password_reset, token) # => nil

token = user.generate_token_for(:password_reset)
User.find_by_token_for(:password_reset, token) # => user
user.update!(password: "new password")
User.find_by_token_for(:password_reset, token) # => nilSource:show|on GitHub# File activerecord/lib/active_record/token_for.rb, line 102defgenerates_token_for(purpose,expires_in:nil,&block)self.token_definitions=token_definitions.merge(purpose=>TokenDefinition.new(self,purpose,expires_in,block))end