MethodsAallowDdeprecation_warningSsilence,silencedWwarnConstantsLIB_DIR=RbConfig::CONFIG["libdir"]RAILS_GEM_ROOT=File.expand_path("../../../..", __dir__) + "/"Attributes[RW]gem_nameName of gem where method is deprecated[W]silencedWhether to print a message (silent mode)Instance Public methodsallow(allowed_warnings = :all, if: true, &block)LinkAllow previously disallowed deprecation warnings within the block.allowed_warningscan be an array containing strings, symbols, or regular expressions. (Symbols are treated as strings). These are compared against the text of deprecation warning messages generated within the block. Matching warnings will be exempt from the rules set byActiveSupport::Deprecation#disallowed_warnings.The optionalif:argument accepts a truthy/falsy value or an object that responds to.call. If truthy, then matching warnings will be allowed. If falsey then the method yields to the block without allowing the warning.deprecator = ActiveSupport::Deprecation.new
deprecator.disallowed_behavior = :raise
deprecator.disallowed_warnings = [
  "something broke"
]

deprecator.warn('something broke!')
# => ActiveSupport::DeprecationException

deprecator.allow ['something broke'] do
  deprecator.warn('something broke!')
end
# => nil

deprecator.allow ['something broke'], if: Rails.env.production? do
  deprecator.warn('something broke!')
end
# => ActiveSupport::DeprecationException for dev/test, nil for productionSource:show|on GitHub# File activesupport/lib/active_support/deprecation/reporting.rb, line 89defallow(allowed_warnings=:all,if:true,&block)conditional=binding.local_variable_get(:if)conditional=conditional.callifconditional.respond_to?(:call)ifconditional@explicitly_allowed_warnings.bind(allowed_warnings,&block)elseyieldendenddeprecation_warning(deprecated_method_name, message = nil, caller_backtrace = nil)LinkSource:show|on GitHub# File activesupport/lib/active_support/deprecation/reporting.rb, line 99defdeprecation_warning(deprecated_method_name,message=nil,caller_backtrace=nil)caller_backtrace||=caller_locations(2)deprecated_method_warning(deprecated_method_name,message).tapdo|msg|warn(msg,caller_backtrace)endendsilence(&block)LinkSilence deprecation warnings within the block.deprecator = ActiveSupport::Deprecation.new
deprecator.warn('something broke!')
# => "DEPRECATION WARNING: something broke! (called from your_code.rb:1)"

deprecator.silence do
  deprecator.warn('something broke!')
end
# => nilSource:show|on GitHub# File activesupport/lib/active_support/deprecation/reporting.rb, line 41defsilence(&block)begin_silenceblock.callensureend_silenceendsilenced()LinkSource:show|on GitHub# File activesupport/lib/active_support/deprecation/reporting.rb, line 56defsilenced@silenced||@silence_counter.value.nonzero?endwarn(message = nil, callstack = nil)LinkOutputs a deprecation warning to the output configured byActiveSupport::Deprecation#behavior.ActiveSupport::Deprecation.new.warn('something broke!')
# => "DEPRECATION WARNING: something broke! (called from your_code.rb:1)"Source:show|on GitHub# File activesupport/lib/active_support/deprecation/reporting.rb, line 18defwarn(message=nil,callstack=nil)returnifsilencedcallstack||=caller_locations(2)deprecation_message(callstack,message).tapdo|full_message|ifdeprecation_disallowed?(message)disallowed_behavior.each{|b|b.call(full_message,callstack,self) }elsebehavior.each{|b|b.call(full_message,callstack,self) }endendend