Active RecordReflectionReflection enables the ability to examine the associations and aggregations of Active Record classes and objects. This information, for example, can be used in a form builder that takes an Active Record object and creates input fields for all of the attributes depending on their type and displays the associations to other objects.MacroReflectionclass has info for AggregateReflection and AssociationReflection classes.MethodsNnormalized_reflectionsRreflect_on_aggregation,reflect_on_all_aggregations,reflect_on_all_associations,reflect_on_all_autosave_associations,reflect_on_association,reflectionsInstance Public methodsnormalized_reflections()LinkSource:show|on GitHub# File activerecord/lib/active_record/reflection.rb, line 82defnormalized_reflections# :nodoc@__reflections||=beginref= {}_reflections.eachdo|name,reflection|parent_reflection=reflection.parent_reflectionifparent_reflectionparent_name=parent_reflection.nameref[parent_name] =parent_reflectionelseref[name] =reflectionendendref.freezeendendreflect_on_aggregation(aggregation)LinkReturns the AggregateReflection object for the namedaggregation(use the symbol).Account.reflect_on_aggregation(:balance) # => the balance AggregateReflectionSource:show|on GitHub# File activerecord/lib/active_record/reflection.rb, line 70defreflect_on_aggregation(aggregation)aggregate_reflections[aggregation.to_sym]endreflect_on_all_aggregations()LinkReturns an array of AggregateReflection objects for all the aggregations in the class.Source:show|on GitHub# File activerecord/lib/active_record/reflection.rb, line 62defreflect_on_all_aggregationsaggregate_reflections.valuesendreflect_on_all_associations(macro = nil)LinkReturns an array of AssociationReflection objects for all the associations in the class. If you only want to reflect on a certain association type, pass in the symbol (:has_many,:has_one,:belongs_to) as the first parameter.Example:Account.reflect_on_all_associations             # returns an array of all associations
Account.reflect_on_all_associations(:has_many)  # returns an array of all has_many associationsSource:show|on GitHub# File activerecord/lib/active_record/reflection.rb, line 111defreflect_on_all_associations(macro=nil)association_reflections=normalized_reflections.valuesassociation_reflections.select!{|reflection|reflection.macro==macro}ifmacroassociation_reflectionsendreflect_on_all_autosave_associations()LinkReturns an array of AssociationReflection objects for all associations which have:autosaveenabled.Source:show|on GitHub# File activerecord/lib/active_record/reflection.rb, line 131defreflect_on_all_autosave_associationsreflections=normalized_reflections.valuesreflections.select!{|reflection|reflection.options[:autosave] }reflectionsendreflect_on_association(association)LinkReturns the AssociationReflection object for theassociation(use the symbol).Account.reflect_on_association(:owner)             # returns the owner AssociationReflection
Invoice.reflect_on_association(:line_items).macro  # returns :has_manySource:show|on GitHub# File activerecord/lib/active_record/reflection.rb, line 122defreflect_on_association(association)normalized_reflections[association.to_sym]endreflections()LinkReturns aHashof name of the reflection as the key and an AssociationReflection as the value.Account.reflections # => {"balance" => AggregateReflection}Source:show|on GitHub# File activerecord/lib/active_record/reflection.rb, line 78defreflectionsnormalized_reflections.stringify_keysend