Active Support SubscriberActiveSupport::Subscriberis an object set to consumeActiveSupport::Notifications. The subscriber dispatches notifications to a registered object based on its given namespace.An example would be an Active Record subscriber responsible for collecting statistics about queries:module ActiveRecord
  class StatsSubscriber < ActiveSupport::Subscriber
    attach_to :active_record

    def sql(event)
      Statsd.timing("sql.#{event.payload[:name]}", event.duration)
    end
  end
endAfter configured, whenever a"sql.active_record"notification is published, it will properly dispatch the event (ActiveSupport::Notifications::Event) to thesqlmethod.We can detach a subscriber as well:ActiveRecord::StatsSubscriber.detach_from(:active_record)MethodsAadd_event_subscriber,attach_toCcallDdetach_fromMmethod_addedNnewRremove_event_subscriberSsubscribersClass Public methodsattach_to(namespace, subscriber = new, notifier = ActiveSupport::Notifications, inherit_all: false)LinkAttach the subscriber to a namespace.Source:show|on GitHub# File activesupport/lib/active_support/subscriber.rb, line 35defattach_to(namespace,subscriber=new,notifier=ActiveSupport::Notifications,inherit_all:false)@namespace=namespace@subscriber=subscriber@notifier=notifier@inherit_all=inherit_allsubscribers<<subscriber# Add event subscribers for all existing methods on the class.fetch_public_methods(subscriber,inherit_all).eachdo|event|add_event_subscriber(event)endenddetach_from(namespace, notifier = ActiveSupport::Notifications)LinkDetach the subscriber from a namespace.Source:show|on GitHub# File activesupport/lib/active_support/subscriber.rb, line 50defdetach_from(namespace,notifier=ActiveSupport::Notifications)@namespace=namespace@subscriber=find_attached_subscriber@notifier=notifierreturnunlesssubscribersubscribers.delete(subscriber)# Remove event subscribers of all existing methods on the class.fetch_public_methods(subscriber,true).eachdo|event|remove_event_subscriber(event)end# Reset notifier so that event subscribers will not add for new methods added to the class.@notifier=nilendmethod_added(event)LinkAdds event subscribers for all new methods added to the class.Source:show|on GitHub# File activesupport/lib/active_support/subscriber.rb, line 69defmethod_added(event)super# Only public methods are added as subscribers, and only if a notifier# has been set up. This means that subscribers will only be set up for# classes that call #attach_to.ifpublic_method_defined?(event)&&notifieradd_event_subscriber(event)endendnew()LinkSource:show|on GitHub# File activesupport/lib/active_support/subscriber.rb, line 131definitialize@patterns= {}superendsubscribers()LinkSource:show|on GitHub# File activesupport/lib/active_support/subscriber.rb, line 79defsubscribers@@subscribers||=[]endClass Private methodsadd_event_subscriber(event)LinkSource:show|on GitHub# File activesupport/lib/active_support/subscriber.rb, line 86defadd_event_subscriber(event)# :doc:returnifinvalid_event?(event)pattern=prepare_pattern(event)# Don't add multiple subscribers (e.g. if methods are redefined).returnifpattern_subscribed?(pattern)subscriber.patterns[pattern] =notifier.subscribe(pattern,subscriber)endremove_event_subscriber(event)LinkSource:show|on GitHub# File activesupport/lib/active_support/subscriber.rb, line 97defremove_event_subscriber(event)# :doc:returnifinvalid_event?(event)pattern=prepare_pattern(event)returnunlesspattern_subscribed?(pattern)notifier.unsubscribe(subscriber.patterns[pattern])subscriber.patterns.delete(pattern)endInstance Public methodscall(event)LinkSource:show|on GitHub# File activesupport/lib/active_support/subscriber.rb, line 136defcall(event)method=event.name[0,event.name.index(".")]send(method,event)end