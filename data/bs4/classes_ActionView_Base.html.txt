Action View BaseAction View templates can be written in several ways. If the template file has a.erbextension, then it uses theerubitemplate system which can embed Ruby into an HTML document. If the template file has a.builderextension, then Jim Weirichâs Builder::XmlMarkup library is used.ERBYou triggerERBby using embeddings such as<% %>,<% -%>, and<%= %>. The<%= %>tag set is used when you want output. Consider the following loop for names:<b>Names of all the people</b>
<% @people.each do |person| %>
  Name: <%= person.name %><br/>
<% end %>The loop is set up in regular embedding tags<% %>, and the name is written using the output embedding tag<%= %>. Note that this is not just a usage suggestion. Regular output functions like print or puts wonât work withERBtemplates. So this would be wrong:<%# WRONG %>
Hi, Mr. <% puts "Frodo" %>If you absolutely must write from within a function useconcat.When on a line that only contains whitespaces except for the tag,<% %>suppresses leading and trailing whitespace, including the trailing newline.<% %>and<%- -%>are the same. Note however that<%= %>and<%= -%>are different: only the latter removes trailing whitespaces.Using sub templatesUsing sub templates allows you to sidestep tedious replication and extract common display structures in shared templates. The classic example is the use of a header and footer (even though the Action Pack-way would be to useLayouts):<%= render "application/header" %>
Something really specific and terrific
<%= render "application/footer" %>As you see, we use the output embeddings for the render methods. The render call itself will just return a string holding the result of the rendering. The output embedding writes it to the current template.But you donât have to restrict yourself to static includes. Templates can share variables amongst themselves by using instance variables defined using the regular embedding tags. Like this:<% @page_title = "A Wonderful Hello" %>
<%= render "application/header" %>Now the header can pick up on the@page_titlevariable and use it for outputting a title tag:<title><%= @page_title %></title>Passing local variables to sub templatesYou can pass local variables to sub templates by using a hash with the variable names as keys and the objects as values:<%= render "application/header", { headline: "Welcome", person: person } %>These can now be accessed inapplication/headerwith:Headline: <%= headline %>
First name: <%= person.first_name %>The local variables passed to sub templates can be accessed as a hash using thelocal_assignshash. This lets you access the variables as:Headline: <%= local_assigns[:headline] %>This is useful in cases where you arenât sure if the local variable has been assigned. Alternatively, you could also usedefined? headlineto first check if the variable has been assigned before using it.By default, templates will accept anylocalsas keyword arguments. To restrict whatlocalsa template accepts, add alocals:magic comment:<%# locals: (headline:) %>

Headline: <%= headline %>In cases where the local variables are optional, declare the keyword argument with a default value:<%# locals: (headline: nil) %>

<% unless headline.nil? %>
Headline: <%= headline %>
<% end %>Read more about strict locals inAction View Overviewin the guides.TemplatecachingBy default, Rails will compile each template to a method in order to render it. When you alter a template, Rails will check the fileâs modification time and recompile it in development mode.BuilderBuilder templates are a more programmatic alternative toERB. They are especially useful for generating XML content. An XmlMarkup object namedxmlis automatically made available to templates with a.builderextension.Here are some basic examples:xml.em("emphasized")                                 # => <em>emphasized</em>
xml.em { xml.b("emph & bold") }                      # => <em><b>emph &amp; bold</b></em>
xml.a("A Link", "href" => "http://onestepback.org")  # => <a href="http://onestepback.org">A Link</a>
xml.target("name" => "compile", "option" => "fast")  # => <target option="fast" name="compile"\>
                                                     # NOTE: order of attributes is not specified.Any method with a block will be treated as an XML markup tag with nested markup in the block. For example, the following:xml.div do
  xml.h1(@person.name)
  xml.p(@person.bio)
endwould produce something like:<div>
  <h1>David Heinemeier Hansson</h1>
  <p>A product of Danish Design during the Winter of '79...</p>
</div>Here is a full-length RSS example actually used on Basecamp:xml.rss("version" => "2.0", "xmlns:dc" => "http://purl.org/dc/elements/1.1/") do
  xml.channel do
    xml.title(@feed_title)
    xml.link(@url)
    xml.description "Basecamp: Recent items"
    xml.language "en-us"
    xml.ttl "40"

    @recent_items.each do |item|
      xml.item do
        xml.title(item_title(item))
        xml.description(item_description(item)) if item_description(item)
        xml.pubDate(item_pubDate(item))
        xml.guid(@person.firm.account.url + @recent_items.url(item))
        xml.link(@person.firm.account.url + @recent_items.url(item))

        xml.tag!("dc:creator", item.author_name) if item_has_creator?(item)
      end
    end
  end
endFor more information on Builder please consult thesource code.Methods#_runCcache_template_loading,cache_template_loading=,compiled_method_containerIin_rendering_context,inspectAttributes[R]lookup_context[R]view_rendererClass Public methodscache_template_loading()LinkSource:show|on GitHub# File actionview/lib/action_view/base.rb, line 187defcache_template_loadingActionView::Resolver.caching?endcache_template_loading=(value)LinkSource:show|on GitHub# File actionview/lib/action_view/base.rb, line 191defcache_template_loading=(value)ActionView::Resolver.caching=valueendinspect()LinkSource:show|on GitHub# File actionview/lib/action_view/base.rb, line 207definspect"#<ActionView::Base:#{'%#016x' % (object_id << 1)}>"endInstance Public methods_run(method, template, locals, buffer, add_to_stack: true, has_strict_locals: false, &block)LinkSource:show|on GitHub# File actionview/lib/action_view/base.rb, line 261def_run(method,template,locals,buffer,add_to_stack:true,has_strict_locals:false,&block)_old_output_buffer,_old_virtual_path,_old_template=@output_buffer,@virtual_path,@current_template@current_template=templateifadd_to_stack@output_buffer=bufferifhas_strict_localsbeginpublic_send(method,locals,buffer,**locals,&block)rescueArgumentError=>argument_errorraise(ArgumentError,argument_error.message.gsub("unknown keyword:","unknown local:").gsub("missing keyword:","missing local:").gsub("no keywords accepted","no locals accepted").concat(" for #{@current_template.short_identifier}")
      )endelsepublic_send(method,locals,buffer,&block)endensure@output_buffer,@virtual_path,@current_template=_old_output_buffer,_old_virtual_path,_old_templateendcompiled_method_container()LinkSource:show|on GitHub# File actionview/lib/action_view/base.rb, line 287defcompiled_method_containerraiseNotImplementedError,<<~msg.squishSubclasses of ActionView::Base must implement `compiled_method_container`
        or use the class method `with_empty_template_cache` for constructing
        an ActionView::Base subclass that has an empty cache.msgendin_rendering_context(options)LinkSource:show|on GitHub# File actionview/lib/action_view/base.rb, line 295defin_rendering_context(options)old_view_renderer=@view_rendererold_lookup_context=@lookup_contextif!lookup_context.html_fallback_for_js&&options[:formats]formats=Array(options[:formats])ifformats==[:js]formats<<:htmlend@lookup_context=lookup_context.with_prepended_formats(formats)@view_renderer=ActionView::Renderer.new@lookup_contextendyield@view_rendererensure@view_renderer=old_view_renderer@lookup_context=old_lookup_contextend