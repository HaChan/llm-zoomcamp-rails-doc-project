HTTPDigestauthenticationSimpleDigestexamplerequire "openssl"
class PostsController < ApplicationController
  REALM = "SuperSecret"
  USERS = {"dhh" => "secret", #plain text password
           "dap" => OpenSSL::Digest::MD5.hexdigest(["dap",REALM,"secret"].join(":"))}  #ha1 digest password

  before_action :authenticate, except: [:index]

  def index
    render plain: "Everyone can see me!"
  end

  def edit
    render plain: "I'm only accessible if you know the password"
  end

  private
    def authenticate
      authenticate_or_request_with_http_digest(REALM) do |username|
        USERS[username]
      end
    end
endNotesTheauthenticate_or_request_with_http_digestblock must return the userâs password or the ha1 digest hash so the framework can appropriately hash to check the userâs credentials. Returningnilwill cause authentication to fail.Storing the ha1 hash: MD5(username:realm:password), is better than storing a plain password. If the password file or database is compromised, the attacker would be able to use the ha1 hash to authenticate as the user at thisrealm, but would not have the userâs password to try using at other sites.In rare instances, web servers or front proxies strip authorization headers before they reach your application. You can debug this situation by logging all environment variables, and check for HTTP_AUTHORIZATION, amongst others.NamespaceMODULEActionController::HttpAuthentication::Digest::ControllerMethodsMethodsAauthenticate,authentication_header,authentication_requestDdecode_credentials,decode_credentials_headerEencode_credentials,expected_responseHha1NnonceOopaqueSsecret_tokenVvalidate_digest_response,validate_nonceInstance Public methodsauthenticate(request, realm, &password_procedure)LinkReturns false on a valid response, true otherwise.Source:show|on GitHub# File actionpack/lib/action_controller/metal/http_authentication.rb, line 215defauthenticate(request,realm,&password_procedure)request.authorization&&validate_digest_response(request,realm,&password_procedure)endauthentication_header(controller, realm)LinkSource:show|on GitHub# File actionpack/lib/action_controller/metal/http_authentication.rb, line 274defauthentication_header(controller,realm)secret_key=secret_token(controller.request)nonce=self.nonce(secret_key)opaque=opaque(secret_key)controller.headers["WWW-Authenticate"] =%(Digest realm="#{realm}", qop="auth", algorithm=MD5, nonce="#{nonce}", opaque="#{opaque}")endauthentication_request(controller, realm, message = nil)LinkSource:show|on GitHub# File actionpack/lib/action_controller/metal/http_authentication.rb, line 281defauthentication_request(controller,realm,message=nil)message||="HTTP Digest: Access denied.\n"authentication_header(controller,realm)controller.status=401controller.response_body=messageenddecode_credentials(header)LinkSource:show|on GitHub# File actionpack/lib/action_controller/metal/http_authentication.rb, line 267defdecode_credentials(header)ActiveSupport::HashWithIndifferentAccess[header.to_s.gsub(/^Digest\s+/,"").split(",").mapdo|pair|key,value=pair.split("=",2)
    [key.strip,value.to_s.gsub(/^"|"$/,"").delete("'")]end]enddecode_credentials_header(request)LinkSource:show|on GitHub# File actionpack/lib/action_controller/metal/http_authentication.rb, line 263defdecode_credentials_header(request)decode_credentials(request.authorization)endencode_credentials(http_method, credentials, password, password_is_ha1)LinkSource:show|on GitHub# File actionpack/lib/action_controller/metal/http_authentication.rb, line 258defencode_credentials(http_method,credentials,password,password_is_ha1)credentials[:response] =expected_response(http_method,credentials[:uri],credentials,password,password_is_ha1)"Digest "+credentials.sort_by{|x|x[0].to_s}.map{|v|"#{v[0]}='#{v[1]}'"}.join(", ")endexpected_response(http_method, uri, credentials, password, password_is_ha1 = true)LinkReturns the expected response for a request ofhttp_methodtouriwith the decodedcredentialsand the expectedpasswordOptional parameterpassword_is_ha1is set totrueby default, since best practice is to store ha1 digest instead of a plain-text password.Source:show|on GitHub# File actionpack/lib/action_controller/metal/http_authentication.rb, line 248defexpected_response(http_method,uri,credentials,password,password_is_ha1=true)ha1=password_is_ha1?password:ha1(credentials,password)ha2=OpenSSL::Digest::MD5.hexdigest([http_method.to_s.upcase,uri].join(":"))OpenSSL::Digest::MD5.hexdigest([ha1,credentials[:nonce],credentials[:nc],credentials[:cnonce],credentials[:qop],ha2].join(":"))endha1(credentials, password)LinkSource:show|on GitHub# File actionpack/lib/action_controller/metal/http_authentication.rb, line 254defha1(credentials,password)OpenSSL::Digest::MD5.hexdigest([credentials[:username],credentials[:realm],password].join(":"))endnonce(secret_key, time = Time.now)LinkUses an MD5 digest based on time to generate a value to be used only once.A server-specified data string which should be uniquely generated each time a 401 response is made. It is recommended that this string be base64 or hexadecimal data. Specifically, since the string is passed in the header lines as a quoted string, the double-quote character is not allowed.The contents of the nonce are implementation dependent. The quality of the implementation depends on a good choice. A nonce might, for example, be constructed as the base 64 encoding oftime-stamp H(time-stamp ":" ETag ":" private-key)where time-stamp is a server-generated time or other non-repeating value, ETag is the value of the HTTP ETag header associated with the requested entity, and private-key is data known only to the server. With a nonce of this form a server would recalculate the hash portion after receiving the client authentication header and reject the request if it did not match the nonce from that header or if the time-stamp value is not recent enough. In this way the server can limit the time of the nonceâs validity. The inclusion of the ETag prevents a replay request for an updated version of the resource. (Note: including the IP address of the client in the nonce would appear to offer the server the ability to limit the reuse of the nonce to the same client that originally got it. However, that would break proxy farms, where requests from a single user often go through different proxies in the farm. Also, IP address spoofing is not that hard.)An implementation might choose not to accept a previously used nonce or a previously used digest, in order to protect against a replay attack. Or, an implementation might choose to use one-time nonces or digests for POST, PUT, or PATCH requests, and a time-stamp for GET requests. For more details on the issues involved see Section 4 of this document.The nonce is opaque to the client. Composed ofTime, and hash ofTimewith secret key from theRailssession secret generated upon creation of project. Ensures the time cannot be modified by client.Source:show|on GitHub# File actionpack/lib/action_controller/metal/http_authentication.rb, line 330defnonce(secret_key,time=Time.now)t=time.to_ihashed= [t,secret_key]digest=OpenSSL::Digest::MD5.hexdigest(hashed.join(":"))::Base64.strict_encode64("#{t}:#{digest}")endopaque(secret_key)LinkOpaque based on digest of secret keySource:show|on GitHub# File actionpack/lib/action_controller/metal/http_authentication.rb, line 348defopaque(secret_key)OpenSSL::Digest::MD5.hexdigest(secret_key)endsecret_token(request)LinkSource:show|on GitHub# File actionpack/lib/action_controller/metal/http_authentication.rb, line 288defsecret_token(request)key_generator=request.key_generatorhttp_auth_salt=request.http_auth_saltkey_generator.generate_key(http_auth_salt)endvalidate_digest_response(request, realm, &password_procedure)LinkReturns false unless the request credentials response value matches the expected value. First try the password as a ha1 digest password. If this fails, then try it as a plain text password.Source:show|on GitHub# File actionpack/lib/action_controller/metal/http_authentication.rb, line 222defvalidate_digest_response(request,realm,&password_procedure)secret_key=secret_token(request)credentials=decode_credentials_header(request)valid_nonce=validate_nonce(secret_key,request,credentials[:nonce])ifvalid_nonce&&realm==credentials[:realm]&&opaque(secret_key)==credentials[:opaque]password=password_procedure.call(credentials[:username])returnfalseunlesspasswordmethod=request.get_header("rack.methodoverride.original_method")||request.get_header("REQUEST_METHOD")uri=credentials[:uri]

    [true,false].any?do|trailing_question_mark|[true,false].any?do|password_is_ha1|_uri=trailing_question_mark?uri+"?":uriexpected=expected_response(method,_uri,credentials,password,password_is_ha1)expected==credentials[:response]endendendendvalidate_nonce(secret_key, request, value, seconds_to_timeout = 5 * 60)LinkMight want a shorter timeout depending on whether the request is a PATCH, PUT, or POST, and if the client is a browser or web service. Can be much shorter if the Stale directive is implemented. This would allow a user to use new nonce without prompting the user again for their username and password.Source:show|on GitHub# File actionpack/lib/action_controller/metal/http_authentication.rb, line 341defvalidate_nonce(secret_key,request,value,seconds_to_timeout=5*60)returnfalseifvalue.nil?t=::Base64.decode64(value).split(":").first.to_inonce(secret_key,t)==value&&(t-Time.now.to_i).abs<=seconds_to_timeoutend