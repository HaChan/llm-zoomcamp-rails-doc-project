Provides helper methods for testing Action Mailer, includingassert_emailsandassert_no_emails.MethodsAassert_emails,assert_enqueued_email_with,assert_enqueued_emails,assert_no_emails,assert_no_enqueued_emailsCcapture_emailsDdeliver_enqueued_emailsIncluded ModulesActiveJob::TestHelperInstance Public methodsassert_emails(number, &block)LinkAsserts that the number of emails sent matches the given number.def test_emails
  assert_emails 0
  ContactMailer.welcome.deliver_now
  assert_emails 1
  ContactMailer.welcome.deliver_now
  assert_emails 2
endIf a block is passed, that block should cause the specified number of emails to be sent.def test_emails_again
  assert_emails 1 do
    ContactMailer.welcome.deliver_now
  end

  assert_emails 2 do
    ContactMailer.welcome.deliver_now
    ContactMailer.welcome.deliver_later
  end
endSource:show|on GitHub# File actionmailer/lib/action_mailer/test_helper.rb, line 35defassert_emails(number,&block)ifblock_given?diff=capture_emails(&block).lengthassert_equalnumber,diff,"#{number} emails expected, but #{diff} were sent"elseassert_equalnumber,ActionMailer::Base.deliveries.sizeendendassert_enqueued_email_with(mailer, method, params: nil, args: nil, queue: nil, &block)LinkAsserts that a specific email has been enqueued, optionally matching arguments and/or params.def test_email
  ContactMailer.welcome.deliver_later
  assert_enqueued_email_with ContactMailer, :welcome
end

def test_email_with_parameters
  ContactMailer.with(greeting: "Hello").welcome.deliver_later
  assert_enqueued_email_with ContactMailer, :welcome, args: { greeting: "Hello" }
end

def test_email_with_arguments
  ContactMailer.welcome("Hello", "Goodbye").deliver_later
  assert_enqueued_email_with ContactMailer, :welcome, args: ["Hello", "Goodbye"]
end

def test_email_with_named_arguments
  ContactMailer.welcome(greeting: "Hello", farewell: "Goodbye").deliver_later
  assert_enqueued_email_with ContactMailer, :welcome, args: [{ greeting: "Hello", farewell: "Goodbye" }]
end

def test_email_with_parameters_and_arguments
  ContactMailer.with(greeting: "Hello").welcome("Cheers", "Goodbye").deliver_later
  assert_enqueued_email_with ContactMailer, :welcome, params: { greeting: "Hello" }, args: ["Cheers", "Goodbye"]
end

def test_email_with_parameters_and_named_arguments
  ContactMailer.with(greeting: "Hello").welcome(farewell: "Goodbye").deliver_later
  assert_enqueued_email_with ContactMailer, :welcome, params: { greeting: "Hello" }, args: [{farewell: "Goodbye"}]
end

def test_email_with_parameterized_mailer
  ContactMailer.with(greeting: "Hello").welcome.deliver_later
  assert_enqueued_email_with ContactMailer.with(greeting: "Hello"), :welcome
end

def test_email_with_matchers
  ContactMailer.with(greeting: "Hello").welcome("Cheers", "Goodbye").deliver_later
  assert_enqueued_email_with ContactMailer, :welcome,
    params: ->(params) { /hello/i.match?(params[:greeting]) },
    args: ->(args) { /cheers/i.match?(args[0]) }
endIf a block is passed, that block should cause the specified email to be enqueued.def test_email_in_block
  assert_enqueued_email_with ContactMailer, :welcome do
    ContactMailer.welcome.deliver_later
  end
endIfargsis provided as aHash, a parameterized email is matched.def test_parameterized_email
  assert_enqueued_email_with ContactMailer, :welcome,
    args: {email: 'user@example.com'} do
    ContactMailer.with(email: 'user@example.com').welcome.deliver_later
  end
endSource:show|on GitHub# File actionmailer/lib/action_mailer/test_helper.rb, line 157defassert_enqueued_email_with(mailer,method,params:nil,args:nil,queue:nil,&block)ifmailer.is_a?ActionMailer::Parameterized::Mailerparams=mailer.instance_variable_get(:@params)mailer=mailer.instance_variable_get(:@mailer)endargs=Array(args)unlessargs.is_a?(Proc)queue||=mailer.deliver_later_queue_name||ActiveJob::Base.default_queue_nameexpected=->(job_args)dojob_kwargs=job_args.extract_options![mailer.to_s,method.to_s,"deliver_now"]==job_args&&params===job_kwargs[:params]&&args===job_kwargs[:args]endassert_enqueued_with(job:mailer.delivery_job,args:expected,queue:queue.to_s,&block)endassert_enqueued_emails(number, &block)LinkAsserts that the number of emails enqueued for later delivery matches the given number.def test_emails
  assert_enqueued_emails 0
  ContactMailer.welcome.deliver_later
  assert_enqueued_emails 1
  ContactMailer.welcome.deliver_later
  assert_enqueued_emails 2
endIf a block is passed, that block should cause the specified number of emails to be enqueued.def test_emails_again
  assert_enqueued_emails 1 do
    ContactMailer.welcome.deliver_later
  end

  assert_enqueued_emails 2 do
    ContactMailer.welcome.deliver_later
    ContactMailer.welcome.deliver_later
  end
endSource:show|on GitHub# File actionmailer/lib/action_mailer/test_helper.rb, line 91defassert_enqueued_emails(number,&block)assert_enqueued_jobs(number,only:->(job) {delivery_job_filter(job) },&block)endassert_no_emails(&block)LinkAsserts that no emails have been sent.def test_emails
  assert_no_emails
  ContactMailer.welcome.deliver_now
  assert_emails 1
endIf a block is passed, that block should not cause any emails to be sent.def test_emails_again
  assert_no_emails do
    # No emails should be sent from this block
  end
endNote: This assertion is simply a shortcut for:assert_emails 0, &blockSource:show|on GitHub# File actionmailer/lib/action_mailer/test_helper.rb, line 63defassert_no_emails(&block)assert_emails0,&blockendassert_no_enqueued_emails(&block)LinkAsserts that no emails are enqueued for later delivery.def test_no_emails
  assert_no_enqueued_emails
  ContactMailer.welcome.deliver_later
  assert_enqueued_emails 1
endIf a block is provided, it should not cause any emails to be enqueued.def test_no_emails
  assert_no_enqueued_emails do
    # No emails should be enqueued from this block
  end
endSource:show|on GitHub# File actionmailer/lib/action_mailer/test_helper.rb, line 191defassert_no_enqueued_emails(&block)assert_enqueued_emails0,&blockendcapture_emails(&block)LinkReturns any emails that are sent in the block.def test_emails
  emails = capture_emails do
    ContactMailer.welcome.deliver_now
  end
  assert_equal "Hi there", emails.first.subject

  emails = capture_emails do
    ContactMailer.welcome.deliver_now
    ContactMailer.welcome.deliver_later
  end
  assert_equal "Hi there", emails.first.subject
endSource:show|on GitHub# File actionmailer/lib/action_mailer/test_helper.rb, line 249defcapture_emails(&block)original_count=ActionMailer::Base.deliveries.sizedeliver_enqueued_emails(&block)new_count=ActionMailer::Base.deliveries.sizediff=new_count-original_countActionMailer::Base.deliveries.last(diff)enddeliver_enqueued_emails(queue: nil, at: nil, &block)LinkDelivers all enqueued emails. If a block is given, delivers all of the emails that were enqueued throughout the duration of the block. If a block is not given, delivers all the enqueued emails up to this point in the test.def test_deliver_enqueued_emails
  deliver_enqueued_emails do
    ContactMailer.welcome.deliver_later
  end

  assert_emails 1
end

def test_deliver_enqueued_emails_without_block
  ContactMailer.welcome.deliver_later

  deliver_enqueued_emails

  assert_emails 1
endIf the:queueoption is specified, then only the emails(s) enqueued to a specific queue will be performed.def test_deliver_enqueued_emails_with_queue
  deliver_enqueued_emails queue: :external_mailers do
    CustomerMailer.deliver_later_queue_name = :external_mailers
    CustomerMailer.welcome.deliver_later # will be performed
    EmployeeMailer.deliver_later_queue_name = :internal_mailers
    EmployeeMailer.welcome.deliver_later # will not be performed
  end

  assert_emails 1
endIf the:atoption is specified, then only delivers emails enqueued to deliver immediately or before the given time.Source:show|on GitHub# File actionmailer/lib/action_mailer/test_helper.rb, line 231defdeliver_enqueued_emails(queue:nil,at:nil,&block)perform_enqueued_jobs(only:->(job) {delivery_job_filter(job) },queue:queue,at:at,&block)end