MethodsAassert_class_method,assert_directory,assert_field_default_value,assert_field_type,assert_file,assert_initializer,assert_instance_method,assert_method,assert_migration,assert_no_directory,assert_no_file,assert_no_migrationInstance Public methodsassert_class_method(method, content, &block)LinkAsserts the given class method exists in the given content. This method does not detect class methods inside (class << self), only class methods which starts with âself.â. When a block is given, it yields the content of the method.assert_migration "db/migrate/create_products.rb" do |migration|
  assert_class_method :up, migration do |up|
    assert_match(/create_table/, up)
  end
endSource:show|on GitHub# File railties/lib/rails/generators/testing/assertions.rb, line 88defassert_class_method(method,content,&block)assert_instance_method"self.#{method}",content,&blockendassert_directory(relative, *contents)LinkAlias for:assert_fileassert_field_default_value(attribute_type, value)LinkAsserts the given attribute type gets a proper default value:assert_field_default_value :string, "MyString"Source:show|on GitHub# File railties/lib/rails/generators/testing/assertions.rb, line 117defassert_field_default_value(attribute_type,value)ifvalue.nil?assert_nil(create_generated_attribute(attribute_type).default)elseassert_equal(value,create_generated_attribute(attribute_type).default)endendassert_field_type(attribute_type, field_type)LinkAsserts the given attribute type gets translated to a field type properly:assert_field_type :date, :date_selectSource:show|on GitHub# File railties/lib/rails/generators/testing/assertions.rb, line 110defassert_field_type(attribute_type,field_type)assert_equal(field_type,create_generated_attribute(attribute_type).field_type)endassert_file(relative, *contents)LinkAsserts a given file exists. You need to supply an absolute path or a path relative to the configured destination:assert_file "config/environment.rb"You can also give extra arguments. If the argument is a regexp, it will check if the regular expression matches the given file content. If itâs a string, it compares the file with the given string:assert_file "config/environment.rb", /initialize/Finally, when a block is given, it yields the file content:assert_file "app/controllers/products_controller.rb" do |controller|
  assert_instance_method :index, controller do |index|
    assert_match(/Product\.all/, index)
  end
endAlso aliased as:assert_directorySource:show|on GitHub# File railties/lib/rails/generators/testing/assertions.rb, line 25defassert_file(relative,*contents)absolute=File.expand_path(relative,destination_root)assertFile.exist?(absolute),"Expected file #{relative.inspect} to exist, but does not"read=File.read(absolute)ifblock_given?||!contents.empty?assert_nothing_raised{yieldread}ifblock_given?contents.eachdo|content|casecontentwhenStringassert_equalcontent,readwhenRegexpassert_matchcontent,readendendendassert_initializer(name, *contents, &block)LinkAsserts a given initializer exists. You need to supply a path relative to the âconfig/initializers/` directory.assert_initializer "mail_interceptors.rb"You can also give extra arguments. If the argument is a regexp, it will check if the regular expression matches the given file content. If itâs a string, it compares the file with the given string:assert_initializer "mail_interceptors.rb", /SandboxEmailInterceptor/Finally, when a block is given, it yields the file content:assert_initializer "mail_interceptors.rb" do |initializer|
  assert_match(/SandboxEmailInterceptor/, initializer)
endSource:show|on GitHub# File railties/lib/rails/generators/testing/assertions.rb, line 141defassert_initializer(name,*contents,&block)assert_file("config/initializers/#{name}",*contents,&block)endassert_instance_method(method, content)LinkAsserts the given method exists in the given content. When a block is given, it yields the content of the method.assert_file "app/controllers/products_controller.rb" do |controller|
  assert_instance_method :index, controller do |index|
    assert_match(/Product\.all/, index)
  end
endAlso aliased as:assert_methodSource:show|on GitHub# File railties/lib/rails/generators/testing/assertions.rb, line 100defassert_instance_method(method,content)assertcontent=~/(\s+)def #{method}(\(.+\))?(.*?)\n\1end/m,"Expected to have method #{method}"assert_nothing_raised{yield$3.strip}ifblock_given?endassert_method(method, content)LinkAlias for:assert_instance_methodassert_migration(relative, *contents, &block)LinkAsserts a given migration exists. You need to supply an absolute path or a path relative to the configured destination:assert_migration "db/migrate/create_products.rb"This method manipulates the given path and tries to find any migration which matches the migration name. For example, the call above is converted to:assert_file "db/migrate/003_create_products.rb"Consequently,assert_migrationaccepts the same arguments has assert_file.Source:show|on GitHub# File railties/lib/rails/generators/testing/assertions.rb, line 64defassert_migration(relative,*contents,&block)file_name=migration_file_name(relative)assertfile_name,"Expected migration #{relative} to exist, but was not found"assert_filefile_name,*contents,&blockendassert_no_directory(relative)LinkAlias for:assert_no_fileassert_no_file(relative)LinkAsserts a given file does not exist. You need to supply an absolute path or a path relative to the configured destination:assert_no_file "config/random.rb"Also aliased as:assert_no_directorySource:show|on GitHub# File railties/lib/rails/generators/testing/assertions.rb, line 47defassert_no_file(relative)absolute=File.expand_path(relative,destination_root)assert!File.exist?(absolute),"Expected file #{relative.inspect} to not exist, but does"endassert_no_migration(relative)LinkAsserts a given migration does not exist. You need to supply an absolute path or a path relative to the configured destination:assert_no_migration "db/migrate/create_products.rb"Source:show|on GitHub# File railties/lib/rails/generators/testing/assertions.rb, line 74defassert_no_migration(relative)file_name=migration_file_name(relative)assert_nilfile_name,"Expected migration #{relative} to not exist, but found #{file_name}"end