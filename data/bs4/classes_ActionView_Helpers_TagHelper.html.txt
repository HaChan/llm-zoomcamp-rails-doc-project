Action View Tag HelpersProvides methods to generate HTML tags programmatically both as a modern HTML5 compliant builder style and legacy XHTML compliant tags.MethodsBbuild_tag_valuesCcdata_section,class_names,content_tagEensure_valid_html5_tag_name,escape_onceTtag,token_listIncluded ModulesActionView::Helpers::CaptureHelperActionView::Helpers::OutputSafetyHelperConstantsARIA_PREFIXES=["aria", :aria].to_set.freezeBOOLEAN_ATTRIBUTES=%w(allowfullscreen allowpaymentrequest async autofocus
autoplay checked compact controls declare default
defaultchecked defaultmuted defaultselected defer
disabled enabled formnovalidate hidden indeterminate
inert ismap itemscope loop multiple muted nohref
nomodule noresize noshade novalidate nowrap open
pauseonexit playsinline readonly required reversed
scoped seamless selected sortable truespeed
typemustmatch visible).to_setDATA_PREFIXES=["data", :data].to_set.freezePRE_CONTENT_STRINGS=Hash.new { "" }TAG_TYPES={}Class Public methodsbuild_tag_values(*args)LinkSource:show|on GitHub# File actionview/lib/action_view/helpers/tag_helper.rb, line 593defbuild_tag_values(*args)tag_values= []args.eachdo|tag_value|casetag_valuewhenHashtag_value.eachdo|key,val|tag_values<<key.to_sifval&&key.present?endwhenArraytag_values.concatbuild_tag_values(*tag_value)elsetag_values<<tag_value.to_siftag_value.present?endendtag_valuesendensure_valid_html5_tag_name(name)LinkSource:show|on GitHub# File actionview/lib/action_view/helpers/tag_helper.rb, line 588defensure_valid_html5_tag_name(name)raiseArgumentError,"Invalid HTML5 tag name: #{name.inspect}"unless/\A[a-zA-Z][^\s\/>]*\z/.match?(name)endInstance Public methodscdata_section(content)LinkReturns a CDATA section with the givencontent. CDATA sections are used to escape blocks of text containing characters which would otherwise be recognized as markup. CDATA sections begin with the string<![CDATA[and end with (and may not contain) the string]]>.cdata_section("<hello world>")
# => <![CDATA[<hello world>]]>

cdata_section(File.read("hello_world.txt"))
# => <![CDATA[<hello from a text file]]>

cdata_section("hello]]>world")
# => <![CDATA[hello]]]]><![CDATA[>world]]>Source:show|on GitHub# File actionview/lib/action_view/helpers/tag_helper.rb, line 571defcdata_section(content)splitted=content.to_s.gsub(/\]\]>/,"]]]]><![CDATA[>")"<![CDATA[#{splitted}]]>".html_safeendclass_names(*args)LinkAlias for:token_listcontent_tag(name, content_or_options_with_block = nil, options = nil, escape = true, &block)LinkReturns an HTML block tag of typenamesurrounding thecontent. Add HTML attributes by passing an attributes hash tooptions. Instead of passing the content as an argument, you can also use a block in which case, you pass youroptionsas the second parameter. Set escape to false to disable escaping. Note: this is legacy syntax, seetagmethod description for details.OptionsTheoptionshash can be used with attributes with no value like (disabledandreadonly), which you can give a value of true in theoptionshash. You can use symbols or strings for the attribute names.Examplescontent_tag(:p, "Hello world!")
 # => <p>Hello world!</p>
content_tag(:div, content_tag(:p, "Hello world!"), class: "strong")
 # => <div class="strong"><p>Hello world!</p></div>
content_tag(:div, "Hello world!", class: ["strong", "highlight"])
 # => <div class="strong highlight">Hello world!</div>
content_tag(:div, "Hello world!", class: ["strong", { highlight: current_user.admin? }])
 # => <div class="strong highlight">Hello world!</div>
content_tag("select", options, multiple: true)
 # => <select multiple="multiple">...options...</select>

<%= content_tag :div, class: "strong" do -%>
  Hello world!
<% end -%>
 # => <div class="strong">Hello world!</div>Source:show|on GitHub# File actionview/lib/action_view/helpers/tag_helper.rb, line 529defcontent_tag(name,content_or_options_with_block=nil,options=nil,escape=true,&block)ensure_valid_html5_tag_name(name)ifblock_given?options=content_or_options_with_blockifcontent_or_options_with_block.is_a?(Hash)tag_builder.content_tag_string(name,capture(&block),options,escape)elsetag_builder.content_tag_string(name,content_or_options_with_block,options,escape)endendescape_once(html)LinkReturns an escaped version ofhtmlwithout affecting existing escaped entities.escape_once("1 < 2 &amp; 3")
# => "1 &lt; 2 &amp; 3"

escape_once("&lt;&lt; Accept & Checkout")
# => "&lt;&lt; Accept &amp; Checkout"Source:show|on GitHub# File actionview/lib/action_view/helpers/tag_helper.rb, line 583defescape_once(html)ERB::Util.html_escape_once(html)endtag(name = nil, options = nil, open = false, escape = true)LinkReturns an HTML tag.Building HTML tagsBuilds HTML5 compliant tags with a tag proxy. Every tag can be built with:tag.<tag name>(optional content, options)where tag name can be e.g. br, div, section, article, or any tag really.Passing contentTagscan pass content to embed within it:tag.h1 'All titles fit to print' # => <h1>All titles fit to print</h1>

tag.div tag.p('Hello world!')  # => <div><p>Hello world!</p></div>Content can also be captured with a block, which is useful in templates:<%= tag.p do %>
  The next great American novel starts here.
<% end %>
# => <p>The next great American novel starts here.</p>OptionsUse symbol keyed options to add attributes to the generated tag.tag.section class: %w( kitties puppies )
# => <section class="kitties puppies"></section>

tag.section id: dom_id(@post)
# => <section id="<generated dom id>"></section>Passtruefor any attributes that can render with no values, likedisabledandreadonly.tag.input type: 'text', disabled: true
# => <input type="text" disabled="disabled">HTML5data-*andaria-*attributes can be set with a singledataorariakey pointing to a hash of sub-attributes.To play nicely with JavaScript conventions, sub-attributes are dasherized.tag.article data: { user_id: 123 }
# => <article data-user-id="123"></article>Thusdata-user-idcan be accessed asdataset.userId.Data attribute values are encoded to JSON, with the exception of strings, symbols, and BigDecimals. This may come in handy when using jQueryâs HTML5-aware.data()from 1.4.3.tag.div data: { city_state: %w( Chicago IL ) }
# => <div data-city-state="[&quot;Chicago&quot;,&quot;IL&quot;]"></div>The generated tag names and attributes are escaped by default. This can be disabled usingescape.tag.img src: 'open & shut.png'
# => <img src="open &amp; shut.png">

tag.img src: 'open & shut.png', escape: false
# => <img src="open & shut.png">The tag builder respectsHTML5 void elementsif no content is passed, and omits closing tags for those elements.# A standard element:
tag.div # => <div></div>

# A void element:
tag.br  # => <br>Note that when using the block form options should be wrapped in parenthesis.<%= tag.a(href: "/about", class: "font-bold") do %>
  About the author
<% end %>
# => <a href="/about" class="font-bold">About the author</a>Building HTML attributesTransforms aHashinto HTML attributes, ready to be interpolated intoERB. Includes or omits boolean attributes based on their truthiness. Transforms keys nested withinaria:ordata:objects intoaria-anddata-prefixed attributes:<input <%= tag.attributes(type: :text, aria: { label: "Search" }) %>>
# => <input type="text" aria-label="Search">

<button <%= tag.attributes id: "call-to-action", disabled: false, aria: { expanded: false } %> class="primary">Get Started!</button>
# => <button id="call-to-action" aria-expanded="false" class="primary">Get Started!</button>Legacy syntaxThe following format is for legacy syntax support. It will be deprecated in future versions of Rails.tag(name, options = nil, open = false, escape = true)It returns an empty HTML tag of typenamewhich by default is XHTML compliant. Setopento true to create an open tag compatible with HTML 4.0 and below. Add HTML attributes by passing an attributes hash tooptions. Setescapeto false to disable attribute value escaping.OptionsYou can use symbols or strings for the attribute names.Usetruewith boolean attributes that can render with no value, likedisabledandreadonly.HTML5data-*attributes can be set with a singledatakey pointing to a hash of sub-attributes.Examplestag("br")
# => <br />

tag("br", nil, true)
# => <br>

tag("input", type: 'text', disabled: true)
# => <input type="text" disabled="disabled" />

tag("input", type: 'text', class: ["strong", "highlight"])
# => <input class="strong highlight" type="text" />

tag("img", src: "open & shut.png")
# => <img src="open &amp; shut.png" />

tag("img", { src: "open &amp; shut.png" }, false, false)
# => <img src="open &amp; shut.png" />

tag("div", data: { name: 'Stephen', city_state: %w(Chicago IL) })
# => <div data-name="Stephen" data-city-state="[&quot;Chicago&quot;,&quot;IL&quot;]" />

tag("div", class: { highlight: current_user.admin? })
# => <div class="highlight" />Source:show|on GitHub# File actionview/lib/action_view/helpers/tag_helper.rb, line 492deftag(name=nil,options=nil,open=false,escape=true)ifname.nil?tag_builderelseensure_valid_html5_tag_name(name)"<#{name}#{tag_builder.tag_options(options, escape) if options}#{open ? ">" : " />"}".html_safeendendtoken_list(*args)LinkReturns a string of tokens built fromargs.Examplestoken_list("foo", "bar")
 # => "foo bar"
token_list("foo", "foo bar")
 # => "foo bar"
token_list({ foo: true, bar: false })
 # => "foo"
token_list(nil, false, 123, "", "foo", { bar: true })
 # => "123 foo bar"Also aliased as:class_namesSource:show|on GitHub# File actionview/lib/action_view/helpers/tag_helper.rb, line 551deftoken_list(*args)tokens=build_tag_values(*args).flat_map{|value|CGI.unescape_html(value.to_s).split(/\s+/) }.uniqsafe_join(tokens," ")end